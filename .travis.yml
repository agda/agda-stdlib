language: c
branches:
  only:
  - master
  - experimental

dist: xenial

matrix:
  include:
    - env:
        GHC_VER=8.4.4
        CABAL_VER=2.2
        ALEX_VER=3.2.5
        HAPPY_VER=1.19.12
      addons:
        apt:
          packages:
            - cabal-install-2.2
            - ghc-8.4.4
          sources:
            - hvr-ghc

      cache:
        directories:
          - $HOME/.cabsnap

      before_install:
        - export PATH=/opt/ghc/$GHC_VER/bin:/opt/cabal/$CABAL_VER/bin:/opt/alex/$ALEX_VER/bin:/opt/happy/$HAPPY_VER/bin:~/.cabal/bin/:$PATH;

      install:
        - cabal update
        - sed -i 's/^jobs:/-- jobs:/' $HOME/.cabal/config

        # installing dependencies
        - cabal install alex-$ALEX_VER happy-$HAPPY_VER cpphs

        # installing Agda
        # Even if there seems to be duplicated code for master & experimental,
        # DO NOT refactor: they regularly get out of sync (typically master
        # builds with the released version while experimental uses some dev
        # version).

        # No matter the path, we should generate a $HOME/installplan.txt to
        # check whether the cache needs updating.

        - if [[ $TRAVIS_BRANCH = "master" ]]; then
             cd ../ &&
             git clone https://github.com/agda/agda &&
             cd agda &&
             git checkout 5053aa9d2a901cfb4c54848e8455820f0183f1b3 &&
             cabal install --only-dependencies --dry -v > $HOME/installplan.txt ;
          fi

        - if [[ $TRAVIS_BRANCH = "experimental" ]]; then
             cd ../ &&
             git clone https://github.com/agda/agda &&
             cd agda &&
             git checkout c2d5ec4b2403c68d615b81258d6131774e492797 &&
             cabal install --only-dependencies --dry -v > $HOME/installplan.txt ;
          fi

        # checking whether .ghc is still valid
        - sed -i -e '1,/^Resolving /d' $HOME/installplan.txt; cat $HOME/installplan.txt
        - touch $HOME/.cabsnap/installplan.txt
        - mkdir -p $HOME/.cabsnap/ghc $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin
        - if diff -u $HOME/.cabsnap/installplan.txt $HOME/installplan.txt;
          then
            echo "cabal build-cache HIT";
            rm -rfv .ghc;
            cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
            cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
          else
            echo "cabal build-cache MISS";
            rm -rf $HOME/.cabsnap;
            mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
          fi

        - if [[ $TRAVIS_BRANCH = "master" ]]; then
            cabal install ;
          fi

        - if [[ $TRAVIS_BRANCH = "experimental" ]]; then
            cabal install ;
          fi

        # snapshot package-db on cache miss
        - echo "snapshotting package-db to build-cache";
          mkdir $HOME/.cabsnap;
          cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
          cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin $HOME/installplan.txt $HOME/.cabsnap/;

        - if [[ $TRAVIS_BRANCH = "master" ]]; then
            cd ../ ;
          fi

        - if [[ $TRAVIS_BRANCH = "experimental" ]]; then
            cd ../ ;
          fi

        # installing fix-whitespace
        - git clone https://github.com/agda/fix-whitespace --depth=1
        - cd fix-whitespace
        - cabal install fix-whitespace.cabal
        - cd ../

        # generating Everything.agda
        - cd agda-stdlib
        - cabal install lib.cabal
        - runghc GenerateEverything.hs

        # setting up travis-specific scripts and files
        - cp travis/* .

      before_script:
        - export AGDA_OPTIONS="-Werror"
        - export RTS_OPTIONS="+RTS -M3.5G -H3.5G -A128M -RTS"

      script:
        # generating index.agda
        - ./index.sh
        # detecting whitespace violations
        - fix-whitespace --check
        # expose the value of OPTIONS
        - echo $AGDA_OPTIONS
        - echo $RTS_OPTIONS
        # checking safe modules build with --safe
        - agda $AGDA_OPTIONS $RTS_OPTIONS -i . -i src/ --safe EverythingSafeGuardedness.agda
        - agda $AGDA_OPTIONS $RTS_OPTIONS -i . -i src/ --safe EverythingSafeSizedTypes.agda
        # detecting basic compilation errors
        - agda $AGDA_OPTIONS $RTS_OPTIONS -i . -i src/ -c --no-main Everything.agda
        # compiling & running the examples using the FFI
        - agda $AGDA_OPTIONS $RTS_OPTIONS -i . -i src/ -c README/Foreign/Haskell.agda && ./Haskell
        # building the docs
        - agda $AGDA_OPTIONS $RTS_OPTIONS -i . -i src/ --html safe.agda
        - agda $AGDA_OPTIONS $RTS_OPTIONS -i . -i src/ --html index.agda

        # moving everything to the appropriate directory
        - if [[ $TRAVIS_BRANCH = "master" ]]; then
            mv html/* . ;
          fi
        - if [[ $TRAVIS_BRANCH = "experimental" ]]; then
            mv html/* experimental/ ;
          fi

      after_success:
        # uploading to gh-pages
        - git init
        - git config --global user.name "Travis CI bot"
        - git config --global user.email "travis-ci-bot@travis.fake"
        - git remote add upstream https://$GH_TOKEN@github.com/agda/agda-stdlib.git &>/dev/null
        - git fetch upstream && git reset upstream/gh-pages
        - if [[ $TRAVIS_BRANCH = "master" ]]; then
            git checkout HEAD -- v0.16/ v0.17/ v1.0/ v1.1/ v1.2/ experimental/ ;
          fi
        - if [[ $TRAVIS_BRANCH = "experimental" ]]; then
            git checkout HEAD -- *.html v0.16/ v0.17/ v1.0/ v1.1/ v1.2/ ;
          fi
        - git add -f \*.html
        - git commit -m "Automatic HTML update via Travis"
        - if [[ $TRAVIS_PULL_REQUEST = "false" && ($TRAVIS_BRANCH = "master" || $TRAVIS_BRANCH = "experimental") ]]; then
             git push -q upstream HEAD:gh-pages &>/dev/null;
          fi

      notifications:
        email: false

    - stage: stack
      env:
        GHC_VER=8.4.4
      cache:
        directories:
          - $HOME/.stack
          - $TRAVIS_BUILD_DIR/.stack-work
          - $HOME/.local/bin
      before_install:
        # Install ghc
        - sudo -E apt-add-repository -y "ppa:hvr/ghc" &&
          travis_apt_get_update &&
          sudo -E apt-get -yq --no-install-suggests --no-install-recommends install ghc-${GHC_VER} &&
          export PATH=/opt/ghc/$GHC_VER/bin:$PATH
        # Install stack
        - mkdir -p ~/.local/bin && export PATH=$HOME/.local/bin:$PATH &&
          travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
        #Â Set up arguments and flags for stack compilation
        - export ARGS="--stack-yaml stack-${GHC_VER}.yaml --no-terminal --system-ghc"
        - echo "*** GHC version ***"     && ghc     --version &&
          echo "*** Stack version ***"   && stack   --version
      install:
        - stack ${ARGS} build
      script:
        - stack ${ARGS} exec -- GenerateEverything
        - stack ${ARGS} exec -- AllNonAsciiChars
      before_cache:
        - find ${TRAVIS_BUILD_DIR}/.stack-work -type f -name '*.agdai' -delete
      after_success: []
