------------------------------------------------------------------------
-- The Agda standard library
--
-- The Random monad class
------------------------------------------------------------------------

{-# OPTIONS --cubical-compatible --guardedness #-}

module Effect.Monad.Random where

open import Algebra using (RawMonoid)
open import Effect.Functor using (RawFunctor)
open import Function.Base using (id; const)
open import IO.Base using (IO)
open import Level using (Level; _‚äî_)
open import Relation.Binary.Core using (Rel)

open import System.Random as Random using (RandomRIO; InBounds)

private
  variable
    e f g s w : Level
    A : Set f
    B : Set g
    E : Set e
    S : Set s
    R : Rel A f
    M : Set f ‚Üí Set g

------------------------------------------------------------------------
-- Random monad operations

record RawMonadRandom
       (A : Set f)
       (M : Set f ‚Üí Set g)
       : Set (f ‚äî g) where
  field
    getRandom : M A

record RawMonadRandomR
       (A : Set f) (_‚â§_ : Rel A f)
       (M : Set f ‚Üí Set g)
       : Set (f ‚äî g) where
  field
    getRandom  : M A
    getRandomR : (lo hi : A) ‚Üí .(lo‚â§hi : lo ‚â§ hi) ‚Üí M (InBounds _‚â§_ lo hi)

------------------------------------------------------------------------
-- Operations over RawMonadRandom

forgetRanged : RawMonadRandomR A R M ‚Üí RawMonadRandom A M
forgetRanged m = record { getRandom = RawMonadRandomR.getRandom m }

------------------------------------------------------------------------
-- IO monad specifics

module MkRandomIOInstances
  {a} {A : Set a} (_‚â§_ : Rel A a)
  (randomIO : IO A)
  (randomRIO : RandomRIO _‚â§_) where

  monadRandomR : RawMonadRandomR A _‚â§_ IO
  monadRandomR = record
    { getRandom = randomIO
    ; getRandomR = randomRIO }

  monadRandom : RawMonadRandom A IO
  monadRandom = forgetRanged monadRandomR


module Char where

  open import Data.Char.Base using (Char; _‚â§_)
  open MkRandomIOInstances _‚â§_ Random.Char.randomIO Random.Char.randomRIO public

module Float where

  open import Data.Float.Base using (Float; _‚â§_)
  open MkRandomIOInstances _‚â§_ Random.Float.randomIO Random.Float.randomRIO public

module ‚Ñ§ where

  open import Data.Integer.Base using (‚Ñ§; _‚â§_)
  open MkRandomIOInstances _‚â§_ Random.‚Ñ§.randomIO Random.‚Ñ§.randomRIO public

module ‚Ñï where

  open import Data.Nat.Base using (‚Ñï; _‚â§_)
  open MkRandomIOInstances _‚â§_ Random.‚Ñï.randomIO Random.‚Ñï.randomRIO public

module Word64 where

  open import Data.Word64.Base using (Word64; _‚â§_)
  open MkRandomIOInstances _‚â§_ Random.Word64.randomIO Random.Word64.randomRIO public

module Fin where

  open import Data.Nat.Base using (‚Ñï; NonZero)
  open import Data.Fin.Base using (Fin; _‚â§_)

  module _ (n : ‚Ñï) .{{p : NonZero n}} where
    open MkRandomIOInstances _‚â§_ (Random.Fin.randomIO {{p}}) Random.Fin.randomRIO public


module List {a} {A : Set a} (rIO : IO A)  where

  open import Data.List.Base using (List)

  monadRandom : RawMonadRandom (List A) IO
  monadRandom = record { getRandom = Random.List.randomIO rIO }


open import Data.Nat.Base using (‚Ñï)

module Vec {a} {A : Set a} (rIO : IO A) (n : ‚Ñï) where

  open import Data.Vec.Base using (Vec)

  monadRandom : RawMonadRandom (Vec A n) IO
  monadRandom = record { getRandom = Random.Vec.randomIO rIO n }

module Vec‚â§ {a} {A : Set a} (rIO : IO A) (n : ‚Ñï) where

  open import Data.Vec.Bounded.Base using (Vec‚â§)

  monadRandom : RawMonadRandom (Vec‚â§ A n) IO
  monadRandom = record { getRandom = Random.Vec‚â§.randomIO rIO n }

module String where

  open import Data.String.Base using (String)

  monadRandom : RawMonadRandom String IO
  monadRandom = record { getRandom = Random.String.randomIO }

module String‚â§ (n : ‚Ñï) where

  open import Data.String.Base using (String)

  monadRandom : RawMonadRandom String IO
  monadRandom = record { getRandom = Random.String‚â§.randomIO n }

open import Data.Char.Base using (Char; _‚â§_)

module RangedString‚â§ (a b : Char)  .(a‚â§b : a ‚â§ b) (n : ‚Ñï) where

  open import Data.String.Base using (String)

  monadRandom : RawMonadRandom String IO
  monadRandom = record { getRandom = Random.RangedString‚â§.randomIO a b a‚â§b n }

open import Effect.Monad.Reader.Transformer.Base

liftReaderT : RawMonadRandom A M ‚Üí RawMonadRandom A (ReaderT B M)
liftReaderT rand = record
  { getRandom = mkReaderT (const Rand.getRandom)
  } where module Rand = RawMonadRandom rand

liftRReaderT : RawMonadRandomR A R M ‚Üí RawMonadRandomR A R (ReaderT B M)
liftRReaderT randR = record
  { getRandom = mkReaderT (const RandR.getRandom)
  ; getRandomR = Œª lo hi lo‚â§hi ‚Üí mkReaderT (const (RandR.getRandomR lo hi lo‚â§hi))
  } where module RandR = RawMonadRandomR randR

open import Data.Product.Base using (_,_)
open import Effect.Monad.Writer.Transformer.Base

module _ {ùïé : RawMonoid w g} where

  open RawMonoid ùïé renaming (Carrier to W)

  liftWriterT : RawFunctor M ‚Üí
                RawMonadRandom A M ‚Üí
                RawMonadRandom A (WriterT ùïé M)
  liftWriterT M rand = record
    { getRandom = mkWriterT (Œª w ‚Üí (w ,_) <$> Rand.getRandom)
    } where open RawFunctor M
            module Rand = RawMonadRandom rand

  liftRWriterT : RawFunctor M ‚Üí
                 RawMonadRandomR A R M ‚Üí
                 RawMonadRandomR A R (WriterT ùïé M)
  liftRWriterT M randR = record
    { getRandom = mkWriterT (Œª w ‚Üí (w ,_) <$> RandR.getRandom)
    ; getRandomR = Œª lo hi lo‚â§hi ‚Üí mkWriterT (Œª w ‚Üí (w ,_) <$> RandR.getRandomR lo hi lo‚â§hi)
    } where open RawFunctor M
            module RandR = RawMonadRandomR randR

open import Effect.Monad.State.Transformer.Base

liftStateT : RawFunctor M ‚Üí
             RawMonadRandom A M ‚Üí
             RawMonadRandom A (StateT S M)
liftStateT M rand = record
  { getRandom = mkStateT (Œª w ‚Üí (w ,_) <$> Rand.getRandom)
  } where open RawFunctor M
          module Rand = RawMonadRandom rand

liftRStateT : RawFunctor M ‚Üí
              RawMonadRandomR A R M ‚Üí
              RawMonadRandomR A R (StateT S M)
liftRStateT M randR = record
  { getRandom = mkStateT (Œª s ‚Üí (s ,_) <$> RandR.getRandom)
  ; getRandomR = Œª lo hi lo‚â§hi ‚Üí mkStateT (Œª s ‚Üí (s ,_) <$> RandR.getRandomR lo hi lo‚â§hi)
  } where open RawFunctor M
          module RandR = RawMonadRandomR randR


open import Data.Sum.Base using (inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Data.Sum.Effectful.Left.Transformer

liftSum‚ÇóT : RawFunctor M ‚Üí
            RawMonadRandom A M ‚Üí
            RawMonadRandom A (Sum‚ÇóT E _ M)
liftSum‚ÇóT M rand = record
  { getRandom = mkSum‚ÇóT (inj‚ÇÇ <$> Rand.getRandom)
  } where open RawFunctor M
          module Rand = RawMonadRandom rand

liftRSum‚ÇóT : RawFunctor M ‚Üí
             RawMonadRandomR A R M ‚Üí
             RawMonadRandomR A R (Sum‚ÇóT E _ M)
liftRSum‚ÇóT M randR = record
  { getRandom = mkSum‚ÇóT (inj‚ÇÇ <$> RandR.getRandom)
  ; getRandomR = Œª lo hi lo‚â§hi ‚Üí mkSum‚ÇóT (inj‚ÇÇ <$> RandR.getRandomR lo hi lo‚â§hi)
  } where open RawFunctor M
          module RandR = RawMonadRandomR randR

open import Data.Sum.Effectful.Right.Transformer

liftSum·µ£T : RawFunctor M ‚Üí
            RawMonadRandom A M ‚Üí
            RawMonadRandom A (Sum·µ£T _ E M)
liftSum·µ£T M rand = record
  { getRandom = mkSum·µ£T (inj‚ÇÅ <$> Rand.getRandom)
  } where open RawFunctor M
          module Rand = RawMonadRandom rand

liftRSum·µ£T : RawFunctor M ‚Üí
             RawMonadRandomR A R M ‚Üí
             RawMonadRandomR A R (Sum·µ£T _ E M)
liftRSum·µ£T M randR = record
  { getRandom = mkSum·µ£T (inj‚ÇÅ <$> RandR.getRandom)
  ; getRandomR = Œª lo hi lo‚â§hi ‚Üí mkSum·µ£T (inj‚ÇÅ <$> RandR.getRandomR lo hi lo‚â§hi)
  } where open RawFunctor M
          module RandR = RawMonadRandomR randR
