------------------------------------------------------------------------
-- The Agda standard library
--
-- Properties of linear maps.
------------------------------------------------------------------------

{-# OPTIONS --without-K #-}

module Algebra.Module.Morphism.Linear.Properties where

open import Agda.Builtin.Sigma
open import Algebra                             using (CommutativeRing)
open import Algebra.Module                      using (Module)
open import Algebra.Module.Morphism.Linear.Core
open import Axiom.Extensionality.Propositional  using (Extensionality)
open import Data.List
open import Data.Product   using (╬Б; _,_; РѕЃ; ╬Б-syntax; РѕЃ-syntax)
open import Function       using (_Рєћ_; mkРєћ; id; const)
open import Level          using (Level; _Ріћ_)
open import Relation.Nullary          using (┬г_)
open import Relation.Nullary.Negation using (contraposition)

private
  variable
    РёЊРѓЂ РёЊРѓѓ r РёЊr m РёЊm : Level
    ring           : CommutativeRing r РёЊr
    modA modB      : Module ring m РёЊm
  
postulate
  extensionality  : Extensionality РёЊРѓЂ РёЊРѓѓ
  -- excluded-middle : Рѕђ {A : Set РёЊРѓЂ} Рєњ ┬г (┬г A) РЅА A
  -- РЅА-involutive    : Рѕђ {A : Set РёЊРѓЂ} Рєњ {x y : A} Рєњ ┬г (x РЅб y) Рєњ x РЅА y

module _ (lm : LinMap modA modB) where

  open LinMap lm
    
  -- f(x) РЅѕ 0 iff x РЅѕ 0, for linear non-trivial f
  f­ЮЪўРЅѕ­ЮЪў : {x : A} Рєњ f 0р┤г РЅѕр┤« 0р┤«
  f­ЮЪўРЅѕ­ЮЪў {x = x} = begin
    f 0р┤г       РЅѕРЪе f-cong (symр┤г (┬ир┤г-zero╦А x)) РЪЕ
    f (­ЮЪў ┬ир┤г x) РЅѕРЪе scales РЪЕ
    ­ЮЪў ┬ир┤« f x   РЅѕРЪе ┬ир┤«-zero╦А (f x) РЪЕ
    0р┤« Рѕј

  xРЅѕ­ЮЪўРєњfxРЅѕ­ЮЪў : {x : A} Рєњ x РЅѕр┤г 0р┤г Рєњ f x РЅѕр┤« 0р┤«
  xРЅѕ­ЮЪўРєњfxРЅѕ­ЮЪў {x = x} xРЅѕ­ЮЪў = begin
    f x  РЅѕРЪе f-cong xРЅѕ­ЮЪў РЪЕ
    f 0р┤г РЅѕРЪе f­ЮЪўРЅѕ­ЮЪў {x = x} РЪЕ
    0р┤« Рѕј
           
  fxРЅЅ­ЮЪўРєњxРЅЅ­ЮЪў : {x : A} Рєњ f x РЅЅр┤« 0р┤« Рєњ x РЅЅр┤г 0р┤г
  fxРЅЅ­ЮЪўРєњxРЅЅ­ЮЪў = contraposition xРЅѕ­ЮЪўРєњfxРЅѕ­ЮЪў

  -- Zero is unique output of linear map РЅЅ `const ­ЮЪў`.
  zero-unique : {x : A} Рєњ ╬Б[ y Рѕѕ A ] f y РЅЅр┤« 0р┤« Рєњ x РЅЅр┤г ­ЮЪў Рєњ f x РЅЅр┤« ­ЮЪў
  zero-unique {x = x} (y , fyРЅЅ­ЮЪў) xРЅЅ­ЮЪў =
    let yРЅЅ­ЮЪў : y РЅЅр┤г 0р┤г
        yРЅЅ­ЮЪў = fxРЅЅ­ЮЪўРєњxРЅЅ­ЮЪў fyРЅЅ­ЮЪў
        ╬БsРєњs┬иxРЅѕy : ╬Б[ s Рѕѕ S ] s ┬ир┤г x РЅѕр┤г y
        -- ╬БsРєњs┬иxРЅѕy = cont x y
        ╬БsРєњs┬иxРЅѕy = ?
        ╬БsРєњfs┬иxРЅѕfy : ╬Б[ s Рѕѕ S ] f (s ┬ир┤г x) РЅѕр┤« f y
        ╬БsРєњfs┬иxРЅѕfy = let (s , g) = ╬БsРєњs┬иxРЅѕy
                       in (s , f-cong g)
        ╬БsРєњs┬иfxРЅѕfy : ╬Б[ s Рѕѕ S ] s ┬ир┤« f x РЅѕр┤« f y
        ╬БsРєњs┬иfxРЅѕfy = let (s , g) = ╬БsРєњfs┬иxРЅѕfy
                       in (s , (begin
                                 s ┬ир┤« f x
                               РЅѕРЪе sym scales РЪЕ
                                 f (s ┬ир┤г x)
                               РЅѕРЪе g РЪЕ
                                 f y
                               Рѕј))
        s┬иfxРЅЅ­ЮЪў : ╬Б[ s Рѕѕ S ] s ┬ир┤« f x РЅЅр┤« 0р┤«
        s┬иfxРЅЅ­ЮЪў = let (s , g) = ╬БsРєњs┬иfxРЅѕfy
                  in (s , ╬╗ s┬иfxРЅѕ­ЮЪў Рєњ fyРЅЅ­ЮЪў (step-РЅѕ (f y) s┬иfxРЅѕ­ЮЪў (sym g)))
     in non-zero╩│ (snd s┬иfxРЅЅ­ЮЪў)

