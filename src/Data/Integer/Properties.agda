------------------------------------------------------------------------
-- The Agda standard library
--
-- Some properties about integers
------------------------------------------------------------------------

module Data.Integer.Properties where

open import Algebra
import Algebra.Morphism as Morphism
import Algebra.Properties.AbelianGroup
open import Data.Integer renaming (suc to suc‚Ñ§)
open import Data.Nat
  using (‚Ñï; suc; zero; _‚à∏_; s‚â§s; z‚â§n; ‚â§-pred)
  hiding (module ‚Ñï)
  renaming (_+_ to _‚Ñï+_; _*_ to _‚Ñï*_;
    _<_ to _‚Ñï<_; _‚â•_ to _‚Ñï‚â•_; _‚â∞_ to _‚Ñï‚â∞_; _‚â§?_ to _‚Ñï‚â§?_)
import Data.Nat.Properties as ‚Ñï‚Çö
open import Data.Nat.Solver
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Sign as Sign using () renaming (_*_ to _ùïä*_)
import Data.Sign.Properties as ùïä‚Çö
open import Function using (_‚àò_; _$_)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
import Relation.Binary.PartialOrderReasoning as POR
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)

open import Algebra.FunctionProperties (_‚â°_ {A = ‚Ñ§})
open import Algebra.FunctionProperties.Consequences (setoid ‚Ñ§)
open import Algebra.Structures (_‚â°_ {A = ‚Ñ§})
open Morphism.Definitions ‚Ñ§ ‚Ñï _‚â°_
open ‚â°-Reasoning
open +-*-Solver

------------------------------------------------------------------------
-- Equality

+-injective : ‚àÄ {m n} ‚Üí + m ‚â° + n ‚Üí m ‚â° n
+-injective refl = refl

-[1+-injective : ‚àÄ {m n} ‚Üí -[1+ m ] ‚â° -[1+ n ] ‚Üí m ‚â° n
-[1+-injective refl = refl

‚â°-decSetoid : DecSetoid _ _
‚â°-decSetoid = decSetoid _‚âü_

------------------------------------------------------------------------
-- Properties of -_

neg-involutive : ‚àÄ n ‚Üí - - n ‚â° n
neg-involutive (+ zero)   = refl
neg-involutive (+ suc n)  = refl
neg-involutive (-[1+ n ]) = refl

neg-injective : ‚àÄ {m n} ‚Üí - m ‚â° - n ‚Üí m ‚â° n
neg-injective {m} {n} -m‚â°-n = begin
  m     ‚â°‚ü® sym (neg-involutive m) ‚ü©
  - - m ‚â°‚ü® cong -_ -m‚â°-n ‚ü©
  - - n ‚â°‚ü® neg-involutive n ‚ü©
  n ‚àé

------------------------------------------------------------------------
-- Properties of ‚à£_‚à£

‚à£n‚à£‚â°0‚áín‚â°0 : ‚àÄ {n} ‚Üí ‚à£ n ‚à£ ‚â° 0 ‚Üí n ‚â° + 0
‚à£n‚à£‚â°0‚áín‚â°0 {+ .zero}   refl = refl
‚à£n‚à£‚â°0‚áín‚â°0 { -[1+ n ]} ()

‚à£-n‚à£‚â°‚à£n‚à£ : ‚àÄ n ‚Üí ‚à£ - n ‚à£ ‚â° ‚à£ n ‚à£
‚à£-n‚à£‚â°‚à£n‚à£ (+ zero)   = refl
‚à£-n‚à£‚â°‚à£n‚à£ (+ suc n)  = refl
‚à£-n‚à£‚â°‚à£n‚à£ (-[1+ n ]) = refl

------------------------------------------------------------------------
-- Properties of sign and _‚óÉ_

+‚óÉn‚â°+n : ‚àÄ n ‚Üí Sign.+ ‚óÉ n ‚â° + n
+‚óÉn‚â°+n zero    = refl
+‚óÉn‚â°+n (suc _) = refl

-‚óÉn‚â°-n : ‚àÄ n ‚Üí Sign.- ‚óÉ n ‚â° - + n
-‚óÉn‚â°-n zero    = refl
-‚óÉn‚â°-n (suc _) = refl

sign-‚óÉ : ‚àÄ s n ‚Üí sign (s ‚óÉ suc n) ‚â° s
sign-‚óÉ Sign.- _ = refl
sign-‚óÉ Sign.+ _ = refl

abs-‚óÉ : ‚àÄ s n ‚Üí ‚à£ s ‚óÉ n ‚à£ ‚â° n
abs-‚óÉ _      zero    = refl
abs-‚óÉ Sign.- (suc n) = refl
abs-‚óÉ Sign.+ (suc n) = refl

sign‚Çô‚óÉ‚à£n‚à£‚â°n : ‚àÄ n ‚Üí sign n ‚óÉ ‚à£ n ‚à£ ‚â° n
sign‚Çô‚óÉ‚à£n‚à£‚â°n (+ n)      = +‚óÉn‚â°+n n
sign‚Çô‚óÉ‚à£n‚à£‚â°n (-[1+ n ]) = refl

sign-cong : ‚àÄ {s‚ÇÅ s‚ÇÇ n‚ÇÅ n‚ÇÇ} ‚Üí
            s‚ÇÅ ‚óÉ suc n‚ÇÅ ‚â° s‚ÇÇ ‚óÉ suc n‚ÇÇ ‚Üí s‚ÇÅ ‚â° s‚ÇÇ
sign-cong {s‚ÇÅ} {s‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} eq = begin
  s‚ÇÅ                  ‚â°‚ü® sym $ sign-‚óÉ s‚ÇÅ n‚ÇÅ ‚ü©
  sign (s‚ÇÅ ‚óÉ suc n‚ÇÅ)  ‚â°‚ü® cong sign eq ‚ü©
  sign (s‚ÇÇ ‚óÉ suc n‚ÇÇ)  ‚â°‚ü® sign-‚óÉ s‚ÇÇ n‚ÇÇ ‚ü©
  s‚ÇÇ                  ‚àé

abs-cong : ‚àÄ {s‚ÇÅ s‚ÇÇ n‚ÇÅ n‚ÇÇ} ‚Üí s‚ÇÅ ‚óÉ n‚ÇÅ ‚â° s‚ÇÇ ‚óÉ n‚ÇÇ ‚Üí n‚ÇÅ ‚â° n‚ÇÇ
abs-cong {s‚ÇÅ} {s‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} eq = begin
  n‚ÇÅ           ‚â°‚ü® sym $ abs-‚óÉ s‚ÇÅ n‚ÇÅ ‚ü©
  ‚à£ s‚ÇÅ ‚óÉ n‚ÇÅ ‚à£  ‚â°‚ü® cong ‚à£_‚à£ eq ‚ü©
  ‚à£ s‚ÇÇ ‚óÉ n‚ÇÇ ‚à£  ‚â°‚ü® abs-‚óÉ s‚ÇÇ n‚ÇÇ ‚ü©
  n‚ÇÇ           ‚àé

‚à£s‚óÉm‚à£*‚à£t‚óÉn‚à£‚â°m*n : ‚àÄ s t m n ‚Üí ‚à£ s ‚óÉ m ‚à£ ‚Ñï* ‚à£ t ‚óÉ n ‚à£ ‚â° m ‚Ñï* n
‚à£s‚óÉm‚à£*‚à£t‚óÉn‚à£‚â°m*n s t m n = cong‚ÇÇ _‚Ñï*_ (abs-‚óÉ s m) (abs-‚óÉ t n)

------------------------------------------------------------------------
-- Properties of _‚äñ_

n‚äñn‚â°0 : ‚àÄ n ‚Üí n ‚äñ n ‚â° + 0
n‚äñn‚â°0 zero    = refl
n‚äñn‚â°0 (suc n) = n‚äñn‚â°0 n

‚äñ-swap : ‚àÄ a b ‚Üí a ‚äñ b ‚â° - (b ‚äñ a)
‚äñ-swap zero    zero    = refl
‚äñ-swap (suc _) zero    = refl
‚äñ-swap zero    (suc _) = refl
‚äñ-swap (suc a) (suc b) = ‚äñ-swap a b

‚äñ-‚â• : ‚àÄ {m n} ‚Üí m ‚Ñï‚â• n ‚Üí m ‚äñ n ‚â° + (m ‚à∏ n)
‚äñ-‚â• z‚â§n       = refl
‚äñ-‚â• (s‚â§s n‚â§m) = ‚äñ-‚â• n‚â§m

‚äñ-< : ‚àÄ {m n} ‚Üí m ‚Ñï< n ‚Üí m ‚äñ n ‚â° - + (n ‚à∏ m)
‚äñ-< {zero}  (s‚â§s z‚â§n) = refl
‚äñ-< {suc m} (s‚â§s m<n) = ‚äñ-< m<n

‚äñ-‚â∞ : ‚àÄ {m n} ‚Üí n ‚Ñï‚â∞ m ‚Üí m ‚äñ n ‚â° - + (n ‚à∏ m)
‚äñ-‚â∞ = ‚äñ-< ‚àò ‚Ñï‚Çö.‚â∞‚áí>

‚à£‚äñ‚à£-< : ‚àÄ {m n} ‚Üí m ‚Ñï< n ‚Üí ‚à£ m ‚äñ n ‚à£ ‚â° n ‚à∏ m
‚à£‚äñ‚à£-< {zero}  (s‚â§s z‚â§n) = refl
‚à£‚äñ‚à£-< {suc n} (s‚â§s m<n) = ‚à£‚äñ‚à£-< m<n

‚à£‚äñ‚à£-‚â∞ : ‚àÄ {m n} ‚Üí n ‚Ñï‚â∞ m ‚Üí ‚à£ m ‚äñ n ‚à£ ‚â° n ‚à∏ m
‚à£‚äñ‚à£-‚â∞ = ‚à£‚äñ‚à£-< ‚àò ‚Ñï‚Çö.‚â∞‚áí>

sign-‚äñ-< : ‚àÄ {m n} ‚Üí m ‚Ñï< n ‚Üí sign (m ‚äñ n) ‚â° Sign.-
sign-‚äñ-< {zero}  (s‚â§s z‚â§n) = refl
sign-‚äñ-< {suc n} (s‚â§s m<n) = sign-‚äñ-< m<n

sign-‚äñ-‚â∞ : ‚àÄ {m n} ‚Üí n ‚Ñï‚â∞ m ‚Üí sign (m ‚äñ n) ‚â° Sign.-
sign-‚äñ-‚â∞ = sign-‚äñ-< ‚àò ‚Ñï‚Çö.‚â∞‚áí>

-[n‚äñm]‚â°-m+n : ‚àÄ m n ‚Üí - (m ‚äñ n) ‚â° (- (+ m)) + (+ n)
-[n‚äñm]‚â°-m+n zero    zero    = refl
-[n‚äñm]‚â°-m+n zero    (suc n) = refl
-[n‚äñm]‚â°-m+n (suc m) zero    = refl
-[n‚äñm]‚â°-m+n (suc m) (suc n) = sym (‚äñ-swap n m)

‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ : ‚àÄ x y ‚Üí ‚à£ x ‚äñ y ‚à£ ‚â° ‚à£ y ‚äñ x ‚à£
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ zero    zero    = refl
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ zero    (suc _) = refl
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ (suc _) zero    = refl
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ (suc x) (suc y) = ‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ x y

+-cancelÀ°-‚äñ : ‚àÄ a b c ‚Üí (a ‚Ñï+ b) ‚äñ (a ‚Ñï+ c) ‚â° b ‚äñ c
+-cancelÀ°-‚äñ zero    b c = refl
+-cancelÀ°-‚äñ (suc a) b c = +-cancelÀ°-‚äñ a b c

------------------------------------------------------------------------
-- Properties of _-_

neg-minus-pos : ‚àÄ x y ‚Üí -[1+ x ] - (+ y) ‚â° -[1+ (y ‚Ñï+ x) ]
neg-minus-pos x       zero    = refl
neg-minus-pos zero    (suc y) = cong (-[1+_] ‚àò suc) (sym (‚Ñï‚Çö.+-identity ≥ y))
neg-minus-pos (suc x) (suc y) = cong (-[1+_] ‚àò suc) (‚Ñï‚Çö.+-comm (suc x) y)

[+m]-[+n]‚â°m‚äñn : ‚àÄ x y ‚Üí (+ x) - (+ y) ‚â° x ‚äñ y
[+m]-[+n]‚â°m‚äñn zero    zero    = refl
[+m]-[+n]‚â°m‚äñn zero    (suc y) = refl
[+m]-[+n]‚â°m‚äñn (suc x) zero    = cong (+_ ‚àò suc) (‚Ñï‚Çö.+-identity ≥ x)
[+m]-[+n]‚â°m‚äñn (suc x) (suc y) = refl

‚à£m-n‚à£‚â°‚à£n-m‚à£ : (x y : ‚Ñ§) ‚Üí ‚à£ x - y ‚à£ ‚â° ‚à£ y - x ‚à£
‚à£m-n‚à£‚â°‚à£n-m‚à£ -[1+ x ] -[1+ y ] = ‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ y x
‚à£m-n‚à£‚â°‚à£n-m‚à£ -[1+ x ] (+ y)    = begin
  ‚à£ -[1+ x ] - (+ y) ‚à£   ‚â°‚ü® cong ‚à£_‚à£ (neg-minus-pos x y) ‚ü©
  suc (y ‚Ñï+ x)           ‚â°‚ü® sym (‚Ñï‚Çö.+-suc y x) ‚ü©
  y ‚Ñï+ suc x             ‚àé
‚à£m-n‚à£‚â°‚à£n-m‚à£ (+ x)    -[1+ y ] = begin
  x ‚Ñï+ suc y             ‚â°‚ü® ‚Ñï‚Çö.+-suc x y ‚ü©
  suc (x ‚Ñï+ y)           ‚â°‚ü® cong ‚à£_‚à£ (sym (neg-minus-pos y x)) ‚ü©
  ‚à£ -[1+ y ] + - (+ x) ‚à£ ‚àé
‚à£m-n‚à£‚â°‚à£n-m‚à£ (+ x)     (+ y) = begin
  ‚à£ (+ x) - (+ y) ‚à£ ‚â°‚ü® cong ‚à£_‚à£ ([+m]-[+n]‚â°m‚äñn x y) ‚ü©
  ‚à£ x ‚äñ y ‚à£         ‚â°‚ü® ‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ x y ‚ü©
  ‚à£ y ‚äñ x ‚à£         ‚â°‚ü® cong ‚à£_‚à£ (sym ([+m]-[+n]‚â°m‚äñn y x)) ‚ü©
  ‚à£ (+ y) - (+ x) ‚à£ ‚àé

------------------------------------------------------------------------
-- Properties of _+_

+-comm : Commutative _+_
+-comm -[1+ a ] -[1+ b ] = cong (-[1+_] ‚àò suc) (‚Ñï‚Çö.+-comm a b)
+-comm (+   a ) (+   b ) = cong +_ (‚Ñï‚Çö.+-comm a b)
+-comm -[1+ _ ] (+   _ ) = refl
+-comm (+   _ ) -[1+ _ ] = refl

+-identityÀ° : LeftIdentity (+ 0) _+_
+-identityÀ° -[1+ _ ] = refl
+-identityÀ° (+   _ ) = refl

+-identity ≥ : RightIdentity (+ 0) _+_
+-identity ≥ = comm+idÀ°‚áíid ≥ +-comm +-identityÀ°

+-identity : Identity (+ 0) _+_
+-identity = +-identityÀ° , +-identity ≥

distribÀ°-‚äñ-+-pos : ‚àÄ a b c ‚Üí b ‚äñ c + + a ‚â° b ‚Ñï+ a ‚äñ c
distribÀ°-‚äñ-+-pos _ zero    zero    = refl
distribÀ°-‚äñ-+-pos _ zero    (suc _) = refl
distribÀ°-‚äñ-+-pos _ (suc _) zero    = refl
distribÀ°-‚äñ-+-pos a (suc b) (suc c) = distribÀ°-‚äñ-+-pos a b c

distribÀ°-‚äñ-+-neg : ‚àÄ a b c ‚Üí b ‚äñ c + -[1+ a ] ‚â° b ‚äñ (suc c ‚Ñï+ a)
distribÀ°-‚äñ-+-neg _ zero    zero    = refl
distribÀ°-‚äñ-+-neg _ zero    (suc _) = refl
distribÀ°-‚äñ-+-neg _ (suc _) zero    = refl
distribÀ°-‚äñ-+-neg a (suc b) (suc c) = distribÀ°-‚äñ-+-neg a b c

distrib ≥-‚äñ-+-pos : ‚àÄ a b c ‚Üí + a + (b ‚äñ c) ‚â° a ‚Ñï+ b ‚äñ c
distrib ≥-‚äñ-+-pos a b c = begin
  + a + (b ‚äñ c) ‚â°‚ü® +-comm (+ a) (b ‚äñ c) ‚ü©
  (b ‚äñ c) + + a ‚â°‚ü® distribÀ°-‚äñ-+-pos a b c ‚ü©
  b ‚Ñï+ a ‚äñ c    ‚â°‚ü® cong (_‚äñ c) (‚Ñï‚Çö.+-comm b a) ‚ü©
  a ‚Ñï+ b ‚äñ c    ‚àé

distrib ≥-‚äñ-+-neg : ‚àÄ a b c ‚Üí -[1+ a ] + (b ‚äñ c) ‚â° b ‚äñ (suc a ‚Ñï+ c)
distrib ≥-‚äñ-+-neg a b c = begin
  -[1+ a ] + (b ‚äñ c) ‚â°‚ü® +-comm -[1+ a ] (b ‚äñ c) ‚ü©
  (b ‚äñ c) + -[1+ a ] ‚â°‚ü® distribÀ°-‚äñ-+-neg a b c ‚ü©
  b ‚äñ suc (c ‚Ñï+ a)   ‚â°‚ü® cong (Œª x ‚Üí b ‚äñ suc x) (‚Ñï‚Çö.+-comm c a) ‚ü©
  b ‚äñ suc (a ‚Ñï+ c)   ‚àé

+-assoc : Associative _+_
+-assoc (+ zero) y z rewrite +-identityÀ°      y  | +-identityÀ° (y + z) = refl
+-assoc x (+ zero) z rewrite +-identity ≥  x      | +-identityÀ°      z  = refl
+-assoc x y (+ zero) rewrite +-identity ≥ (x + y) | +-identity ≥  y      = refl
+-assoc -[1+ a ]  -[1+ b ]  (+ suc c) = sym (distrib ≥-‚äñ-+-neg a c b)
+-assoc -[1+ a ]  (+ suc b) (+ suc c) = distribÀ°-‚äñ-+-pos (suc c) b a
+-assoc (+ suc a) -[1+ b ]  -[1+ c ]  = distribÀ°-‚äñ-+-neg c a b
+-assoc (+ suc a) -[1+ b ] (+ suc c)
  rewrite distribÀ°-‚äñ-+-pos (suc c) a b
        | distrib ≥-‚äñ-+-pos (suc a) c b
        | sym (‚Ñï‚Çö.+-assoc a 1 c)
        | ‚Ñï‚Çö.+-comm a 1
        = refl
+-assoc (+ suc a) (+ suc b) -[1+ c ]
  rewrite distrib ≥-‚äñ-+-pos (suc a) b c
        | sym (‚Ñï‚Çö.+-assoc a 1 b)
        | ‚Ñï‚Çö.+-comm a 1
        = refl
+-assoc -[1+ a ] -[1+ b ] -[1+ c ]
  rewrite sym (‚Ñï‚Çö.+-assoc a 1 (b ‚Ñï+ c))
        | ‚Ñï‚Çö.+-comm a 1
        | ‚Ñï‚Çö.+-assoc a b c
        = refl
+-assoc -[1+ a ] (+ suc b) -[1+ c ]
  rewrite distrib ≥-‚äñ-+-neg a b c
        | distribÀ°-‚äñ-+-neg c b a
        = refl
+-assoc (+ suc a) (+ suc b) (+ suc c)
  rewrite ‚Ñï‚Çö.+-assoc (suc a) (suc b) (suc c)
        = refl

+-inverseÀ° : LeftInverse (+ 0) -_ _+_
+-inverseÀ° -[1+ n ]  = n‚äñn‚â°0 n
+-inverseÀ° (+ zero)  = refl
+-inverseÀ° (+ suc n) = n‚äñn‚â°0 n

+-inverse ≥ : RightInverse (+ 0) -_ _+_
+-inverse ≥ = comm+invÀ°‚áíinv ≥ +-comm +-inverseÀ°

+-inverse : Inverse (+ 0) -_ _+_
+-inverse = +-inverseÀ° , +-inverse ≥

+-isSemigroup : IsSemigroup _+_
+-isSemigroup = record
  { isEquivalence = isEquivalence
  ; assoc         = +-assoc
  ; ‚àô-cong        = cong‚ÇÇ _+_
  }

+-0-isMonoid : IsMonoid _+_ (+ 0)
+-0-isMonoid = record
  { isSemigroup = +-isSemigroup
  ; identity    = +-identity
  }

+-0-isCommutativeMonoid : IsCommutativeMonoid _+_ (+ 0)
+-0-isCommutativeMonoid = record
  { isSemigroup = +-isSemigroup
  ; identityÀ°   = +-identityÀ°
  ; comm        = +-comm
  }

+-0-commutativeMonoid : CommutativeMonoid _ _
+-0-commutativeMonoid = record
  { Carrier             = ‚Ñ§
  ; _‚âà_                 = _‚â°_
  ; _‚àô_                 = _+_
  ; Œµ                   = + 0
  ; isCommutativeMonoid = +-0-isCommutativeMonoid
  }

+-0-isGroup : IsGroup _+_ (+ 0) (-_)
+-0-isGroup = record
  { isMonoid = +-0-isMonoid
  ; inverse  = +-inverse
  ; ‚Åª¬π-cong  = cong (-_)
  }

+-isAbelianGroup : IsAbelianGroup _+_ (+ 0) (-_)
+-isAbelianGroup = record
  { isGroup = +-0-isGroup
  ; comm    = +-comm
  }

+-0-abelianGroup : AbelianGroup _ _
+-0-abelianGroup = record
  { Carrier = ‚Ñ§
  ; _‚âà_ = _‚â°_
  ; _‚àô_ = _+_
  ; Œµ = + 0
  ; _‚Åª¬π = -_
  ; isAbelianGroup = +-isAbelianGroup
  }

-- Other properties of _+_

n‚â¢1+n : ‚àÄ {n} ‚Üí n ‚â¢ suc‚Ñ§ n
n‚â¢1+n {+ _}           ()
n‚â¢1+n { -[1+ 0 ]}     ()
n‚â¢1+n { -[1+ suc n ]} ()

1-[1+n]‚â°-n : ‚àÄ n ‚Üí suc‚Ñ§ -[1+ n ] ‚â° - (+ n)
1-[1+n]‚â°-n zero    = refl
1-[1+n]‚â°-n (suc n) = refl

neg-distrib-+ : ‚àÄ m n ‚Üí - (m + n) ‚â° (- m) + (- n)
neg-distrib-+ (+ zero)  (+ zero)  = refl
neg-distrib-+ (+ zero)  (+ suc n) = refl
neg-distrib-+ (+ suc m) (+ zero)  = cong -[1+_] (‚Ñï‚Çö.+-identity ≥ m)
neg-distrib-+ (+ suc m) (+ suc n) = cong -[1+_] (‚Ñï‚Çö.+-suc m n)
neg-distrib-+ -[1+ m ]  -[1+ n ]  = cong (Œª v ‚Üí + suc v) (sym (‚Ñï‚Çö.+-suc m n))
neg-distrib-+ (+   m)   -[1+ n ]  = -[n‚äñm]‚â°-m+n m (suc n)
neg-distrib-+ -[1+ m ]  (+   n)   =
  trans (-[n‚äñm]‚â°-m+n n (suc m)) (+-comm (- + n) (+ suc m))

‚óÉ-distrib-+ : ‚àÄ s m n ‚Üí s ‚óÉ (m ‚Ñï+ n) ‚â° (s ‚óÉ m) + (s ‚óÉ n)
‚óÉ-distrib-+ Sign.- m n = begin
  Sign.- ‚óÉ (m ‚Ñï+ n)           ‚â°‚ü® -‚óÉn‚â°-n (m ‚Ñï+ n) ‚ü©
  - (+ (m ‚Ñï+ n))              ‚â°‚ü®‚ü©
  - ((+ m) + (+ n))           ‚â°‚ü® neg-distrib-+ (+ m) (+ n) ‚ü©
  (- (+ m)) + (- (+ n))       ‚â°‚ü® sym (cong‚ÇÇ _+_ (-‚óÉn‚â°-n m) (-‚óÉn‚â°-n n)) ‚ü©
  (Sign.- ‚óÉ m) + (Sign.- ‚óÉ n) ‚àé
‚óÉ-distrib-+ Sign.+ m n = begin
  Sign.+ ‚óÉ (m ‚Ñï+ n)           ‚â°‚ü® +‚óÉn‚â°+n (m ‚Ñï+ n) ‚ü©
  + (m ‚Ñï+ n)                  ‚â°‚ü®‚ü©
  (+ m) + (+ n)               ‚â°‚ü® sym (cong‚ÇÇ _+_ (+‚óÉn‚â°+n m) (+‚óÉn‚â°+n n)) ‚ü©
  (Sign.+ ‚óÉ m) + (Sign.+ ‚óÉ n) ‚àé

+-minus-telescope : ‚àÄ x y z ‚Üí (x - y) + (y - z) ‚â° x - z
+-minus-telescope x y z = begin
  (x - y) + (y - z)   ‚â°‚ü® +-assoc x (- y) (y - z) ‚ü©
  x + (- y + (y - z)) ‚â°‚ü® cong (Œª v ‚Üí x + v) (sym (+-assoc (- y) y _)) ‚ü©
  x + ((- y + y) - z) ‚â°‚ü® sym (+-assoc x (- y + y) (- z)) ‚ü©
  x + (- y + y) - z   ‚â°‚ü® cong (Œª a ‚Üí x + a - z) (+-inverseÀ° y) ‚ü©
  x + (+ 0) - z       ‚â°‚ü® cong (_- z) (+-identity ≥ x) ‚ü©
  x - z               ‚àé

------------------------------------------------------------------------
-- Properties of _*_

*-comm : Commutative _*_
*-comm -[1+ a ] -[1+ b ] rewrite ‚Ñï‚Çö.*-comm (suc a) (suc b) = refl
*-comm -[1+ a ] (+   b ) rewrite ‚Ñï‚Çö.*-comm (suc a) b       = refl
*-comm (+   a ) -[1+ b ] rewrite ‚Ñï‚Çö.*-comm a       (suc b) = refl
*-comm (+   a ) (+   b ) rewrite ‚Ñï‚Çö.*-comm a       b       = refl

*-identityÀ° : LeftIdentity (+ 1) _*_
*-identityÀ° (+ zero ) = refl
*-identityÀ° -[1+  n ] rewrite ‚Ñï‚Çö.+-identity ≥ n = refl
*-identityÀ° (+ suc n) rewrite ‚Ñï‚Çö.+-identity ≥ n = refl

*-identity ≥ : RightIdentity (+ 1) _*_
*-identity ≥ = comm+idÀ°‚áíid ≥ *-comm *-identityÀ°

*-identity : Identity (+ 1) _*_
*-identity = *-identityÀ° , *-identity ≥

*-zeroÀ° : LeftZero (+ 0) _*_
*-zeroÀ° n = refl

*-zero ≥ : RightZero (+ 0) _*_
*-zero ≥ = comm+zeÀ°‚áíze ≥ *-comm *-zeroÀ°

*-zero : Zero (+ 0) _*_
*-zero = *-zeroÀ° , *-zero ≥

private
  lemma : ‚àÄ a b c ‚Üí c ‚Ñï+ (b ‚Ñï+ a ‚Ñï* suc b) ‚Ñï* suc c
                  ‚â° c ‚Ñï+ b ‚Ñï* suc c ‚Ñï+ a ‚Ñï* suc (c ‚Ñï+ b ‚Ñï* suc c)
  lemma =
    solve 3 (Œª a b c ‚Üí c :+ (b :+ a :* (con 1 :+ b)) :* (con 1 :+ c)
                    := c :+ b :* (con 1 :+ c) :+
                       a :* (con 1 :+ (c :+ b :* (con 1 :+ c))))
            refl

*-assoc : Associative _*_
*-assoc (+ zero) _ _ = refl
*-assoc x (+ zero) z rewrite ‚Ñï‚Çö.*-zero ≥ ‚à£ x ‚à£ = refl
*-assoc x y (+ zero) rewrite
    ‚Ñï‚Çö.*-zero ≥ ‚à£ y ‚à£
  | ‚Ñï‚Çö.*-zero ≥ ‚à£ x ‚à£
  | ‚Ñï‚Çö.*-zero ≥ ‚à£ sign x ùïä* sign y ‚óÉ ‚à£ x ‚à£ ‚Ñï* ‚à£ y ‚à£ ‚à£
  = refl
*-assoc -[1+ a  ] -[1+ b  ] (+ suc c) = cong (+_ ‚àò suc) (lemma a b c)
*-assoc -[1+ a  ] (+ suc b) -[1+ c  ] = cong (+_ ‚àò suc) (lemma a b c)
*-assoc (+ suc a) (+ suc b) (+ suc c) = cong (+_ ‚àò suc) (lemma a b c)
*-assoc (+ suc a) -[1+ b  ] -[1+ c  ] = cong (+_ ‚àò suc) (lemma a b c)
*-assoc -[1+ a  ] -[1+ b  ] -[1+ c  ] = cong -[1+_]     (lemma a b c)
*-assoc -[1+ a  ] (+ suc b) (+ suc c) = cong -[1+_]     (lemma a b c)
*-assoc (+ suc a) -[1+ b  ] (+ suc c) = cong -[1+_]     (lemma a b c)
*-assoc (+ suc a) (+ suc b) -[1+ c  ] = cong -[1+_]     (lemma a b c)

private

  -- lemma used to prove distributivity.
  distrib-lemma :
    ‚àÄ a b c ‚Üí (c ‚äñ b) * -[1+ a ] ‚â° a ‚Ñï+ b ‚Ñï* suc a ‚äñ (a ‚Ñï+ c ‚Ñï* suc a)
  distrib-lemma a b c
    rewrite +-cancelÀ°-‚äñ a (b ‚Ñï* suc a) (c ‚Ñï* suc a)
          | ‚äñ-swap (b ‚Ñï* suc a) (c ‚Ñï* suc a)
    with b ‚Ñï‚â§? c
  ... | yes b‚â§c
    rewrite ‚äñ-‚â• b‚â§c
          | ‚äñ-‚â• (‚Ñï‚Çö.*-mono-‚â§ b‚â§c (‚Ñï‚Çö.‚â§-refl {x = suc a}))
          | -‚óÉn‚â°-n ((c ‚à∏ b) ‚Ñï* suc a)
          | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) c b
          = refl
  ... | no b‚â∞c
    rewrite sign-‚äñ-‚â∞ b‚â∞c
          | ‚à£‚äñ‚à£-‚â∞ b‚â∞c
          | +‚óÉn‚â°+n ((b ‚à∏ c) ‚Ñï* suc a)
          | ‚äñ-‚â∞ (b‚â∞c ‚àò ‚Ñï‚Çö.*-cancel ≥-‚â§ b c a)
          | neg-involutive (+ (b ‚Ñï* suc a ‚à∏ c ‚Ñï* suc a))
          | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) b c
          = refl

*-distrib ≥-+ : _*_ DistributesOver ≥ _+_
*-distrib ≥-+ (+ zero) y z
  rewrite ‚Ñï‚Çö.*-zero ≥ ‚à£ y ‚à£
        | ‚Ñï‚Çö.*-zero ≥ ‚à£ z ‚à£
        | ‚Ñï‚Çö.*-zero ≥ ‚à£ y + z ‚à£
        = refl
*-distrib ≥-+ x (+ zero) z
  rewrite +-identityÀ° z
        | +-identityÀ° (sign z ùïä* sign x ‚óÉ ‚à£ z ‚à£ ‚Ñï* ‚à£ x ‚à£)
        = refl
*-distrib ≥-+ x y (+ zero)
  rewrite +-identity ≥ y
        | +-identity ≥ (sign y ùïä* sign x ‚óÉ ‚à£ y ‚à£ ‚Ñï* ‚à£ x ‚à£)
        = refl
*-distrib ≥-+ -[1+ a ] -[1+ b ] -[1+ c ] = cong (+_) $
  solve 3 (Œª a b c ‚Üí (con 2 :+ b :+ c) :* (con 1 :+ a)
                  := (con 1 :+ b) :* (con 1 :+ a) :+
                     (con 1 :+ c) :* (con 1 :+ a))
          refl a b c
*-distrib ≥-+ (+ suc a) (+ suc b) (+ suc c) = cong (+_) $
  solve 3 (Œª a b c ‚Üí (con 1 :+ b :+ (con 1 :+ c)) :* (con 1 :+ a)
                  := (con 1 :+ b) :* (con 1 :+ a) :+
                     (con 1 :+ c) :* (con 1 :+ a))
        refl a b c
*-distrib ≥-+ -[1+ a ] (+ suc b) (+ suc c) = cong -[1+_] $
  solve 3 (Œª a b c ‚Üí a :+ (b :+ (con 1 :+ c)) :* (con 1 :+ a)
                   := (con 1 :+ b) :* (con 1 :+ a) :+
                      (a :+ c :* (con 1 :+ a)))
         refl a b c
*-distrib ≥-+ (+ suc a) -[1+ b ] -[1+ c ] = cong -[1+_] $
  solve 3 (Œª a b c ‚Üí a :+ (con 1 :+ a :+ (b :+ c) :* (con 1 :+ a))
                  := (con 1 :+ b) :* (con 1 :+ a) :+
                     (a :+ c :* (con 1 :+ a)))
         refl a b c
*-distrib ≥-+ -[1+ a ] -[1+ b ] (+ suc c) = distrib-lemma a b c
*-distrib ≥-+ -[1+ a ] (+ suc b) -[1+ c ] = distrib-lemma a c b
*-distrib ≥-+ (+ suc a) -[1+ b ] (+ suc c) with b ‚Ñï‚â§? c
... | yes b‚â§c
  rewrite +-cancelÀ°-‚äñ a (c ‚Ñï* suc a) (b ‚Ñï* suc a)
        | ‚äñ-‚â• b‚â§c
        | +-comm (- (+ (a ‚Ñï+ b ‚Ñï* suc a))) (+ (a ‚Ñï+ c ‚Ñï* suc a))
        | ‚äñ-‚â• (‚Ñï‚Çö.*-mono-‚â§ b‚â§c (‚Ñï‚Çö.‚â§-refl {x = suc a}))
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) c b
        | +‚óÉn‚â°+n (c ‚Ñï* suc a ‚à∏ b ‚Ñï* suc a)
        = refl
... | no b‚â∞c
  rewrite +-cancelÀ°-‚äñ a (c ‚Ñï* suc a) (b ‚Ñï* suc a)
        | sign-‚äñ-‚â∞ b‚â∞c
        | ‚à£‚äñ‚à£-‚â∞ b‚â∞c
        | -‚óÉn‚â°-n ((b ‚à∏ c) ‚Ñï* suc a)
        | ‚äñ-‚â∞ (b‚â∞c ‚àò ‚Ñï‚Çö.*-cancel ≥-‚â§ b c a)
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) b c
        = refl
*-distrib ≥-+ (+ suc c) (+ suc a) -[1+ b ] with b ‚Ñï‚â§? a
... | yes b‚â§a
  rewrite +-cancelÀ°-‚äñ c (a ‚Ñï* suc c) (b ‚Ñï* suc c)
        | ‚äñ-‚â• b‚â§a
        | ‚äñ-‚â• (‚Ñï‚Çö.*-mono-‚â§ b‚â§a (‚Ñï‚Çö.‚â§-refl {x = suc c}))
        | +‚óÉn‚â°+n ((a ‚à∏ b) ‚Ñï* suc c)
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc c) a b
        = refl
... | no b‚â∞a
  rewrite +-cancelÀ°-‚äñ c (a ‚Ñï* suc c) (b ‚Ñï* suc c)
        | sign-‚äñ-‚â∞ b‚â∞a
        | ‚à£‚äñ‚à£-‚â∞ b‚â∞a
        | ‚äñ-‚â∞ (b‚â∞a ‚àò ‚Ñï‚Çö.*-cancel ≥-‚â§ b a c)
        | -‚óÉn‚â°-n ((b ‚à∏ a) ‚Ñï* suc c)
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc c) b a
        = refl

*-isSemigroup : IsSemigroup _*_
*-isSemigroup = record
  { isEquivalence = isEquivalence
  ; assoc         = *-assoc
  ; ‚àô-cong        = cong‚ÇÇ _*_
  }

*-1-isMonoid : IsMonoid _*_ (+ 1)
*-1-isMonoid = record
  { isSemigroup = *-isSemigroup
  ; identity    = *-identity
  }

*-1-isCommutativeMonoid : IsCommutativeMonoid _*_ (+ 1)
*-1-isCommutativeMonoid = record
  { isSemigroup = *-isSemigroup
  ; identityÀ°   = *-identityÀ°
  ; comm        = *-comm
  }

*-1-commutativeMonoid : CommutativeMonoid _ _
*-1-commutativeMonoid = record
  { Carrier             = ‚Ñ§
  ; _‚âà_                 = _‚â°_
  ; _‚àô_                 = _*_
  ; Œµ                   = + 1
  ; isCommutativeMonoid = *-1-isCommutativeMonoid
  }

+-*-isCommutativeSemiring : IsCommutativeSemiring _+_ _*_ (+ 0) (+ 1)
+-*-isCommutativeSemiring = record
  { +-isCommutativeMonoid = +-0-isCommutativeMonoid
  ; *-isCommutativeMonoid = *-1-isCommutativeMonoid
  ; distrib ≥              = *-distrib ≥-+
  ; zeroÀ°                 = *-zeroÀ°
  }

+-*-isRing : IsRing _+_ _*_ -_ (+ 0) (+ 1)
+-*-isRing = record
  { +-isAbelianGroup = +-isAbelianGroup
  ; *-isMonoid       = *-1-isMonoid
  ; distrib          = IsCommutativeSemiring.distrib
                         +-*-isCommutativeSemiring
  }

+-*-isCommutativeRing : IsCommutativeRing _+_ _*_ -_ (+ 0) (+ 1)
+-*-isCommutativeRing = record
  { isRing = +-*-isRing
  ; *-comm = *-comm
  }

+-*-commutativeRing : CommutativeRing _ _
+-*-commutativeRing = record
  { Carrier           = ‚Ñ§
  ; _‚âà_               = _‚â°_
  ; _+_               = _+_
  ; _*_               = _*_
  ; -_                = -_
  ; 0#                = + 0
  ; 1#                = + 1
  ; isCommutativeRing = +-*-isCommutativeRing
  }

-- Other properties of _*_

abs-*-commute : Homomorphic‚ÇÇ ‚à£_‚à£ _*_ _‚Ñï*_
abs-*-commute i j = abs-‚óÉ _ _

pos-distrib-* : ‚àÄ x y ‚Üí (+ x) * (+ y) ‚â° + (x ‚Ñï* y)
pos-distrib-* zero    y       = refl
pos-distrib-* (suc x) zero    = pos-distrib-* x zero
pos-distrib-* (suc x) (suc y) = refl

‚óÉ-distrib-* :  ‚àÄ s t m n ‚Üí (s ùïä* t) ‚óÉ (m ‚Ñï* n) ‚â° (s ‚óÉ m) * (t ‚óÉ n)
‚óÉ-distrib-* s t zero    zero    = refl
‚óÉ-distrib-* s t zero    (suc n) = refl
‚óÉ-distrib-* s t (suc m) zero    =
  trans
    (cong‚ÇÇ _‚óÉ_ (ùïä‚Çö.*-comm s t) (‚Ñï‚Çö.*-comm m 0))
    (*-comm (t ‚óÉ zero) (s ‚óÉ suc m))
‚óÉ-distrib-* s t (suc m) (suc n) =
  sym (cong‚ÇÇ _‚óÉ_
    (cong‚ÇÇ _ùïä*_ (sign-‚óÉ s m) (sign-‚óÉ t n))
    (‚à£s‚óÉm‚à£*‚à£t‚óÉn‚à£‚â°m*n s t (suc m) (suc n)))

*-cancel ≥-‚â° : ‚àÄ i j k ‚Üí k ‚â¢ + 0 ‚Üí i * k ‚â° j * k ‚Üí i ‚â° j
*-cancel ≥-‚â° i j k            ‚â¢0 eq with signAbs k
*-cancel ≥-‚â° i j .(+ 0)       ‚â¢0 eq | s ‚óÇ zero  = contradiction refl ‚â¢0
*-cancel ≥-‚â° i j .(s ‚óÉ suc n) ‚â¢0 eq | s ‚óÇ suc n
  with ‚à£ s ‚óÉ suc n ‚à£ | abs-‚óÉ s (suc n) | sign (s ‚óÉ suc n) | sign-‚óÉ s n
...  | .(suc n)      | refl            | .s               | refl =
  ‚óÉ-cong (sign-i‚â°sign-j i j eq) $
         ‚Ñï‚Çö.*-cancel ≥-‚â° ‚à£ i ‚à£ ‚à£ j ‚à£ $ abs-cong eq
  where
  sign-i‚â°sign-j : ‚àÄ i j ‚Üí
                  (sign i ùïä* s) ‚óÉ (‚à£ i ‚à£ ‚Ñï* suc n) ‚â°
                  (sign j ùïä* s) ‚óÉ (‚à£ j ‚à£ ‚Ñï* suc n) ‚Üí
                  sign i ‚â° sign j
  sign-i‚â°sign-j i              j              eq with signAbs i | signAbs j
  sign-i‚â°sign-j .(+ 0)         .(+ 0)         eq | s‚ÇÅ ‚óÇ zero   | s‚ÇÇ ‚óÇ zero   = refl
  sign-i‚â°sign-j .(+ 0)         .(s‚ÇÇ ‚óÉ suc n‚ÇÇ) eq | s‚ÇÅ ‚óÇ zero   | s‚ÇÇ ‚óÇ suc n‚ÇÇ
    with ‚à£ s‚ÇÇ ‚óÉ suc n‚ÇÇ ‚à£ | abs-‚óÉ s‚ÇÇ (suc n‚ÇÇ)
  ... | .(suc n‚ÇÇ) | refl
    with abs-cong {s‚ÇÅ} {sign (s‚ÇÇ ‚óÉ suc n‚ÇÇ) ùïä* s} {0} {suc n‚ÇÇ ‚Ñï* suc n} eq
  ...   | ()
  sign-i‚â°sign-j .(s‚ÇÅ ‚óÉ suc n‚ÇÅ) .(+ 0)         eq | s‚ÇÅ ‚óÇ suc n‚ÇÅ | s‚ÇÇ ‚óÇ zero
    with ‚à£ s‚ÇÅ ‚óÉ suc n‚ÇÅ ‚à£ | abs-‚óÉ s‚ÇÅ (suc n‚ÇÅ)
  ... | .(suc n‚ÇÅ) | refl
    with abs-cong {sign (s‚ÇÅ ‚óÉ suc n‚ÇÅ) ùïä* s} {s‚ÇÅ} {suc n‚ÇÅ ‚Ñï* suc n} {0} eq
  ...   | ()
  sign-i‚â°sign-j .(s‚ÇÅ ‚óÉ suc n‚ÇÅ) .(s‚ÇÇ ‚óÉ suc n‚ÇÇ) eq | s‚ÇÅ ‚óÇ suc n‚ÇÅ | s‚ÇÇ ‚óÇ suc n‚ÇÇ
    with ‚à£ s‚ÇÅ ‚óÉ suc n‚ÇÅ ‚à£ | abs-‚óÉ s‚ÇÅ (suc n‚ÇÅ)
       | sign (s‚ÇÅ ‚óÉ suc n‚ÇÅ) | sign-‚óÉ s‚ÇÅ n‚ÇÅ
       | ‚à£ s‚ÇÇ ‚óÉ suc n‚ÇÇ ‚à£ | abs-‚óÉ s‚ÇÇ (suc n‚ÇÇ)
       | sign (s‚ÇÇ ‚óÉ suc n‚ÇÇ) | sign-‚óÉ s‚ÇÇ n‚ÇÇ
  ... | .(suc n‚ÇÅ) | refl | .s‚ÇÅ | refl | .(suc n‚ÇÇ) | refl | .s‚ÇÇ | refl =
    ùïä‚Çö.*-cancel ≥-‚â° s‚ÇÅ s‚ÇÇ (sign-cong eq)

*-cancel ≥-‚â§-pos : ‚àÄ m n o ‚Üí m * + suc o ‚â§ n * + suc o ‚Üí m ‚â§ n
*-cancel ≥-‚â§-pos (-[1+ m ]) (-[1+ n ]) o (-‚â§- n‚â§m) =
  -‚â§- (‚â§-pred (‚Ñï‚Çö.*-cancel ≥-‚â§ (suc n) (suc m) o (s‚â§s n‚â§m)))
*-cancel ≥-‚â§-pos -[1+ _ ]   (+ _)      _ _         = -‚â§+
*-cancel ≥-‚â§-pos (+ 0)      -[1+ _ ]   _ ()
*-cancel ≥-‚â§-pos (+ suc _)  -[1+ _ ]   _ ()
*-cancel ≥-‚â§-pos (+ 0)      (+ 0)      _ _         = +‚â§+ z‚â§n
*-cancel ≥-‚â§-pos (+ 0)      (+ suc _)  _ _         = +‚â§+ z‚â§n
*-cancel ≥-‚â§-pos (+ suc _)  (+ 0)      _ (+‚â§+ ())
*-cancel ≥-‚â§-pos (+ suc m)  (+ suc n)  o (+‚â§+ m‚â§n) =
  +‚â§+ (‚Ñï‚Çö.*-cancel ≥-‚â§ (suc m) (suc n) o m‚â§n)

*-mono ≥-‚â§-pos : ‚àÄ n ‚Üí (_* + suc n) Preserves _‚â§_ ‚ü∂ _‚â§_
*-mono ≥-‚â§-pos _ (-‚â§+             {n = 0})         = -‚â§+
*-mono ≥-‚â§-pos _ (-‚â§+             {n = suc _})     = -‚â§+
*-mono ≥-‚â§-pos x (-‚â§-                         n‚â§m) =
  -‚â§- (‚â§-pred (‚Ñï‚Çö.*-mono-‚â§ (s‚â§s n‚â§m) (‚Ñï‚Çö.‚â§-refl {x = suc x})))
*-mono ≥-‚â§-pos _ (+‚â§+ {m = 0}     {n = 0}     m‚â§n) = +‚â§+ m‚â§n
*-mono ≥-‚â§-pos _ (+‚â§+ {m = 0}     {n = suc _} m‚â§n) = +‚â§+ z‚â§n
*-mono ≥-‚â§-pos _ (+‚â§+ {m = suc _} {n = 0}     ())
*-mono ≥-‚â§-pos x (+‚â§+ {m = suc _} {n = suc _} m‚â§n) =
  +‚â§+ ((‚Ñï‚Çö.*-mono-‚â§ m‚â§n (‚Ñï‚Çö.‚â§-refl {x = suc x})))

-1*n‚â°-n : ‚àÄ n ‚Üí -[1+ 0 ] * n ‚â° - n
-1*n‚â°-n (+ zero)  = refl
-1*n‚â°-n (+ suc n) = cong -[1+_] (‚Ñï‚Çö.+-identity ≥ n)
-1*n‚â°-n -[1+ n ]  = cong (Œª v ‚Üí + suc v) (‚Ñï‚Çö.+-identity ≥ n)

------------------------------------------------------------------------
-- Properties _‚â§_

‚â§-reflexive : _‚â°_ ‚áí _‚â§_
‚â§-reflexive { -[1+ n ]} refl = -‚â§- ‚Ñï‚Çö.‚â§-refl
‚â§-reflexive {+ n}       refl = +‚â§+ ‚Ñï‚Çö.‚â§-refl

‚â§-refl : Reflexive _‚â§_
‚â§-refl = ‚â§-reflexive refl

‚â§-trans : Transitive _‚â§_
‚â§-trans -‚â§+       (+‚â§+ n‚â§m) = -‚â§+
‚â§-trans (-‚â§- n‚â§m) -‚â§+       = -‚â§+
‚â§-trans (-‚â§- n‚â§m) (-‚â§- k‚â§n) = -‚â§- (‚Ñï‚Çö.‚â§-trans k‚â§n n‚â§m)
‚â§-trans (+‚â§+ m‚â§n) (+‚â§+ n‚â§k) = +‚â§+ (‚Ñï‚Çö.‚â§-trans m‚â§n n‚â§k)

‚â§-antisym : Antisymmetric _‚â°_ _‚â§_
‚â§-antisym -‚â§+       ()
‚â§-antisym (-‚â§- n‚â§m) (-‚â§- m‚â§n) = cong -[1+_] $ ‚Ñï‚Çö.‚â§-antisym m‚â§n n‚â§m
‚â§-antisym (+‚â§+ m‚â§n) (+‚â§+ n‚â§m) = cong (+_)   $ ‚Ñï‚Çö.‚â§-antisym m‚â§n n‚â§m

‚â§-total : Total _‚â§_
‚â§-total (-[1+ m ]) (-[1+ n ]) with ‚Ñï‚Çö.‚â§-total m n
... | inj‚ÇÅ m‚â§n = inj‚ÇÇ (-‚â§- m‚â§n)
... | inj‚ÇÇ n‚â§m = inj‚ÇÅ (-‚â§- n‚â§m)
‚â§-total (-[1+ m ]) (+    n  ) = inj‚ÇÅ -‚â§+
‚â§-total (+    m  ) (-[1+ n ]) = inj‚ÇÇ -‚â§+
‚â§-total (+    m  ) (+    n  ) with ‚Ñï‚Çö.‚â§-total m n
... | inj‚ÇÅ m‚â§n = inj‚ÇÅ (+‚â§+ m‚â§n)
... | inj‚ÇÇ n‚â§m = inj‚ÇÇ (+‚â§+ n‚â§m)

‚â§-isPreorder : IsPreorder _‚â°_ _‚â§_
‚â§-isPreorder = record
  { isEquivalence = isEquivalence
  ; reflexive     = ‚â§-reflexive
  ; trans         = ‚â§-trans
  }

‚â§-isPartialOrder : IsPartialOrder _‚â°_ _‚â§_
‚â§-isPartialOrder = record
  { isPreorder = ‚â§-isPreorder
  ; antisym  = ‚â§-antisym
  }

‚â§-poset : Poset _ _ _
‚â§-poset = record
  { Carrier = ‚Ñ§
  ; _‚âà_ = _‚â°_
  ; _‚â§_ = _‚â§_
  ; isPartialOrder = ‚â§-isPartialOrder
  }

‚â§-isTotalOrder : IsTotalOrder _‚â°_ _‚â§_
‚â§-isTotalOrder = record
  { isPartialOrder = ‚â§-isPartialOrder
  ; total          = ‚â§-total
  }

‚â§-isDecTotalOrder : IsDecTotalOrder _‚â°_ _‚â§_
‚â§-isDecTotalOrder = record
  { isTotalOrder = ‚â§-isTotalOrder
  ; _‚âü_          = _‚âü_
  ; _‚â§?_         = _‚â§?_
  }

‚â§-decTotalOrder : DecTotalOrder _ _ _
‚â§-decTotalOrder = record
  { Carrier         = ‚Ñ§
  ; _‚âà_             = _‚â°_
  ; _‚â§_             = _‚â§_
  ; isDecTotalOrder = ‚â§-isDecTotalOrder
  }

‚â§-step : ‚àÄ {n m} ‚Üí n ‚â§ m ‚Üí n ‚â§ suc‚Ñ§ m
‚â§-step -‚â§+             = -‚â§+
‚â§-step (+‚â§+ m‚â§n)       = +‚â§+ (‚Ñï‚Çö.‚â§-step m‚â§n)
‚â§-step (-‚â§- z‚â§n)       = -‚â§+
‚â§-step (-‚â§- (s‚â§s n‚â§m)) = -‚â§- (‚Ñï‚Çö.‚â§-step n‚â§m)

n‚â§1+n : ‚àÄ n ‚Üí n ‚â§ (+ 1) + n
n‚â§1+n n = ‚â§-step ‚â§-refl

‚â§-irrelevance : Irrelevant _‚â§_
‚â§-irrelevance -‚â§+       -‚â§+         = refl
‚â§-irrelevance (-‚â§- n‚â§m‚ÇÅ) (-‚â§- n‚â§m‚ÇÇ) = cong -‚â§- (‚Ñï‚Çö.‚â§-irrelevance n‚â§m‚ÇÅ n‚â§m‚ÇÇ)
‚â§-irrelevance (+‚â§+ n‚â§m‚ÇÅ) (+‚â§+ n‚â§m‚ÇÇ) = cong +‚â§+ (‚Ñï‚Çö.‚â§-irrelevance n‚â§m‚ÇÅ n‚â§m‚ÇÇ)

------------------------------------------------------------------------
-- Properties _<_

-<+ : ‚àÄ {m n} ‚Üí -[1+ m ] < + n
-<+ {0}     = +‚â§+ z‚â§n
-<+ {suc _} = -‚â§+

<-irrefl : Irreflexive _‚â°_ _<_
<-irrefl { + n}          refl (+‚â§+ 1+n‚â§n) = ‚Ñï‚Çö.<-irrefl refl 1+n‚â§n
<-irrefl { -[1+ zero  ]} refl ()
<-irrefl { -[1+ suc n ]} refl (-‚â§- 1+n‚â§n) = ‚Ñï‚Çö.<-irrefl refl 1+n‚â§n

<-asym : Asymmetric _<_
<-asym {+ n}           {+ m}           (+‚â§+ n<m) (+‚â§+ m<n) =
  ‚Ñï‚Çö.<-asym n<m m<n
<-asym {+ n}           { -[1+ m ]}     ()        _
<-asym { -[1+ n ]}     {+_ n‚ÇÅ}         _         ()
<-asym { -[1+ 0 ]}     { -[1+_] _}     ()        _
<-asym { -[1+ _ ]}     { -[1+_] 0}     _         ()
<-asym { -[1+ suc n ]} { -[1+ suc m ]} (-‚â§- n<m) (-‚â§- m<n) =
  ‚Ñï‚Çö.<-asym n<m m<n

<-trans : Transitive _<_
<-trans { + m}          {_}             (+‚â§+ m<n) (+‚â§+ n<o) =
  +‚â§+ (‚Ñï‚Çö.<-trans m<n n<o)
<-trans { -[1+ 0     ]} {_}             (+‚â§+ m<n) (+‚â§+ n<o) = +‚â§+ z‚â§n
<-trans { -[1+ suc m ]} {+ n}           m<n       (+‚â§+ m‚â§n) = -‚â§+
<-trans { -[1+ suc m ]} { -[1+ 0 ]}     m<n       (+‚â§+ m‚â§n) = -‚â§+
<-trans { -[1+ suc m ]} { -[1+ suc n ]} (-‚â§- n‚â§m) -‚â§+       = -‚â§+
<-trans { -[1+ suc m ]} { -[1+ suc n ]} (-‚â§- n<m) (-‚â§- o‚â§n) =
  -‚â§- (‚Ñï‚Çö.‚â§-trans o‚â§n (‚Ñï‚Çö.<‚áí‚â§ n<m))

<-cmp : Trichotomous _‚â°_ _<_
<-cmp (+ m) (+ n) with ‚Ñï‚Çö.<-cmp m n
... | tri< m<n m‚â¢n m‚âØn =
  tri< (+‚â§+ m<n)         (m‚â¢n ‚àò +-injective) (m‚âØn ‚àò drop‚Äø+‚â§+)
... | tri‚âà m‚âÆn m‚â°n m‚âØn =
  tri‚âà (m‚âÆn ‚àò drop‚Äø+‚â§+) (cong (+_) m‚â°n)     (m‚âØn ‚àò drop‚Äø+‚â§+)
... | tri> m‚âÆn m‚â¢n m>n =
  tri> (m‚âÆn ‚àò drop‚Äø+‚â§+) (m‚â¢n ‚àò +-injective) (+‚â§+ m>n)
<-cmp (+_ m)       -[1+ 0 ]     = tri> (Œª())     (Œª()) (+‚â§+ z‚â§n)
<-cmp (+_ m)       -[1+ suc n ] = tri> (Œª())     (Œª()) -‚â§+
<-cmp -[1+ 0 ]     (+ n)        = tri< (+‚â§+ z‚â§n) (Œª()) (Œª())
<-cmp -[1+ suc m ] (+ n)        = tri< -‚â§+       (Œª()) (Œª())
<-cmp -[1+ 0 ]     -[1+ 0 ]     = tri‚âà (Œª())     refl  (Œª())
<-cmp -[1+ 0 ]     -[1+ suc n ] = tri> (Œª())     (Œª()) (-‚â§- z‚â§n)
<-cmp -[1+ suc m ] -[1+ 0 ]     = tri< (-‚â§- z‚â§n) (Œª()) (Œª())
<-cmp -[1+ suc m ] -[1+ suc n ] with ‚Ñï‚Çö.<-cmp (suc m) (suc n)
... | tri< m<n m‚â¢n m‚âØn =
  tri> (m‚âØn ‚àò s‚â§s ‚àò drop‚Äø-‚â§-) (m‚â¢n ‚àò -[1+-injective) (-‚â§- (‚â§-pred m<n))
... | tri‚âà m‚âÆn m‚â°n m‚âØn =
  tri‚âà (m‚âØn ‚àò s‚â§s ‚àò drop‚Äø-‚â§-) (cong -[1+_] m‚â°n) (m‚âÆn ‚àò s‚â§s ‚àò drop‚Äø-‚â§-)
... | tri> m‚âÆn m‚â¢n m>n =
  tri< (-‚â§- (‚â§-pred m>n)) (m‚â¢n ‚àò -[1+-injective) (m‚âÆn ‚àò s‚â§s ‚àò drop‚Äø-‚â§-)

<-isStrictTotalOrder : IsStrictTotalOrder _‚â°_ _<_
<-isStrictTotalOrder = record
  { isEquivalence = isEquivalence
  ; trans         = Œª {i} ‚Üí <-trans {i}
  ; compare       = <-cmp
  }

<-strictTotalOrder : StrictTotalOrder _ _ _
<-strictTotalOrder = record
  { Carrier            = ‚Ñ§
  ; _‚âà_                = _‚â°_
  ; _<_                = _<_
  ; isStrictTotalOrder = <-isStrictTotalOrder
  }

n‚âÆn : ‚àÄ {n} ‚Üí n ‚âÆ n
n‚âÆn {+ n}           (+‚â§+ n<n) =  contradiction n<n ‚Ñï‚Çö.1+n‚â∞n
n‚âÆn { -[1+ 0 ]}     ()
n‚âÆn { -[1+ suc n ]} (-‚â§- n<n) =  contradiction n<n ‚Ñï‚Çö.1+n‚â∞n

<‚áí‚â§ : ‚àÄ {m n} ‚Üí m < n ‚Üí m ‚â§ n
<‚áí‚â§ m<n =  ‚â§-trans (n‚â§1+n _) m<n

‚â∞‚Üí> : ‚àÄ {x y} ‚Üí x ‚â∞ y ‚Üí x > y
‚â∞‚Üí> {+ m}           {+ n}           m‚â∞n =  +‚â§+ (‚Ñï‚Çö.‚â∞‚áí> (m‚â∞n ‚àò +‚â§+))
‚â∞‚Üí> {+ m}           { -[1+ n ]}     _   =  -<+ {n} {m}
‚â∞‚Üí> { -[1+ m ]}     {+ _}           m‚â∞n =  contradiction -‚â§+ m‚â∞n
‚â∞‚Üí> { -[1+ 0 ]}     { -[1+ 0 ]}     m‚â∞n =  contradiction ‚â§-refl m‚â∞n
‚â∞‚Üí> { -[1+ suc _ ]} { -[1+ 0 ]}     m‚â∞n =  contradiction (-‚â§- z‚â§n) m‚â∞n
‚â∞‚Üí> { -[1+ m ]}     { -[1+ suc n ]} m‚â∞n with m ‚Ñï‚â§? n
... | yes m‚â§n  = -‚â§- m‚â§n
... | no  m‚â∞n' = contradiction (-‚â§- (‚Ñï‚Çö.‚â∞‚áí> m‚â∞n')) m‚â∞n

<-irrelevance : Irrelevant _<_
<-irrelevance = ‚â§-irrelevance

------------------------------------------------------------------------
-- Modules for reasoning about integer number relations

-- A module for reasoning about the _‚â§_ relation
module ‚â§-Reasoning = POR ‚â§-poset hiding (_‚âà‚ü®_‚ü©_)

------------------------------------------------------------------------
-- DEPRECATED NAMES
------------------------------------------------------------------------
-- Please use the new names as continuing support for the old names is
-- not guaranteed.

-- Version 0.15

inverseÀ° = +-inverseÀ°
{-# WARNING_ON_USAGE inverseÀ°
"Warning: inverseÀ° was deprecated in v0.15.
Please use +-inverseÀ° instead."
#-}
inverse ≥ = +-inverse ≥
{-# WARNING_ON_USAGE inverse ≥
"Warning: inverse ≥ was deprecated in v0.15.
Please use +-inverse ≥ instead."
#-}
distrib ≥ = *-distrib ≥-+
{-# WARNING_ON_USAGE distrib ≥
"Warning: distrib ≥ was deprecated in v0.15.
Please use *-distrib ≥-+ instead."
#-}
isCommutativeSemiring = +-*-isCommutativeSemiring
{-# WARNING_ON_USAGE isCommutativeSemiring
"Warning: isCommutativeSemiring was deprecated in v0.15.
Please use +-*-isCommutativeSemiring instead."
#-}
commutativeRing = +-*-commutativeRing
{-# WARNING_ON_USAGE commutativeRing
"Warning: commutativeRing was deprecated in v0.15.
Please use +-*-commutativeRing instead."
#-}
*-+-right-mono = *-mono ≥-‚â§-pos
{-# WARNING_ON_USAGE *-+-right-mono
"Warning: *-+-right-mono was deprecated in v0.15.
Please use *-mono ≥-‚â§-pos instead."
#-}
cancel-*-+-right-‚â§ = *-cancel ≥-‚â§-pos
{-# WARNING_ON_USAGE cancel-*-+-right-‚â§
"Warning: cancel-*-+-right-‚â§ was deprecated in v0.15.
Please use *-cancel ≥-‚â§-pos instead."
#-}
cancel-*-right = *-cancel ≥-‚â°
{-# WARNING_ON_USAGE cancel-*-right
"Warning: cancel-*-right was deprecated in v0.15.
Please use *-cancel ≥-‚â° instead."
#-}
doubleNeg = neg-involutive
{-# WARNING_ON_USAGE doubleNeg
"Warning: doubleNeg was deprecated in v0.15.
Please use neg-involutive instead."
#-}
-‚Äøinvolutive = neg-involutive
{-# WARNING_ON_USAGE -‚Äøinvolutive
"Warning: -‚Äøinvolutive was deprecated in v0.15.
Please use neg-involutive instead."
#-}
+-‚äñ-left-cancel = +-cancelÀ°-‚äñ
{-# WARNING_ON_USAGE +-‚äñ-left-cancel
"Warning: +-‚äñ-left-cancel was deprecated in v0.15.
Please use +-cancelÀ°-‚äñ instead."
#-}
