------------------------------------------------------------------------
-- The Agda standard library
--
-- Some properties about integers
------------------------------------------------------------------------

{-# OPTIONS --without-K --safe #-}

-- Disabled to prevent warnings from deprecated names
{-# OPTIONS --warn=noUserWarning #-}

module Data.Integer.Properties where

open import Algebra.Bundles
import Algebra.Morphism as Morphism
import Algebra.Properties.AbelianGroup
open import Data.Integer.Base renaming (suc to suc‚Ñ§)
open import Data.Nat as ‚Ñï
  using (‚Ñï; suc; zero; _‚à∏_; s‚â§s; z‚â§n)
  hiding (module ‚Ñï)
import Data.Nat.Properties as ‚Ñï‚Çö
open import Data.Nat.Solver
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_)
open import Data.Sum.Base as Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Sign as Sign using () renaming (_*_ to _ùïä*_)
import Data.Sign.Properties as ùïä‚Çö
open import Function using (_‚àò_; _$_)
open import Level using (0‚Ñì)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation using (contradiction)
import Relation.Nullary.Decidable as Dec

open import Algebra.Definitions {A = ‚Ñ§} _‚â°_
open import Algebra.FunctionProperties.Consequences.Propositional
open import Algebra.Structures {A = ‚Ñ§} _‚â°_
module ‚Ñ§to‚Ñï = Morphism.Definitions ‚Ñ§ ‚Ñï _‚â°_
module ‚Ñïto‚Ñ§ = Morphism.Definitions ‚Ñï ‚Ñ§ _‚â°_
open +-*-Solver

------------------------------------------------------------------------
-- Equality
------------------------------------------------------------------------

+-injective : ‚àÄ {m n} ‚Üí + m ‚â° + n ‚Üí m ‚â° n
+-injective refl = refl

-[1+-injective : ‚àÄ {m n} ‚Üí -[1+ m ] ‚â° -[1+ n ] ‚Üí m ‚â° n
-[1+-injective refl = refl

+[1+-injective : ‚àÄ {m n} ‚Üí +[1+ m ] ‚â° +[1+ n ] ‚Üí m ‚â° n
+[1+-injective refl = refl

infix 4 _‚âü_
_‚âü_ : Decidable {A = ‚Ñ§} _‚â°_
+ m      ‚âü + n      = Dec.map‚Ä≤ (cong (+_)) +-injective (m ‚Ñï.‚âü n)
+ m      ‚âü -[1+ n ] = no Œª()
-[1+ m ] ‚âü + n      = no Œª()
-[1+ m ] ‚âü -[1+ n ] = Dec.map‚Ä≤ (cong -[1+_]) -[1+-injective (m ‚Ñï.‚âü n)

‚â°-setoid : Setoid 0‚Ñì 0‚Ñì
‚â°-setoid = setoid ‚Ñ§

‚â°-decSetoid : DecSetoid 0‚Ñì 0‚Ñì
‚â°-decSetoid = decSetoid _‚âü_

------------------------------------------------------------------------
-- Properties of _‚â§_
------------------------------------------------------------------------

drop‚Äø+‚â§+ : ‚àÄ {m n} ‚Üí + m ‚â§ + n ‚Üí m ‚Ñï.‚â§ n
drop‚Äø+‚â§+ (+‚â§+ m‚â§n) = m‚â§n

drop‚Äø-‚â§- : ‚àÄ {m n} ‚Üí -[1+ m ] ‚â§ -[1+ n ] ‚Üí n ‚Ñï.‚â§ m
drop‚Äø-‚â§- (-‚â§- n‚â§m) = n‚â§m

------------------------------------------------------------------------
-- Relational properties

‚â§-reflexive : _‚â°_ ‚áí _‚â§_
‚â§-reflexive { -[1+ n ]} refl = -‚â§- ‚Ñï‚Çö.‚â§-refl
‚â§-reflexive {+ n}       refl = +‚â§+ ‚Ñï‚Çö.‚â§-refl

‚â§-refl : Reflexive _‚â§_
‚â§-refl = ‚â§-reflexive refl

‚â§-trans : Transitive _‚â§_
‚â§-trans -‚â§+       (+‚â§+ n‚â§m) = -‚â§+
‚â§-trans (-‚â§- n‚â§m) -‚â§+       = -‚â§+
‚â§-trans (-‚â§- n‚â§m) (-‚â§- k‚â§n) = -‚â§- (‚Ñï‚Çö.‚â§-trans k‚â§n n‚â§m)
‚â§-trans (+‚â§+ m‚â§n) (+‚â§+ n‚â§k) = +‚â§+ (‚Ñï‚Çö.‚â§-trans m‚â§n n‚â§k)

‚â§-antisym : Antisymmetric _‚â°_ _‚â§_
‚â§-antisym (-‚â§- n‚â§m) (-‚â§- m‚â§n) = cong -[1+_] $ ‚Ñï‚Çö.‚â§-antisym m‚â§n n‚â§m
‚â§-antisym (+‚â§+ m‚â§n) (+‚â§+ n‚â§m) = cong (+_)   $ ‚Ñï‚Çö.‚â§-antisym m‚â§n n‚â§m

‚â§-total : Total _‚â§_
‚â§-total (-[1+ m ]) (-[1+ n ]) = Sum.map -‚â§- -‚â§- (‚Ñï‚Çö.‚â§-total n m)
‚â§-total (-[1+ m ]) (+    n  ) = inj‚ÇÅ -‚â§+
‚â§-total (+    m  ) (-[1+ n ]) = inj‚ÇÇ -‚â§+
‚â§-total (+    m  ) (+    n  ) = Sum.map +‚â§+ +‚â§+ (‚Ñï‚Çö.‚â§-total m n)

infix  4 _‚â§?_
_‚â§?_ : Decidable _‚â§_
-[1+ m ] ‚â§? -[1+ n ] = Dec.map‚Ä≤ -‚â§- drop‚Äø-‚â§- (n ‚Ñï.‚â§? m)
-[1+ m ] ‚â§? +    n   = yes -‚â§+
+    m   ‚â§? -[1+ n ] = no Œª ()
+    m   ‚â§? +    n   = Dec.map‚Ä≤ +‚â§+ drop‚Äø+‚â§+ (m ‚Ñï.‚â§? n)

‚â§-irrelevant : Irrelevant _‚â§_
‚â§-irrelevant -‚â§+       -‚â§+         = refl
‚â§-irrelevant (-‚â§- n‚â§m‚ÇÅ) (-‚â§- n‚â§m‚ÇÇ) = cong -‚â§- (‚Ñï‚Çö.‚â§-irrelevant n‚â§m‚ÇÅ n‚â§m‚ÇÇ)
‚â§-irrelevant (+‚â§+ n‚â§m‚ÇÅ) (+‚â§+ n‚â§m‚ÇÇ) = cong +‚â§+ (‚Ñï‚Çö.‚â§-irrelevant n‚â§m‚ÇÅ n‚â§m‚ÇÇ)

------------------------------------------------------------------------
-- Structures

‚â§-isPreorder : IsPreorder _‚â°_ _‚â§_
‚â§-isPreorder = record
  { isEquivalence = isEquivalence
  ; reflexive     = ‚â§-reflexive
  ; trans         = ‚â§-trans
  }

‚â§-isPartialOrder : IsPartialOrder _‚â°_ _‚â§_
‚â§-isPartialOrder = record
  { isPreorder = ‚â§-isPreorder
  ; antisym    = ‚â§-antisym
  }

‚â§-isTotalOrder : IsTotalOrder _‚â°_ _‚â§_
‚â§-isTotalOrder = record
  { isPartialOrder = ‚â§-isPartialOrder
  ; total          = ‚â§-total
  }

‚â§-isDecTotalOrder : IsDecTotalOrder _‚â°_ _‚â§_
‚â§-isDecTotalOrder = record
  { isTotalOrder = ‚â§-isTotalOrder
  ; _‚âü_          = _‚âü_
  ; _‚â§?_         = _‚â§?_
  }

------------------------------------------------------------------------
-- Bundles

‚â§-preorder : Preorder 0‚Ñì 0‚Ñì 0‚Ñì
‚â§-preorder = record
  { isPreorder = ‚â§-isPreorder
  }

‚â§-poset : Poset 0‚Ñì 0‚Ñì 0‚Ñì
‚â§-poset = record
  { isPartialOrder = ‚â§-isPartialOrder
  }

‚â§-totalOrder : TotalOrder 0‚Ñì 0‚Ñì 0‚Ñì
‚â§-totalOrder = record
  { isTotalOrder = ‚â§-isTotalOrder
  }

‚â§-decTotalOrder : DecTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì
‚â§-decTotalOrder = record
  { isDecTotalOrder = ‚â§-isDecTotalOrder
  }

------------------------------------------------------------------------
-- Properties _<_
------------------------------------------------------------------------

drop‚Äø+<+ : ‚àÄ {m n} ‚Üí + m < + n ‚Üí m ‚Ñï.< n
drop‚Äø+<+ (+<+ m<n) = m<n

drop‚Äø-<- : ‚àÄ {m n} ‚Üí -[1+ m ] < -[1+ n ] ‚Üí n ‚Ñï.< m
drop‚Äø-<- (-<- n<m) = n<m

+‚âÆ0 : ‚àÄ {n} ‚Üí + n ‚âÆ +0
+‚âÆ0 (+<+ ())

+‚âÆ- : ‚àÄ {m n} ‚Üí + m ‚âÆ -[1+ n ]
+‚âÆ- ()

------------------------------------------------------------------------
-- Relationship between other operators

<‚áí‚â§ : ‚àÄ {i j} ‚Üí i < j ‚Üí i ‚â§ j
<‚áí‚â§ (-<- i<j) = -‚â§- (‚Ñï‚Çö.<‚áí‚â§ i<j)
<‚áí‚â§ -<+       = -‚â§+
<‚áí‚â§ (+<+ i<j) = +‚â§+ (‚Ñï‚Çö.<‚áí‚â§ i<j)

>‚áí‚â∞ : ‚àÄ {i j} ‚Üí i > j ‚Üí i ‚â∞ j
>‚áí‚â∞ (-<- n<m) = ‚Ñï‚Çö.<‚áí‚â± n<m ‚àò drop‚Äø-‚â§-
>‚áí‚â∞ (+<+ m<n) = ‚Ñï‚Çö.<‚áí‚â± m<n ‚àò drop‚Äø+‚â§+

‚â∞‚áí> : ‚àÄ {i j} ‚Üí i ‚â∞ j ‚Üí i > j
‚â∞‚áí> {+ n}       {+_ n‚ÇÅ}      i‚â∞j = +<+ (‚Ñï‚Çö.‚â∞‚áí> (i‚â∞j ‚àò +‚â§+))
‚â∞‚áí> {+ n}       { -[1+_] n‚ÇÅ} i‚â∞j = -<+
‚â∞‚áí> { -[1+_] n} {+_ n‚ÇÅ}      i‚â∞j = contradiction -‚â§+ i‚â∞j
‚â∞‚áí> { -[1+_] n} { -[1+_] n‚ÇÅ} i‚â∞j = -<- (‚Ñï‚Çö.‚â∞‚áí> (i‚â∞j ‚àò -‚â§-))

------------------------------------------------------------------------
-- Relational properties

<-irrefl : Irreflexive _‚â°_ _<_
<-irrefl { -[1+ n ]} refl = ‚Ñï‚Çö.<-irrefl refl ‚àò drop‚Äø-<-
<-irrefl { +0}       refl (+<+ ())
<-irrefl { +[1+ n ]} refl = ‚Ñï‚Çö.<-irrefl refl ‚àò drop‚Äø+<+

<-asym : Asymmetric _<_
<-asym (-<- n<m) = ‚Ñï‚Çö.<-asym n<m ‚àò drop‚Äø-<-
<-asym (+<+ m<n) = ‚Ñï‚Çö.<-asym m<n ‚àò drop‚Äø+<+

‚â§-<-trans : Trans _‚â§_ _<_ _<_
‚â§-<-trans (-‚â§- n‚â§m) (-<- o<n) = -<- (‚Ñï‚Çö.<-transÀ° o<n n‚â§m)
‚â§-<-trans (-‚â§- n‚â§m) -<+       = -<+
‚â§-<-trans -‚â§+       (+<+ m<o) = -<+
‚â§-<-trans (+‚â§+ m‚â§n) (+<+ n<o) = +<+ (‚Ñï‚Çö.<-trans ≥ m‚â§n n<o)

<-‚â§-trans : Trans _<_ _‚â§_ _<_
<-‚â§-trans (-<- n<m) (-‚â§- o‚â§n) = -<- (‚Ñï‚Çö.<-trans ≥ o‚â§n n<m)
<-‚â§-trans (-<- n<m) -‚â§+       = -<+
<-‚â§-trans -<+       (+‚â§+ m‚â§n) = -<+
<-‚â§-trans (+<+ m<n) (+‚â§+ n‚â§o) = +<+ (‚Ñï‚Çö.<-transÀ° m<n n‚â§o)

<-trans : Transitive _<_
<-trans m<n n<p = ‚â§-<-trans (<‚áí‚â§ m<n) n<p

<-cmp : Trichotomous _‚â°_ _<_
<-cmp +0       +0       = tri‚âà +‚âÆ0 refl +‚âÆ0
<-cmp +0       +[1+ n ] = tri< (+<+ (s‚â§s z‚â§n)) (Œª()) +‚âÆ0
<-cmp +[1+ n ] +0       = tri> +‚âÆ0 (Œª()) (+<+ (s‚â§s z‚â§n))
<-cmp (+ m)    -[1+ n ] = tri> +‚âÆ- (Œª()) -<+
<-cmp -[1+ m ] (+ n)    = tri< -<+ (Œª()) +‚âÆ-
<-cmp -[1+ m ] -[1+ n ] with ‚Ñï‚Çö.<-cmp m n
... | tri< m<n m‚â¢n n‚âØm = tri> (n‚âØm ‚àò drop‚Äø-<-) (m‚â¢n ‚àò -[1+-injective) (-<- m<n)
... | tri‚âà m‚âÆn m‚â°n n‚âØm = tri‚âà (n‚âØm ‚àò drop‚Äø-<-) (cong -[1+_] m‚â°n) (m‚âÆn ‚àò drop‚Äø-<-)
... | tri> m‚âÆn m‚â¢n n>m = tri< (-<- n>m) (m‚â¢n ‚àò -[1+-injective) (m‚âÆn ‚àò drop‚Äø-<-)
<-cmp +[1+ m ] +[1+ n ] with ‚Ñï‚Çö.<-cmp m n
... | tri< m<n m‚â¢n n‚âØm = tri< (+<+ (s‚â§s m<n))              (m‚â¢n ‚àò +[1+-injective) (n‚âØm ‚àò ‚Ñï‚Çö.‚â§-pred ‚àò drop‚Äø+<+)
... | tri‚âà m‚âÆn m‚â°n n‚âØm = tri‚âà (m‚âÆn ‚àò ‚Ñï‚Çö.‚â§-pred ‚àò drop‚Äø+<+) (cong (+_ ‚àò suc) m‚â°n)  (n‚âØm ‚àò ‚Ñï‚Çö.‚â§-pred ‚àò drop‚Äø+<+)
... | tri> m‚âÆn m‚â¢n n>m = tri> (m‚âÆn ‚àò ‚Ñï‚Çö.‚â§-pred ‚àò drop‚Äø+<+) (m‚â¢n ‚àò +[1+-injective) (+<+ (s‚â§s n>m))

infix 4 _<?_
_<?_ : Decidable _<_
-[1+ m ] <? -[1+ n ] = Dec.map‚Ä≤ -<- drop‚Äø-<- (n ‚Ñï.<? m)
-[1+ m ] <? + n      = yes -<+
+ m      <? -[1+ n ] = no Œª()
+ m      <? + n      = Dec.map‚Ä≤ +<+ drop‚Äø+<+ (m ‚Ñï.<? n)

<-irrelevant : Irrelevant _<_
<-irrelevant (-<- n<m‚ÇÅ) (-<- n<m‚ÇÇ) = cong -<- (‚Ñï‚Çö.<-irrelevant n<m‚ÇÅ n<m‚ÇÇ)
<-irrelevant -<+       -<+         = refl
<-irrelevant (+<+ m<n‚ÇÅ) (+<+ m<n‚ÇÇ) = cong +<+ (‚Ñï‚Çö.<-irrelevant m<n‚ÇÅ m<n‚ÇÇ)

------------------------------------------------------------------------
-- Structures

<-isStrictPartialOrder : IsStrictPartialOrder _‚â°_ _<_
<-isStrictPartialOrder = record
  { isEquivalence = isEquivalence
  ; irrefl        = <-irrefl
  ; trans         = <-trans
  ; <-resp-‚âà      = subst (_ <_) , subst (_< _)
  }

<-isStrictTotalOrder : IsStrictTotalOrder _‚â°_ _<_
<-isStrictTotalOrder = record
  { isEquivalence = isEquivalence
  ; trans         = <-trans
  ; compare       = <-cmp
  }

------------------------------------------------------------------------
-- Bundles

<-strictPartialOrder : StrictPartialOrder 0‚Ñì 0‚Ñì 0‚Ñì
<-strictPartialOrder = record
  { isStrictPartialOrder = <-isStrictPartialOrder
  }

<-strictTotalOrder : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì
<-strictTotalOrder = record
  { isStrictTotalOrder = <-isStrictTotalOrder
  }

------------------------------------------------------------------------
-- Other properties of _<_

n‚âÆn : ‚àÄ {n} ‚Üí n ‚âÆ n
n‚âÆn {n} = <-irrefl refl

>-irrefl : Irreflexive _‚â°_ _>_
>-irrefl = <-irrefl ‚àò sym

------------------------------------------------------------------------
-- A specialised module for reasoning about the _‚â§_ and _<_ relations
------------------------------------------------------------------------

module ‚â§-Reasoning where
  open import Relation.Binary.Reasoning.Base.Triple
    ‚â§-isPreorder
    <-trans
    (resp‚ÇÇ _<_)
    <‚áí‚â§
    <-‚â§-trans
    ‚â§-<-trans
    public
    hiding (step-‚âà; step-‚âàÀò)

------------------------------------------------------------------------
-- Properties of -_
------------------------------------------------------------------------

neg-involutive : ‚àÄ n ‚Üí - - n ‚â° n
neg-involutive -[1+ n ] = refl
neg-involutive +0       = refl
neg-involutive +[1+ n ] = refl

neg-injective : ‚àÄ {m n} ‚Üí - m ‚â° - n ‚Üí m ‚â° n
neg-injective {m} {n} -m‚â°-n = begin
  m     ‚â°‚ü® sym (neg-involutive m) ‚ü©
  - - m ‚â°‚ü® cong -_ -m‚â°-n ‚ü©
  - - n ‚â°‚ü® neg-involutive n ‚ü©
  n     ‚àé where open ‚â°-Reasoning

neg-‚â§-pos : ‚àÄ {m n} ‚Üí - (+ m) ‚â§ + n
neg-‚â§-pos {zero}  = +‚â§+ z‚â§n
neg-‚â§-pos {suc m} = -‚â§+

neg-mono-<-> : -_ Preserves _<_ ‚ü∂ _>_
neg-mono-<-> { -[1+ _ ]} { -[1+ _ ]} (-<- n<m) = +<+ (s‚â§s n<m)
neg-mono-<-> { -[1+ _ ]} { +0}       -<+       = +<+ (s‚â§s z‚â§n)
neg-mono-<-> { -[1+ _ ]} { +[1+ n ]} -<+       = -<+
neg-mono-<-> { +0}       { +[1+ n ]} (+<+ _)   = -<+
neg-mono-<-> { +[1+ m ]} { +[1+ n ]} (+<+ m<n) = -<- (‚Ñï‚Çö.‚â§-pred m<n)

------------------------------------------------------------------------
-- Properties of ‚à£_‚à£
------------------------------------------------------------------------

‚à£n‚à£‚â°0‚áín‚â°0 : ‚àÄ {n} ‚Üí ‚à£ n ‚à£ ‚â° 0 ‚Üí n ‚â° + 0
‚à£n‚à£‚â°0‚áín‚â°0 {+0} refl = refl

‚à£-n‚à£‚â°‚à£n‚à£ : ‚àÄ n ‚Üí ‚à£ - n ‚à£ ‚â° ‚à£ n ‚à£
‚à£-n‚à£‚â°‚à£n‚à£ -[1+ n ] = refl
‚à£-n‚à£‚â°‚à£n‚à£ +0       = refl
‚à£-n‚à£‚â°‚à£n‚à£ +[1+ n ] = refl

0‚â§n‚áí+‚à£n‚à£‚â°n : ‚àÄ {n} ‚Üí + 0 ‚â§ n ‚Üí + ‚à£ n ‚à£ ‚â° n
0‚â§n‚áí+‚à£n‚à£‚â°n (+‚â§+ 0‚â§n) = refl

+‚à£n‚à£‚â°n‚áí0‚â§n : ‚àÄ {n} ‚Üí + ‚à£ n ‚à£ ‚â° n ‚Üí + 0 ‚â§ n
+‚à£n‚à£‚â°n‚áí0‚â§n {+ n} _ = +‚â§+ z‚â§n

------------------------------------------------------------------------
-- Properties of sign and _‚óÉ_

‚óÉ-inverse : ‚àÄ i ‚Üí sign i ‚óÉ ‚à£ i ‚à£ ‚â° i
‚óÉ-inverse -[1+ n ] = refl
‚óÉ-inverse +0       = refl
‚óÉ-inverse +[1+ n ] = refl

‚óÉ-cong : ‚àÄ {i j} ‚Üí sign i ‚â° sign j ‚Üí ‚à£ i ‚à£ ‚â° ‚à£ j ‚à£ ‚Üí i ‚â° j
‚óÉ-cong {i} {j} sign-‚â° abs-‚â° = begin
  i               ‚â°‚ü® sym $ ‚óÉ-inverse i ‚ü©
  sign i ‚óÉ ‚à£ i ‚à£  ‚â°‚ü® cong‚ÇÇ _‚óÉ_ sign-‚â° abs-‚â° ‚ü©
  sign j ‚óÉ ‚à£ j ‚à£  ‚â°‚ü® ‚óÉ-inverse j ‚ü©
  j               ‚àé where open ‚â°-Reasoning

+‚óÉn‚â°+n : ‚àÄ n ‚Üí Sign.+ ‚óÉ n ‚â° + n
+‚óÉn‚â°+n zero    = refl
+‚óÉn‚â°+n (suc _) = refl

-‚óÉn‚â°-n : ‚àÄ n ‚Üí Sign.- ‚óÉ n ‚â° - + n
-‚óÉn‚â°-n zero    = refl
-‚óÉn‚â°-n (suc _) = refl

sign-‚óÉ : ‚àÄ s n ‚Üí sign (s ‚óÉ suc n) ‚â° s
sign-‚óÉ Sign.- _ = refl
sign-‚óÉ Sign.+ _ = refl

abs-‚óÉ : ‚àÄ s n ‚Üí ‚à£ s ‚óÉ n ‚à£ ‚â° n
abs-‚óÉ _      zero    = refl
abs-‚óÉ Sign.- (suc n) = refl
abs-‚óÉ Sign.+ (suc n) = refl

sign‚Çô‚óÉ‚à£n‚à£‚â°n : ‚àÄ n ‚Üí sign n ‚óÉ ‚à£ n ‚à£ ‚â° n
sign‚Çô‚óÉ‚à£n‚à£‚â°n (+ n)    = +‚óÉn‚â°+n n
sign‚Çô‚óÉ‚à£n‚à£‚â°n -[1+ n ] = refl

sign-cong : ‚àÄ {s‚ÇÅ s‚ÇÇ n‚ÇÅ n‚ÇÇ} ‚Üí
            s‚ÇÅ ‚óÉ suc n‚ÇÅ ‚â° s‚ÇÇ ‚óÉ suc n‚ÇÇ ‚Üí s‚ÇÅ ‚â° s‚ÇÇ
sign-cong {s‚ÇÅ} {s‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} eq = begin
  s‚ÇÅ                  ‚â°‚ü® sym $ sign-‚óÉ s‚ÇÅ n‚ÇÅ ‚ü©
  sign (s‚ÇÅ ‚óÉ suc n‚ÇÅ)  ‚â°‚ü® cong sign eq ‚ü©
  sign (s‚ÇÇ ‚óÉ suc n‚ÇÇ)  ‚â°‚ü® sign-‚óÉ s‚ÇÇ n‚ÇÇ ‚ü©
  s‚ÇÇ                  ‚àé where open ‚â°-Reasoning

abs-cong : ‚àÄ {s‚ÇÅ s‚ÇÇ n‚ÇÅ n‚ÇÇ} ‚Üí s‚ÇÅ ‚óÉ n‚ÇÅ ‚â° s‚ÇÇ ‚óÉ n‚ÇÇ ‚Üí n‚ÇÅ ‚â° n‚ÇÇ
abs-cong {s‚ÇÅ} {s‚ÇÇ} {n‚ÇÅ} {n‚ÇÇ} eq = begin
  n‚ÇÅ           ‚â°‚ü® sym $ abs-‚óÉ s‚ÇÅ n‚ÇÅ ‚ü©
  ‚à£ s‚ÇÅ ‚óÉ n‚ÇÅ ‚à£  ‚â°‚ü® cong ‚à£_‚à£ eq ‚ü©
  ‚à£ s‚ÇÇ ‚óÉ n‚ÇÇ ‚à£  ‚â°‚ü® abs-‚óÉ s‚ÇÇ n‚ÇÇ ‚ü©
  n‚ÇÇ           ‚àé where open ‚â°-Reasoning

‚à£s‚óÉm‚à£*‚à£t‚óÉn‚à£‚â°m*n : ‚àÄ s t m n ‚Üí ‚à£ s ‚óÉ m ‚à£ ‚Ñï.* ‚à£ t ‚óÉ n ‚à£ ‚â° m ‚Ñï.* n
‚à£s‚óÉm‚à£*‚à£t‚óÉn‚à£‚â°m*n s t m n = cong‚ÇÇ ‚Ñï._*_ (abs-‚óÉ s m) (abs-‚óÉ t n)

‚óÉ-‚â° : ‚àÄ {m n} ‚Üí sign m ‚â° sign n ‚Üí ‚à£ m ‚à£ ‚â° ‚à£ n ‚à£ ‚Üí m ‚â° n
‚óÉ-‚â° {+ m}       {+ n }      ‚â°-sign refl = refl
‚óÉ-‚â° { -[1+ m ]} { -[1+ n ]} ‚â°-sign refl = refl

+‚óÉ-mono-< : ‚àÄ {m n} ‚Üí m ‚Ñï.< n ‚Üí Sign.+ ‚óÉ m < Sign.+ ‚óÉ n
+‚óÉ-mono-< {zero}  {suc n} m<n = +<+ m<n
+‚óÉ-mono-< {suc m} {suc n} m<n = +<+ m<n

+‚óÉ-cancel-< : ‚àÄ {m n} ‚Üí Sign.+ ‚óÉ m < Sign.+ ‚óÉ n ‚Üí m ‚Ñï.< n
+‚óÉ-cancel-< {zero}  {zero}  (+<+ ())
+‚óÉ-cancel-< {suc m} {zero}  (+<+ ())
+‚óÉ-cancel-< {zero}  {suc n} (+<+ m<n) = m<n
+‚óÉ-cancel-< {suc m} {suc n} (+<+ m<n) = m<n

neg‚óÉ-cancel-< : ‚àÄ {m n} ‚Üí Sign.- ‚óÉ m < Sign.- ‚óÉ n ‚Üí n ‚Ñï.< m
neg‚óÉ-cancel-< {zero}  {suc n} ()
neg‚óÉ-cancel-< {zero}  {zero}  (+<+ ())
neg‚óÉ-cancel-< {suc m} {zero}  -<+       = s‚â§s z‚â§n
neg‚óÉ-cancel-< {suc m} {suc n} (-<- n<m) = s‚â§s n<m

-‚óÉ<+‚óÉ : ‚àÄ m n ‚Üí Sign.- ‚óÉ (suc m) < Sign.+ ‚óÉ n
-‚óÉ<+‚óÉ m zero    = -<+
-‚óÉ<+‚óÉ m (suc n) = -<+

+‚óÉ‚âÆ-‚óÉ : ‚àÄ {m n} ‚Üí Sign.+ ‚óÉ m ‚âÆ Sign.- ‚óÉ n
+‚óÉ‚âÆ-‚óÉ {zero}  {zero} (+<+ ())
+‚óÉ‚âÆ-‚óÉ {suc m} {zero} (+<+ ())

------------------------------------------------------------------------
-- Properties of _‚äñ_
------------------------------------------------------------------------

n‚äñn‚â°0 : ‚àÄ n ‚Üí n ‚äñ n ‚â° + 0
n‚äñn‚â°0 zero    = refl
n‚äñn‚â°0 (suc n) = n‚äñn‚â°0 n

‚äñ-swap : ‚àÄ a b ‚Üí a ‚äñ b ‚â° - (b ‚äñ a)
‚äñ-swap zero    zero    = refl
‚äñ-swap (suc _) zero    = refl
‚äñ-swap zero    (suc _) = refl
‚äñ-swap (suc a) (suc b) = ‚äñ-swap a b

‚äñ-‚â• : ‚àÄ {m n} ‚Üí m ‚Ñï.‚â• n ‚Üí m ‚äñ n ‚â° + (m ‚à∏ n)
‚äñ-‚â• z‚â§n         = refl
‚äñ-‚â• (‚Ñï.s‚â§s n‚â§m) = ‚äñ-‚â• n‚â§m

‚äñ-< : ‚àÄ {m n} ‚Üí m ‚Ñï.< n ‚Üí m ‚äñ n ‚â° - + (n ‚à∏ m)
‚äñ-< {zero}  (‚Ñï.s‚â§s z‚â§n) = refl
‚äñ-< {suc m} (‚Ñï.s‚â§s m<n) = ‚äñ-< m<n

‚äñ-‚â∞ : ‚àÄ {m n} ‚Üí n ‚Ñï.‚â∞ m ‚Üí m ‚äñ n ‚â° - + (n ‚à∏ m)
‚äñ-‚â∞ = ‚äñ-< ‚àò ‚Ñï‚Çö.‚â∞‚áí>

‚à£‚äñ‚à£-< : ‚àÄ {m n} ‚Üí m ‚Ñï.< n ‚Üí ‚à£ m ‚äñ n ‚à£ ‚â° n ‚à∏ m
‚à£‚äñ‚à£-< {zero}  (‚Ñï.s‚â§s z‚â§n) = refl
‚à£‚äñ‚à£-< {suc n} (‚Ñï.s‚â§s m<n) = ‚à£‚äñ‚à£-< m<n

‚à£‚äñ‚à£-‚â∞ : ‚àÄ {m n} ‚Üí n ‚Ñï.‚â∞ m ‚Üí ‚à£ m ‚äñ n ‚à£ ‚â° n ‚à∏ m
‚à£‚äñ‚à£-‚â∞ = ‚à£‚äñ‚à£-< ‚àò ‚Ñï‚Çö.‚â∞‚áí>

-[n‚äñm]‚â°-m+n : ‚àÄ m n ‚Üí - (m ‚äñ n) ‚â° (- (+ m)) + (+ n)
-[n‚äñm]‚â°-m+n zero    zero    = refl
-[n‚äñm]‚â°-m+n zero    (suc n) = refl
-[n‚äñm]‚â°-m+n (suc m) zero    = refl
-[n‚äñm]‚â°-m+n (suc m) (suc n) = sym (‚äñ-swap n m)

‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ : ‚àÄ x y ‚Üí ‚à£ x ‚äñ y ‚à£ ‚â° ‚à£ y ‚äñ x ‚à£
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ zero    zero    = refl
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ zero    (suc _) = refl
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ (suc _) zero    = refl
‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ (suc x) (suc y) = ‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ x y

+-cancelÀ°-‚äñ : ‚àÄ a b c ‚Üí (a ‚Ñï.+ b) ‚äñ (a ‚Ñï.+ c) ‚â° b ‚äñ c
+-cancelÀ°-‚äñ zero    b c = refl
+-cancelÀ°-‚äñ (suc a) b c = +-cancelÀ°-‚äñ a b c

m‚äñn‚â§m : ‚àÄ m n ‚Üí m ‚äñ n ‚â§ + m
m‚äñn‚â§m m       zero    = ‚â§-refl
m‚äñn‚â§m zero    (suc n) = -‚â§+
m‚äñn‚â§m (suc m) (suc n) = ‚â§-trans (m‚äñn‚â§m m n) (+‚â§+ (‚Ñï‚Çö.n‚â§1+n m))

m‚äñn<1+m : ‚àÄ m n ‚Üí m ‚äñ n < +[1+ m ]
m‚äñn<1+m m       zero    = +<+ ‚Ñï‚Çö.‚â§-refl
m‚äñn<1+m zero    (suc n) = -<+
m‚äñn<1+m (suc m) (suc n) = <-trans (m‚äñn<1+m m n) (+<+ ‚Ñï‚Çö.‚â§-refl)

m‚äñ1+n<m : ‚àÄ m n ‚Üí m ‚äñ suc n < + m
m‚äñ1+n<m zero    n = -<+
m‚äñ1+n<m (suc m) n = m‚äñn<1+m m n

-1+m<n‚äñm : ‚àÄ m n ‚Üí -[1+ m ] < n ‚äñ m
-1+m<n‚äñm zero    n       = -<+
-1+m<n‚äñm (suc m) zero    = -<- ‚Ñï‚Çö.‚â§-refl
-1+m<n‚äñm (suc m) (suc n) = <-trans (-<- ‚Ñï‚Çö.‚â§-refl) (-1+m<n‚äñm m n)

-[1+m]‚â§n‚äñm+1 : ‚àÄ m n ‚Üí -[1+ m ] ‚â§ n ‚äñ suc m
-[1+m]‚â§n‚äñm+1 m zero    = ‚â§-refl
-[1+m]‚â§n‚äñm+1 m (suc n) = <‚áí‚â§ (-1+m<n‚äñm m n)

-1+m‚â§n‚äñm : ‚àÄ m n ‚Üí -[1+ m ] ‚â§ n ‚äñ m
-1+m‚â§n‚äñm m n = <‚áí‚â§ (-1+m<n‚äñm m n)

0‚äñm‚â§+ : ‚àÄ m {n} ‚Üí 0 ‚äñ m ‚â§ + n
0‚äñm‚â§+ zero    = +‚â§+ z‚â§n
0‚äñm‚â§+ (suc m) = -‚â§+

sign-‚äñ-< : ‚àÄ {m n} ‚Üí m ‚Ñï.< n ‚Üí sign (m ‚äñ n) ‚â° Sign.-
sign-‚äñ-< {zero}  (‚Ñï.s‚â§s z‚â§n) = refl
sign-‚äñ-< {suc n} (‚Ñï.s‚â§s m<n) = sign-‚äñ-< m<n

sign-‚äñ-‚â∞ : ‚àÄ {m n} ‚Üí n ‚Ñï.‚â∞ m ‚Üí sign (m ‚äñ n) ‚â° Sign.-
sign-‚äñ-‚â∞ = sign-‚äñ-< ‚àò ‚Ñï‚Çö.‚â∞‚áí>

‚äñ-mono ≥-‚â•-‚â§ : ‚àÄ p ‚Üí (p ‚äñ_) Preserves ‚Ñï._‚â•_ ‚ü∂ _‚â§_
‚äñ-mono ≥-‚â•-‚â§ zero    (z‚â§n {n})     = 0‚äñm‚â§+ n
‚äñ-mono ≥-‚â•-‚â§ zero    (s‚â§s m‚â§n)     = -‚â§- m‚â§n
‚äñ-mono ≥-‚â•-‚â§ (suc p) (z‚â§n {zero})  = ‚â§-refl
‚äñ-mono ≥-‚â•-‚â§ (suc p) (z‚â§n {suc n}) = ‚â§-trans (‚äñ-mono ≥-‚â•-‚â§ p (z‚â§n {n})) (+‚â§+ (‚Ñï‚Çö.n‚â§1+n p))
‚äñ-mono ≥-‚â•-‚â§ (suc p) (s‚â§s m‚â§n)     = ‚äñ-mono ≥-‚â•-‚â§ p m‚â§n

‚äñ-monoÀ°-‚â§ : ‚àÄ p ‚Üí (_‚äñ p) Preserves ‚Ñï._‚â§_ ‚ü∂ _‚â§_
‚äñ-monoÀ°-‚â§ zero    m‚â§n             = +‚â§+ m‚â§n
‚äñ-monoÀ°-‚â§ (suc p) (z‚â§n {0})       = ‚â§-refl
‚äñ-monoÀ°-‚â§ (suc p) (z‚â§n {(suc m)}) = ‚â§-trans (‚äñ-mono ≥-‚â•-‚â§ 0 (‚Ñï‚Çö.n‚â§1+n p)) (‚äñ-monoÀ°-‚â§ p z‚â§n)
‚äñ-monoÀ°-‚â§ (suc p) (s‚â§s m‚â§n)       = ‚äñ-monoÀ°-‚â§ p m‚â§n

‚äñ-mono ≥->-< : ‚àÄ p ‚Üí (p ‚äñ_) Preserves ‚Ñï._>_ ‚ü∂ _<_
‚äñ-mono ≥->-< zero    {_}     (s‚â§s z‚â§n)       = -<+
‚äñ-mono ≥->-< zero    {_}     (s‚â§s (s‚â§s m‚â§n)) = -<- (s‚â§s m‚â§n)
‚äñ-mono ≥->-< (suc p) {suc m} (s‚â§s z‚â§n)       = m‚äñn<1+m p m
‚äñ-mono ≥->-< (suc p) {_}     (s‚â§s (s‚â§s m‚â§n)) = ‚äñ-mono ≥->-< p (s‚â§s m‚â§n)

‚äñ-monoÀ°-< : ‚àÄ p ‚Üí (_‚äñ p) Preserves ‚Ñï._<_ ‚ü∂ _<_
‚äñ-monoÀ°-< zero    m<n             = +<+ m<n
‚äñ-monoÀ°-< (suc p) (s‚â§s z‚â§n)       = -1+m<n‚äñm p _
‚äñ-monoÀ°-< (suc p) (s‚â§s (s‚â§s m<n)) = ‚äñ-monoÀ°-< p (s‚â§s m<n)

------------------------------------------------------------------------
-- Properties of _+_
------------------------------------------------------------------------

------------------------------------------------------------------------
-- Algebraic properties of _+_

+-comm : Commutative _+_
+-comm -[1+ a ] -[1+ b ] = cong (-[1+_] ‚àò suc) (‚Ñï‚Çö.+-comm a b)
+-comm (+   a ) (+   b ) = cong +_ (‚Ñï‚Çö.+-comm a b)
+-comm -[1+ _ ] (+   _ ) = refl
+-comm (+   _ ) -[1+ _ ] = refl

+-identityÀ° : LeftIdentity +0 _+_
+-identityÀ° -[1+ _ ] = refl
+-identityÀ° (+   _ ) = refl

+-identity ≥ : RightIdentity +0 _+_
+-identity ≥ = comm+idÀ°‚áíid ≥ +-comm +-identityÀ°

+-identity : Identity +0 _+_
+-identity = +-identityÀ° , +-identity ≥

distribÀ°-‚äñ-+-pos : ‚àÄ a b c ‚Üí b ‚äñ c + + a ‚â° b ‚Ñï.+ a ‚äñ c
distribÀ°-‚äñ-+-pos _ zero    zero    = refl
distribÀ°-‚äñ-+-pos _ zero    (suc _) = refl
distribÀ°-‚äñ-+-pos _ (suc _) zero    = refl
distribÀ°-‚äñ-+-pos a (suc b) (suc c) = distribÀ°-‚äñ-+-pos a b c

distribÀ°-‚äñ-+-neg : ‚àÄ a b c ‚Üí b ‚äñ c + -[1+ a ] ‚â° b ‚äñ (suc c ‚Ñï.+ a)
distribÀ°-‚äñ-+-neg _ zero    zero    = refl
distribÀ°-‚äñ-+-neg _ zero    (suc _) = refl
distribÀ°-‚äñ-+-neg _ (suc _) zero    = refl
distribÀ°-‚äñ-+-neg a (suc b) (suc c) = distribÀ°-‚äñ-+-neg a b c

distrib ≥-‚äñ-+-pos : ‚àÄ a b c ‚Üí + a + (b ‚äñ c) ‚â° a ‚Ñï.+ b ‚äñ c
distrib ≥-‚äñ-+-pos a b c = begin
  + a + (b ‚äñ c) ‚â°‚ü® +-comm (+ a) (b ‚äñ c) ‚ü©
  (b ‚äñ c) + + a ‚â°‚ü® distribÀ°-‚äñ-+-pos a b c ‚ü©
  b ‚Ñï.+ a ‚äñ c   ‚â°‚ü® cong (_‚äñ c) (‚Ñï‚Çö.+-comm b a) ‚ü©
  a ‚Ñï.+ b ‚äñ c   ‚àé where open ‚â°-Reasoning

distrib ≥-‚äñ-+-neg : ‚àÄ a b c ‚Üí -[1+ a ] + (b ‚äñ c) ‚â° b ‚äñ (suc a ‚Ñï.+ c)
distrib ≥-‚äñ-+-neg a b c = begin
  -[1+ a ] + (b ‚äñ c) ‚â°‚ü® +-comm -[1+ a ] (b ‚äñ c) ‚ü©
  (b ‚äñ c) + -[1+ a ] ‚â°‚ü® distribÀ°-‚äñ-+-neg a b c ‚ü©
  b ‚äñ suc (c ‚Ñï.+ a)  ‚â°‚ü® cong (Œª x ‚Üí b ‚äñ suc x) (‚Ñï‚Çö.+-comm c a) ‚ü©
  b ‚äñ suc (a ‚Ñï.+ c)  ‚àé where open ‚â°-Reasoning

+-assoc : Associative _+_
+-assoc +0 y z rewrite +-identityÀ°      y  | +-identityÀ° (y + z) = refl
+-assoc x +0 z rewrite +-identity ≥  x      | +-identityÀ°      z  = refl
+-assoc x y +0 rewrite +-identity ≥ (x + y) | +-identity ≥  y      = refl
+-assoc -[1+ a ] -[1+ b ] +[1+ c ] = sym (distrib ≥-‚äñ-+-neg a c b)
+-assoc -[1+ a ] +[1+ b ] +[1+ c ] = distribÀ°-‚äñ-+-pos (suc c) b a
+-assoc +[1+ a ] -[1+ b ] -[1+ c ] = distribÀ°-‚äñ-+-neg c a b
+-assoc +[1+ a ] -[1+ b ] +[1+ c ]
  rewrite distribÀ°-‚äñ-+-pos (suc c) a b
        | distrib ≥-‚äñ-+-pos (suc a) c b
        | sym (‚Ñï‚Çö.+-assoc a 1 c)
        | ‚Ñï‚Çö.+-comm a 1
        = refl
+-assoc +[1+ a ] +[1+ b ] -[1+ c ]
  rewrite distrib ≥-‚äñ-+-pos (suc a) b c
        | sym (‚Ñï‚Çö.+-assoc a 1 b)
        | ‚Ñï‚Çö.+-comm a 1
        = refl
+-assoc -[1+ a ] -[1+ b ] -[1+ c ]
  rewrite sym (‚Ñï‚Çö.+-assoc a 1 (b ‚Ñï.+ c))
        | ‚Ñï‚Çö.+-comm a 1
        | ‚Ñï‚Çö.+-assoc a b c
        = refl
+-assoc -[1+ a ] +[1+ b ] -[1+ c ]
  rewrite distrib ≥-‚äñ-+-neg a b c
        | distribÀ°-‚äñ-+-neg c b a
        = refl
+-assoc +[1+ a ] +[1+ b ] +[1+ c ]
  rewrite ‚Ñï‚Çö.+-assoc (suc a) (suc b) (suc c)
        = refl

+-inverseÀ° : LeftInverse +0 -_ _+_
+-inverseÀ° -[1+ n ] = n‚äñn‚â°0 n
+-inverseÀ° +0       = refl
+-inverseÀ° +[1+ n ] = n‚äñn‚â°0 n

+-inverse ≥ : RightInverse +0 -_ _+_
+-inverse ≥ = comm+invÀ°‚áíinv ≥ +-comm +-inverseÀ°

+-inverse : Inverse +0 -_ _+_
+-inverse = +-inverseÀ° , +-inverse ≥

------------------------------------------------------------------------
-- Structures

+-isMagma : IsMagma _+_
+-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _+_
  }

+-isSemigroup : IsSemigroup _+_
+-isSemigroup = record
  { isMagma = +-isMagma
  ; assoc   = +-assoc
  }

+-isCommutativeSemigroup : IsCommutativeSemigroup _+_
+-isCommutativeSemigroup = record
  { isSemigroup = +-isSemigroup
  ; comm        = +-comm
  }

+-0-isMonoid : IsMonoid _+_ +0
+-0-isMonoid = record
  { isSemigroup = +-isSemigroup
  ; identity    = +-identity
  }

+-0-isCommutativeMonoid : IsCommutativeMonoid _+_ +0
+-0-isCommutativeMonoid = record
  { isMonoid = +-0-isMonoid
  ; comm     = +-comm
  }

+-0-isGroup : IsGroup _+_ +0 (-_)
+-0-isGroup = record
  { isMonoid = +-0-isMonoid
  ; inverse  = +-inverse
  ; ‚Åª¬π-cong  = cong (-_)
  }

+-isAbelianGroup : IsAbelianGroup _+_ +0 (-_)
+-isAbelianGroup = record
  { isGroup = +-0-isGroup
  ; comm    = +-comm
  }

------------------------------------------------------------------------
-- Bundles

+-magma : Magma 0‚Ñì 0‚Ñì
+-magma = record
  { isMagma = +-isMagma
  }

+-semigroup : Semigroup 0‚Ñì 0‚Ñì
+-semigroup = record
  { isSemigroup = +-isSemigroup
  }

+-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
+-commutativeSemigroup = record
  { isCommutativeSemigroup = +-isCommutativeSemigroup
  }

+-0-monoid : Monoid 0‚Ñì 0‚Ñì
+-0-monoid = record
  { isMonoid = +-0-isMonoid
  }

+-0-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
+-0-commutativeMonoid = record
  { isCommutativeMonoid = +-0-isCommutativeMonoid
  }

+-0-abelianGroup : AbelianGroup 0‚Ñì 0‚Ñì
+-0-abelianGroup = record
  { isAbelianGroup = +-isAbelianGroup
  }

------------------------------------------------------------------------
-- Properties of _+_ and +_/-_.

pos-+-commute : ‚Ñïto‚Ñ§.Homomorphic‚ÇÇ +_ ‚Ñï._+_ _+_
pos-+-commute zero    n = refl
pos-+-commute (suc m) n = cong suc‚Ñ§ (pos-+-commute m n)

neg-distrib-+ : ‚àÄ m n ‚Üí - (m + n) ‚â° (- m) + (- n)
neg-distrib-+ +0        +0        = refl
neg-distrib-+ +0        +[1+ n ]  = refl
neg-distrib-+ +[1+ m ]  +0        = cong -[1+_] (‚Ñï‚Çö.+-identity ≥ m)
neg-distrib-+ +[1+ m ]  +[1+ n ]  = cong -[1+_] (‚Ñï‚Çö.+-suc m n)
neg-distrib-+ -[1+ m ]  -[1+ n ]  = cong (Œª v ‚Üí + suc v) (sym (‚Ñï‚Çö.+-suc m n))
neg-distrib-+ (+   m)   -[1+ n ]  = -[n‚äñm]‚â°-m+n m (suc n)
neg-distrib-+ -[1+ m ]  (+   n)   =
  trans (-[n‚äñm]‚â°-m+n n (suc m)) (+-comm (- + n) (+ suc m))

‚óÉ-distrib-+ : ‚àÄ s m n ‚Üí s ‚óÉ (m ‚Ñï.+ n) ‚â° (s ‚óÉ m) + (s ‚óÉ n)
‚óÉ-distrib-+ Sign.- m n = begin
  Sign.- ‚óÉ (m ‚Ñï.+ n)          ‚â°‚ü® -‚óÉn‚â°-n (m ‚Ñï.+ n) ‚ü©
  - (+ (m ‚Ñï.+ n))             ‚â°‚ü®‚ü©
  - ((+ m) + (+ n))           ‚â°‚ü® neg-distrib-+ (+ m) (+ n) ‚ü©
  (- (+ m)) + (- (+ n))       ‚â°‚ü® sym (cong‚ÇÇ _+_ (-‚óÉn‚â°-n m) (-‚óÉn‚â°-n n)) ‚ü©
  (Sign.- ‚óÉ m) + (Sign.- ‚óÉ n) ‚àé where open ‚â°-Reasoning
‚óÉ-distrib-+ Sign.+ m n = begin
  Sign.+ ‚óÉ (m ‚Ñï.+ n)          ‚â°‚ü® +‚óÉn‚â°+n (m ‚Ñï.+ n) ‚ü©
  + (m ‚Ñï.+ n)                 ‚â°‚ü®‚ü©
  (+ m) + (+ n)               ‚â°‚ü® sym (cong‚ÇÇ _+_ (+‚óÉn‚â°+n m) (+‚óÉn‚â°+n n)) ‚ü©
  (Sign.+ ‚óÉ m) + (Sign.+ ‚óÉ n) ‚àé where open ‚â°-Reasoning

------------------------------------------------------------------------
-- Properties of _+_ and _‚â§_

+-pos-mono ≥-‚â§ : ‚àÄ n ‚Üí (_+_ (+ n)) Preserves _‚â§_ ‚ü∂ _‚â§_
+-pos-mono ≥-‚â§ n {_}         (-‚â§- o‚â§m) = ‚äñ-mono ≥-‚â•-‚â§ n (s‚â§s o‚â§m)
+-pos-mono ≥-‚â§ n { -[1+ m ]} -‚â§+       = ‚â§-trans (m‚äñn‚â§m n (suc m)) (+‚â§+ (‚Ñï‚Çö.m‚â§m+n n _))
+-pos-mono ≥-‚â§ n {_}         (+‚â§+ m‚â§o) = +‚â§+ (‚Ñï‚Çö.+-mono ≥-‚â§ n m‚â§o)

+-neg-mono ≥-‚â§ : ‚àÄ n ‚Üí (_+_ (-[1+ n ])) Preserves _‚â§_ ‚ü∂ _‚â§_
+-neg-mono ≥-‚â§ n {_} {_}   (-‚â§- n‚â§m) = -‚â§- (‚Ñï‚Çö.+-mono ≥-‚â§ (suc n) n‚â§m)
+-neg-mono ≥-‚â§ n {_} {+ m} -‚â§+       = ‚â§-trans (-‚â§- (‚Ñï‚Çö.m‚â§m+n (suc n) _)) (-1+m‚â§n‚äñm (suc n) m)
+-neg-mono ≥-‚â§ n {_} {_}   (+‚â§+ m‚â§n) = ‚äñ-monoÀ°-‚â§ (suc n) m‚â§n

+-mono ≥-‚â§ : ‚àÄ n ‚Üí (_+_ n) Preserves _‚â§_ ‚ü∂ _‚â§_
+-mono ≥-‚â§ (+ n)    = +-pos-mono ≥-‚â§ n
+-mono ≥-‚â§ -[1+ n ] = +-neg-mono ≥-‚â§ n

+-monoÀ°-‚â§ : ‚àÄ n ‚Üí (_+ n) Preserves _‚â§_ ‚ü∂ _‚â§_
+-monoÀ°-‚â§ n {i} {j} i‚â§j
  rewrite +-comm i n
        | +-comm j n
        = +-mono ≥-‚â§ n i‚â§j

+-mono-‚â§ : _+_ Preserves‚ÇÇ _‚â§_ ‚ü∂ _‚â§_ ‚ü∂ _‚â§_
+-mono-‚â§ {m} {n} {i} {j} m‚â§n i‚â§j = begin
  m + i ‚â§‚ü® +-monoÀ°-‚â§ i m‚â§n ‚ü©
  n + i ‚â§‚ü® +-mono ≥-‚â§ n i‚â§j ‚ü©
  n + j ‚àé
  where open ‚â§-Reasoning

‚â§-steps : ‚àÄ {m n} p ‚Üí m ‚â§ n ‚Üí m ‚â§ + p + n
‚â§-steps p m‚â§n = subst (_‚â§ _) (+-identityÀ° _) (+-mono-‚â§ (+‚â§+ z‚â§n) m‚â§n)

m‚â§m+n : ‚àÄ {m} n ‚Üí m ‚â§ m + + n
m‚â§m+n {m} n = begin
  m       ‚â°‚ü® sym (+-identity ≥ m) ‚ü©
  m + + 0 ‚â§‚ü® +-mono ≥-‚â§ m (+‚â§+ z‚â§n) ‚ü©
  m + + n ‚àé
  where open ‚â§-Reasoning

n‚â§m+n : ‚àÄ m {n} ‚Üí n ‚â§ + m + n
n‚â§m+n m {n} rewrite +-comm (+ m) n = m‚â§m+n m

------------------------------------------------------------------------
-- Properties of _+_ and _<_

+-mono ≥-< : ‚àÄ n ‚Üí (_+_ n) Preserves _<_ ‚ü∂ _<_
+-mono ≥-< (+ n)    {_} {_}   (-<- o<m) = ‚äñ-mono ≥->-< n (s‚â§s o<m)
+-mono ≥-< (+ n)    {_} {_}   -<+       = <-‚â§-trans (m‚äñ1+n<m n _) (+‚â§+ (‚Ñï‚Çö.m‚â§m+n n _))
+-mono ≥-< (+ n)    {_} {_}   (+<+ m<o) = +<+ (‚Ñï‚Çö.+-mono ≥-< n m<o)
+-mono ≥-< -[1+ n ] {_} {_}   (-<- o<m) = -<- (‚Ñï‚Çö.+-mono ≥-< (suc n) o<m)
+-mono ≥-< -[1+ n ] {_} {+ o} -<+       = <-‚â§-trans (-<- (‚Ñï‚Çö.m‚â§m+n (suc n) _)) (-[1+m]‚â§n‚äñm+1 n o)
+-mono ≥-< -[1+ n ] {_} {_}   (+<+ m<o) = ‚äñ-monoÀ°-< (suc n) m<o

+-monoÀ°-< : ‚àÄ n ‚Üí (_+ n) Preserves _<_ ‚ü∂ _<_
+-monoÀ°-< n {i} {j} i<j
  rewrite +-comm i n
        | +-comm j n
        = +-mono ≥-< n i<j

+-mono-< : _+_ Preserves‚ÇÇ _<_ ‚ü∂ _<_ ‚ü∂ _<_
+-mono-< {m} {n} {i} {j} m<n i<j = begin-strict
  m + i <‚ü® +-monoÀ°-< i m<n ‚ü©
  n + i <‚ü® +-mono ≥-< n i<j ‚ü©
  n + j ‚àé
  where open ‚â§-Reasoning

+-mono-‚â§-< : _+_ Preserves‚ÇÇ _‚â§_ ‚ü∂ _<_ ‚ü∂ _<_
+-mono-‚â§-< {m} {n} {i} m‚â§n i<j = ‚â§-<-trans (+-monoÀ°-‚â§ i m‚â§n) (+-mono ≥-< n i<j)

+-mono-<-‚â§ : _+_ Preserves‚ÇÇ _<_ ‚ü∂ _‚â§_ ‚ü∂ _<_
+-mono-<-‚â§ {m} {n} {i} m<n i‚â§j = <-‚â§-trans (+-monoÀ°-< i m<n) (+-mono ≥-‚â§ n i‚â§j)

------------------------------------------------------------------------
-- Properties of _-_
------------------------------------------------------------------------

neg-minus-pos : ‚àÄ x y ‚Üí -[1+ x ] - (+ y) ‚â° -[1+ (y ‚Ñï.+ x) ]
neg-minus-pos x       zero    = refl
neg-minus-pos zero    (suc y) = cong (-[1+_] ‚àò suc) (sym (‚Ñï‚Çö.+-identity ≥ y))
neg-minus-pos (suc x) (suc y) = cong (-[1+_] ‚àò suc) (‚Ñï‚Çö.+-comm (suc x) y)

+-minus-telescope : ‚àÄ x y z ‚Üí (x - y) + (y - z) ‚â° x - z
+-minus-telescope x y z = begin
  (x - y) + (y - z)   ‚â°‚ü® +-assoc x (- y) (y - z) ‚ü©
  x + (- y + (y - z)) ‚â°‚ü® cong (Œª v ‚Üí x + v) (sym (+-assoc (- y) y _)) ‚ü©
  x + ((- y + y) - z) ‚â°‚ü® sym (+-assoc x (- y + y) (- z)) ‚ü©
  x + (- y + y) - z   ‚â°‚ü® cong (Œª a ‚Üí x + a - z) (+-inverseÀ° y) ‚ü©
  x + +0 - z          ‚â°‚ü® cong (_- z) (+-identity ≥ x) ‚ü©
  x - z               ‚àé where open ‚â°-Reasoning

[+m]-[+n]‚â°m‚äñn : ‚àÄ x y ‚Üí (+ x) - (+ y) ‚â° x ‚äñ y
[+m]-[+n]‚â°m‚äñn zero    zero    = refl
[+m]-[+n]‚â°m‚äñn zero    (suc y) = refl
[+m]-[+n]‚â°m‚äñn (suc x) zero    = cong (+_ ‚àò suc) (‚Ñï‚Çö.+-identity ≥ x)
[+m]-[+n]‚â°m‚äñn (suc x) (suc y) = refl

‚à£m-n‚à£‚â°‚à£n-m‚à£ : (x y : ‚Ñ§) ‚Üí ‚à£ x - y ‚à£ ‚â° ‚à£ y - x ‚à£
‚à£m-n‚à£‚â°‚à£n-m‚à£ -[1+ x ] -[1+ y ] = ‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ y x
‚à£m-n‚à£‚â°‚à£n-m‚à£ -[1+ x ] (+ y)    = begin
  ‚à£ -[1+ x ] - (+ y) ‚à£   ‚â°‚ü® cong ‚à£_‚à£ (neg-minus-pos x y) ‚ü©
  suc (y ‚Ñï.+ x)          ‚â°‚ü® sym (‚Ñï‚Çö.+-suc y x) ‚ü©
  y ‚Ñï.+ suc x            ‚àé where open ‚â°-Reasoning
‚à£m-n‚à£‚â°‚à£n-m‚à£ (+ x)    -[1+ y ] = begin
  x ‚Ñï.+ suc y            ‚â°‚ü® ‚Ñï‚Çö.+-suc x y ‚ü©
  suc (x ‚Ñï.+ y)          ‚â°‚ü® cong ‚à£_‚à£ (sym (neg-minus-pos y x)) ‚ü©
  ‚à£ -[1+ y ] + - (+ x) ‚à£ ‚àé where open ‚â°-Reasoning
‚à£m-n‚à£‚â°‚à£n-m‚à£ (+ x)     (+ y) = begin
  ‚à£ (+ x) - (+ y) ‚à£ ‚â°‚ü® cong ‚à£_‚à£ ([+m]-[+n]‚â°m‚äñn x y) ‚ü©
  ‚à£ x ‚äñ y ‚à£         ‚â°‚ü® ‚à£m‚äñn‚à£‚â°‚à£n‚äñm‚à£ x y ‚ü©
  ‚à£ y ‚äñ x ‚à£         ‚â°‚ü® cong ‚à£_‚à£ (sym ([+m]-[+n]‚â°m‚äñn y x)) ‚ü©
  ‚à£ (+ y) - (+ x) ‚à£ ‚àé where open ‚â°-Reasoning

m‚â°n‚áím-n‚â°0 : ‚àÄ m n ‚Üí m ‚â° n ‚Üí m - n ‚â° + 0
m‚â°n‚áím-n‚â°0 m m refl = +-inverse ≥ m

m-n‚â°0‚áím‚â°n : ‚àÄ m n ‚Üí m - n ‚â° + 0 ‚Üí m ‚â° n
m-n‚â°0‚áím‚â°n m n m-n‚â°0 = begin
  m             ‚â°‚ü® sym (+-identity ≥ m) ‚ü©
  m + + 0       ‚â°‚ü® cong (_+_ m) (sym (+-inverseÀ° n)) ‚ü©
  m + (- n + n) ‚â°‚ü® sym (+-assoc m (- n) n) ‚ü©
  (m - n) + n   ‚â°‚ü® cong (_+ n) m-n‚â°0 ‚ü©
  + 0 + n       ‚â°‚ü® +-identityÀ° n ‚ü©
  n             ‚àé where open ‚â°-Reasoning

‚â§-steps-neg : ‚àÄ {m n} p ‚Üí m ‚â§ n ‚Üí m - + p ‚â§ n
‚â§-steps-neg {m}         zero    m‚â§n rewrite +-identity ≥ m = m‚â§n
‚â§-steps-neg {+ m}       (suc p) m‚â§n = ‚â§-trans (m‚äñn‚â§m m (suc p)) m‚â§n
‚â§-steps-neg { -[1+ n ]} (suc p) m‚â§n = ‚â§-trans (-‚â§- (‚Ñï‚Çö.‚â§-trans (‚Ñï‚Çö.m‚â§m+n n p) (‚Ñï‚Çö.n‚â§1+n _))) m‚â§n

neg-mono-‚â§-‚â• : -_ Preserves _‚â§_ ‚ü∂ _‚â•_
neg-mono-‚â§-‚â• -‚â§+             = neg-‚â§-pos
neg-mono-‚â§-‚â• (-‚â§- n‚â§m)       = +‚â§+ (s‚â§s n‚â§m)
neg-mono-‚â§-‚â• (+‚â§+ z‚â§n)       = neg-‚â§-pos
neg-mono-‚â§-‚â• (+‚â§+ (s‚â§s m‚â§n)) = -‚â§- m‚â§n

m-n‚â§m : ‚àÄ m n ‚Üí m - + n ‚â§ m
m-n‚â§m m n = ‚â§-steps-neg n ‚â§-refl

m‚â§n‚áím-n‚â§0 : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí m - n ‚â§ + 0
m‚â§n‚áím-n‚â§0 (-‚â§+ {n = n})         = ‚â§-steps-neg n -‚â§+
m‚â§n‚áím-n‚â§0 (-‚â§- {n = n} n‚â§m)     = ‚â§-trans (‚äñ-mono ≥-‚â•-‚â§ n n‚â§m) (‚â§-reflexive (n‚äñn‚â°0 n))
m‚â§n‚áím-n‚â§0 {n = + 0}     (+‚â§+ z‚â§n) = +‚â§+ z‚â§n
m‚â§n‚áím-n‚â§0 {n = + suc n} (+‚â§+ z‚â§n) = -‚â§+
m‚â§n‚áím-n‚â§0 (+‚â§+ (s‚â§s {m} m‚â§n))   = ‚â§-trans (‚äñ-mono ≥-‚â•-‚â§ m m‚â§n) (‚â§-reflexive (n‚äñn‚â°0 m))

m-n‚â§0‚áím‚â§n : ‚àÄ {m n} ‚Üí m - n ‚â§ + 0 ‚Üí m ‚â§ n
m-n‚â§0‚áím‚â§n {m} {n} m-n‚â§0 = begin
  m             ‚â°‚ü® sym (+-identity ≥ m) ‚ü©
  m + + 0       ‚â°‚ü® cong (_+_ m) (sym (+-inverseÀ° n)) ‚ü©
  m + (- n + n) ‚â°‚ü® sym (+-assoc m (- n) n) ‚ü©
  (m - n) + n   ‚â§‚ü® +-monoÀ°-‚â§ n m-n‚â§0 ‚ü©
  + 0 + n       ‚â°‚ü® +-identityÀ° n ‚ü©
  n             ‚àé
  where open ‚â§-Reasoning

m‚â§n‚áí0‚â§n-m : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí + 0 ‚â§ n - m
m‚â§n‚áí0‚â§n-m {m} {n} m‚â§n = begin
  + 0   ‚â°‚ü® sym (+-inverse ≥ m) ‚ü©
  m - m ‚â§‚ü® +-monoÀ°-‚â§ (- m) m‚â§n ‚ü©
  n - m ‚àé
  where open ‚â§-Reasoning

0‚â§n-m‚áím‚â§n : ‚àÄ {m n} ‚Üí + 0 ‚â§ n - m ‚Üí m ‚â§ n
0‚â§n-m‚áím‚â§n {m} {n} 0‚â§n-m = begin
  m             ‚â°‚ü® sym (+-identityÀ° m) ‚ü©
  + 0 + m       ‚â§‚ü® +-monoÀ°-‚â§ m 0‚â§n-m ‚ü©
  n - m + m     ‚â°‚ü® +-assoc n (- m) m ‚ü©
  n + (- m + m) ‚â°‚ü® cong (_+_ n) (+-inverseÀ° m) ‚ü©
  n + + 0       ‚â°‚ü® +-identity ≥ n ‚ü©
  n             ‚àé
  where open ‚â§-Reasoning

------------------------------------------------------------------------
-- Properties of suc
------------------------------------------------------------------------

‚â§-step : ‚àÄ {n m} ‚Üí n ‚â§ m ‚Üí n ‚â§ suc‚Ñ§ m
‚â§-step = ‚â§-steps 1

n‚â§1+n : ‚àÄ n ‚Üí n ‚â§ suc‚Ñ§ n
n‚â§1+n n = ‚â§-steps 1 ‚â§-refl

suc-+ : ‚àÄ m n ‚Üí + suc m + n ‚â° suc‚Ñ§ (+ m + n)
suc-+ m (+ n)      = refl
suc-+ m (-[1+ n ]) = sym (distrib ≥-‚äñ-+-pos 1 m (suc n))

n‚â¢1+n : ‚àÄ {n} ‚Üí n ‚â¢ suc‚Ñ§ n
n‚â¢1+n {+ _}           ()
n‚â¢1+n { -[1+ 0 ]}     ()
n‚â¢1+n { -[1+ suc n ]} ()

1-[1+n]‚â°-n : ‚àÄ n ‚Üí suc‚Ñ§ -[1+ n ] ‚â° - (+ n)
1-[1+n]‚â°-n zero    = refl
1-[1+n]‚â°-n (suc n) = refl

suc-mono : suc‚Ñ§ Preserves _‚â§_ ‚ü∂ _‚â§_
suc-mono (-‚â§+ {m}) = 0‚äñm‚â§+ m
suc-mono (-‚â§- n‚â§m) = ‚äñ-mono ≥-‚â•-‚â§ zero n‚â§m
suc-mono (+‚â§+ m‚â§n) = +‚â§+ (s‚â§s m‚â§n)

m+1‚â§n‚áím<n : ‚àÄ {m n} ‚Üí suc‚Ñ§ m ‚â§ n ‚Üí m < n
m+1‚â§n‚áím<n {+ m}           {+ _}       (+‚â§+ m‚â§n) = +<+ m‚â§n
m+1‚â§n‚áím<n { -[1+ 0 ]}     {+ n}       p         = -<+
m+1‚â§n‚áím<n { -[1+ suc m ]} {+ n}       -‚â§+       = -<+
m+1‚â§n‚áím<n { -[1+ suc m ]} { -[1+ n ]} (-‚â§- n‚â§m) = -<- (‚Ñï.s‚â§s n‚â§m)

m<n‚áím+1‚â§n : ‚àÄ {m n} ‚Üí m < n ‚Üí suc‚Ñ§ m ‚â§ n
m<n‚áím+1‚â§n {+ _}           {+ _}       (+<+ m<n) = +‚â§+ m<n
m<n‚áím+1‚â§n { -[1+ 0 ]}     {+ _}       -<+       = +‚â§+ z‚â§n
m<n‚áím+1‚â§n { -[1+ suc m ]} { -[1+ _ ]} (-<- n<m) = -‚â§- (‚Ñï.‚â§-pred n<m)
m<n‚áím+1‚â§n { -[1+ suc m ]} {+ _}       -<+       = -‚â§+

------------------------------------------------------------------------
-- Properties of pred
------------------------------------------------------------------------

suc-pred : ‚àÄ m ‚Üí suc‚Ñ§ (pred m) ‚â° m
suc-pred m = begin
  suc‚Ñ§ (pred m) ‚â°‚ü® sym (+-assoc (+ 1) (- + 1) m) ‚ü©
  + 0 + m       ‚â°‚ü® +-identityÀ° m ‚ü©
  m             ‚àé where open ‚â°-Reasoning

pred-suc : ‚àÄ m ‚Üí pred (suc‚Ñ§ m) ‚â° m
pred-suc m = begin
  pred (suc‚Ñ§ m) ‚â°‚ü® sym (+-assoc (- + 1) (+ 1) m) ‚ü©
  + 0 + m       ‚â°‚ü® +-identityÀ° m ‚ü©
  m             ‚àé where open ‚â°-Reasoning

+-pred : ‚àÄ m n ‚Üí m + pred n ‚â° pred (m + n)
+-pred m n = begin
  m + (-[1+ 0 ] + n) ‚â°‚ü® sym (+-assoc m -[1+ 0 ] n) ‚ü©
  m + -[1+ 0 ] + n   ‚â°‚ü® cong (_+ n) (+-comm m -[1+ 0 ]) ‚ü©
  -[1+ 0 ] + m + n   ‚â°‚ü® +-assoc -[1+ 0 ] m n ‚ü©
  -[1+ 0 ] + (m + n) ‚àé where open ‚â°-Reasoning

pred-+ : ‚àÄ m n ‚Üí pred m + n ‚â° pred (m + n)
pred-+ m n = begin
  pred m + n   ‚â°‚ü® +-comm (pred m) n ‚ü©
  n + pred m   ‚â°‚ü® +-pred n m ‚ü©
  pred (n + m) ‚â°‚ü® cong pred (+-comm n m) ‚ü©
  pred (m + n) ‚àé where open ‚â°-Reasoning

neg-suc : ‚àÄ m ‚Üí - + suc m ‚â° pred (- + m)
neg-suc zero    = refl
neg-suc (suc m) = refl

minus-suc : ‚àÄ m n ‚Üí m - + suc n ‚â° pred (m - + n)
minus-suc m n = begin
  m + - + suc n      ‚â°‚ü® cong (_+_ m) (neg-suc n) ‚ü©
  m + pred (- (+ n)) ‚â°‚ü® +-pred m (- + n) ‚ü©
  pred (m - + n)     ‚àé where open ‚â°-Reasoning

m‚â§pred[n]‚áím<n : ‚àÄ {m n} ‚Üí m ‚â§ pred n ‚Üí m < n
m‚â§pred[n]‚áím<n {m} { + n}      m‚â§predn = ‚â§-<-trans m‚â§predn (m‚äñ1+n<m n 0)
m‚â§pred[n]‚áím<n {m} { -[1+ n ]} m‚â§predn = ‚â§-<-trans m‚â§predn (-<- ‚Ñï‚Çö.‚â§-refl)

m<n‚áím‚â§pred[n] : ‚àÄ {m n} ‚Üí m < n ‚Üí m ‚â§ pred n
m<n‚áím‚â§pred[n] {_} { +0}       -<+       = -‚â§- z‚â§n
m<n‚áím‚â§pred[n] {_} { +[1+ n ]} -<+       = -‚â§+
m<n‚áím‚â§pred[n] {_} { +[1+ n ]} (+<+ m<n) = +‚â§+ (‚Ñï‚Çö.‚â§-pred m<n)
m<n‚áím‚â§pred[n] {_} { -[1+ n ]} (-<- n<m) = -‚â§- n<m

‚â§-step-neg : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí pred m ‚â§ n
‚â§-step-neg -‚â§+               = -‚â§+
‚â§-step-neg (-‚â§- n‚â§m)         = -‚â§- (‚Ñï‚Çö.‚â§-step n‚â§m)
‚â§-step-neg (+‚â§+ z‚â§n)         = -‚â§+
‚â§-step-neg (+‚â§+ (s‚â§s m‚â§n)) = +‚â§+ (‚Ñï‚Çö.‚â§-step m‚â§n)

pred-mono : pred Preserves _‚â§_ ‚ü∂ _‚â§_
pred-mono (-‚â§+ {n = 0})     = -‚â§- z‚â§n
pred-mono (-‚â§+ {n = suc n}) = -‚â§+
pred-mono (-‚â§- n‚â§m)         = -‚â§- (s‚â§s n‚â§m)
pred-mono (+‚â§+ m‚â§n)         = ‚äñ-monoÀ°-‚â§ 1 m‚â§n

------------------------------------------------------------------------
-- Properties of _*_
------------------------------------------------------------------------

------------------------------------------------------------------------
-- Algebraic properties

*-comm : Commutative _*_
*-comm -[1+ a ] -[1+ b ] rewrite ‚Ñï‚Çö.*-comm (suc a) (suc b) = refl
*-comm -[1+ a ] (+   b ) rewrite ‚Ñï‚Çö.*-comm (suc a) b       = refl
*-comm (+   a ) -[1+ b ] rewrite ‚Ñï‚Çö.*-comm a       (suc b) = refl
*-comm (+   a ) (+   b ) rewrite ‚Ñï‚Çö.*-comm a       b       = refl

*-identityÀ° : LeftIdentity (+ 1) _*_
*-identityÀ° -[1+ n ] rewrite ‚Ñï‚Çö.+-identity ≥ n = refl
*-identityÀ° +0    = refl
*-identityÀ° +[1+ n ] rewrite ‚Ñï‚Çö.+-identity ≥ n = refl

*-identity ≥ : RightIdentity (+ 1) _*_
*-identity ≥ = comm+idÀ°‚áíid ≥ *-comm *-identityÀ°

*-identity : Identity (+ 1) _*_
*-identity = *-identityÀ° , *-identity ≥

*-zeroÀ° : LeftZero +0 _*_
*-zeroÀ° n = refl

*-zero ≥ : RightZero +0 _*_
*-zero ≥ = comm+zeÀ°‚áíze ≥ *-comm *-zeroÀ°

*-zero : Zero +0 _*_
*-zero = *-zeroÀ° , *-zero ≥

private
  lemma : ‚àÄ a b c ‚Üí c ‚Ñï.+ (b ‚Ñï.+ a ‚Ñï.* suc b) ‚Ñï.* suc c
                  ‚â° c ‚Ñï.+ b ‚Ñï.* suc c ‚Ñï.+ a ‚Ñï.* suc (c ‚Ñï.+ b ‚Ñï.* suc c)
  lemma =
    solve 3 (Œª a b c ‚Üí c :+ (b :+ a :* (con 1 :+ b)) :* (con 1 :+ c)
                    := c :+ b :* (con 1 :+ c) :+
                       a :* (con 1 :+ (c :+ b :* (con 1 :+ c))))
            refl

*-assoc : Associative _*_
*-assoc +0 _ _ = refl
*-assoc x +0 z rewrite ‚Ñï‚Çö.*-zero ≥ ‚à£ x ‚à£ = refl
*-assoc x y +0 rewrite
    ‚Ñï‚Çö.*-zero ≥ ‚à£ y ‚à£
  | ‚Ñï‚Çö.*-zero ≥ ‚à£ x ‚à£
  | ‚Ñï‚Çö.*-zero ≥ ‚à£ sign x ùïä* sign y ‚óÉ ‚à£ x ‚à£ ‚Ñï.* ‚à£ y ‚à£ ‚à£
  = refl
*-assoc -[1+ a ] -[1+ b ] +[1+ c ] = cong (+_ ‚àò suc) (lemma a b c)
*-assoc -[1+ a ] +[1+ b ] -[1+ c ] = cong (+_ ‚àò suc) (lemma a b c)
*-assoc +[1+ a ] +[1+ b ] +[1+ c ] = cong (+_ ‚àò suc) (lemma a b c)
*-assoc +[1+ a ] -[1+ b ] -[1+ c ] = cong (+_ ‚àò suc) (lemma a b c)
*-assoc -[1+ a ] -[1+ b ] -[1+ c ] = cong -[1+_] (lemma a b c)
*-assoc -[1+ a ] +[1+ b ] +[1+ c ] = cong -[1+_] (lemma a b c)
*-assoc +[1+ a ] -[1+ b ] +[1+ c ] = cong -[1+_] (lemma a b c)
*-assoc +[1+ a ] +[1+ b ] -[1+ c ] = cong -[1+_] (lemma a b c)

private

  -- lemma used to prove distributivity.
  distrib-lemma :
    ‚àÄ a b c ‚Üí (c ‚äñ b) * -[1+ a ] ‚â° a ‚Ñï.+ b ‚Ñï.* suc a ‚äñ (a ‚Ñï.+ c ‚Ñï.* suc a)
  distrib-lemma a b c
    rewrite +-cancelÀ°-‚äñ a (b ‚Ñï.* suc a) (c ‚Ñï.* suc a)
          | ‚äñ-swap (b ‚Ñï.* suc a) (c ‚Ñï.* suc a)
    with b ‚Ñï.‚â§? c
  ... | yes b‚â§c
    rewrite ‚äñ-‚â• b‚â§c
          | ‚äñ-‚â• (‚Ñï‚Çö.*-mono-‚â§ b‚â§c (‚Ñï‚Çö.‚â§-refl {x = suc a}))
          | -‚óÉn‚â°-n ((c ‚à∏ b) ‚Ñï.* suc a)
          | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) c b
          = refl
  ... | no b‚â∞c
    rewrite sign-‚äñ-‚â∞ b‚â∞c
          | ‚à£‚äñ‚à£-‚â∞ b‚â∞c
          | +‚óÉn‚â°+n ((b ‚à∏ c) ‚Ñï.* suc a)
          | ‚äñ-‚â∞ (b‚â∞c ‚àò ‚Ñï‚Çö.*-cancel ≥-‚â§ b c a)
          | neg-involutive (+ (b ‚Ñï.* suc a ‚à∏ c ‚Ñï.* suc a))
          | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) b c
          = refl

*-distrib ≥-+ : _*_ DistributesOver ≥ _+_
*-distrib ≥-+ +0 y z
  rewrite ‚Ñï‚Çö.*-zero ≥ ‚à£ y ‚à£
        | ‚Ñï‚Çö.*-zero ≥ ‚à£ z ‚à£
        | ‚Ñï‚Çö.*-zero ≥ ‚à£ y + z ‚à£
        = refl
*-distrib ≥-+ x +0 z
  rewrite +-identityÀ° z
        | +-identityÀ° (sign z ùïä* sign x ‚óÉ ‚à£ z ‚à£ ‚Ñï.* ‚à£ x ‚à£)
        = refl
*-distrib ≥-+ x y +0
  rewrite +-identity ≥ y
        | +-identity ≥ (sign y ùïä* sign x ‚óÉ ‚à£ y ‚à£ ‚Ñï.* ‚à£ x ‚à£)
        = refl
*-distrib ≥-+ -[1+ a ] -[1+ b ] -[1+ c ] = cong (+_) $
  solve 3 (Œª a b c ‚Üí (con 2 :+ b :+ c) :* (con 1 :+ a)
                  := (con 1 :+ b) :* (con 1 :+ a) :+
                     (con 1 :+ c) :* (con 1 :+ a))
          refl a b c
*-distrib ≥-+ (+ suc a) (+ suc b) (+ suc c) = cong (+_) $
  solve 3 (Œª a b c ‚Üí (con 1 :+ b :+ (con 1 :+ c)) :* (con 1 :+ a)
                  := (con 1 :+ b) :* (con 1 :+ a) :+
                     (con 1 :+ c) :* (con 1 :+ a))
        refl a b c
*-distrib ≥-+ -[1+ a ] (+ suc b) (+ suc c) = cong -[1+_] $
  solve 3 (Œª a b c ‚Üí a :+ (b :+ (con 1 :+ c)) :* (con 1 :+ a)
                   := (con 1 :+ b) :* (con 1 :+ a) :+
                      (a :+ c :* (con 1 :+ a)))
         refl a b c
*-distrib ≥-+ (+ suc a) -[1+ b ] -[1+ c ] = cong -[1+_] $
  solve 3 (Œª a b c ‚Üí a :+ (con 1 :+ a :+ (b :+ c) :* (con 1 :+ a))
                  := (con 1 :+ b) :* (con 1 :+ a) :+
                     (a :+ c :* (con 1 :+ a)))
         refl a b c
*-distrib ≥-+ -[1+ a ] -[1+ b ] (+ suc c) = distrib-lemma a b c
*-distrib ≥-+ -[1+ a ] (+ suc b) -[1+ c ] = distrib-lemma a c b
*-distrib ≥-+ (+ suc a) -[1+ b ] (+ suc c) with b ‚Ñï.‚â§? c
... | yes b‚â§c
  rewrite +-cancelÀ°-‚äñ a (c ‚Ñï.* suc a) (b ‚Ñï.* suc a)
        | ‚äñ-‚â• b‚â§c
        | +-comm (- (+ (a ‚Ñï.+ b ‚Ñï.* suc a))) (+ (a ‚Ñï.+ c ‚Ñï.* suc a))
        | ‚äñ-‚â• (‚Ñï‚Çö.*-mono-‚â§ b‚â§c (‚Ñï‚Çö.‚â§-refl {x = suc a}))
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) c b
        | +‚óÉn‚â°+n (c ‚Ñï.* suc a ‚à∏ b ‚Ñï.* suc a)
        = refl
... | no b‚â∞c
  rewrite +-cancelÀ°-‚äñ a (c ‚Ñï.* suc a) (b ‚Ñï.* suc a)
        | sign-‚äñ-‚â∞ b‚â∞c
        | ‚à£‚äñ‚à£-‚â∞ b‚â∞c
        | -‚óÉn‚â°-n ((b ‚à∏ c) ‚Ñï.* suc a)
        | ‚äñ-‚â∞ (b‚â∞c ‚àò ‚Ñï‚Çö.*-cancel ≥-‚â§ b c a)
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc a) b c
        = refl
*-distrib ≥-+ (+ suc c) (+ suc a) -[1+ b ] with b ‚Ñï.‚â§? a
... | yes b‚â§a
  rewrite +-cancelÀ°-‚äñ c (a ‚Ñï.* suc c) (b ‚Ñï.* suc c)
        | ‚äñ-‚â• b‚â§a
        | ‚äñ-‚â• (‚Ñï‚Çö.*-mono-‚â§ b‚â§a (‚Ñï‚Çö.‚â§-refl {x = suc c}))
        | +‚óÉn‚â°+n ((a ‚à∏ b) ‚Ñï.* suc c)
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc c) a b
        = refl
... | no b‚â∞a
  rewrite +-cancelÀ°-‚äñ c (a ‚Ñï.* suc c) (b ‚Ñï.* suc c)
        | sign-‚äñ-‚â∞ b‚â∞a
        | ‚à£‚äñ‚à£-‚â∞ b‚â∞a
        | ‚äñ-‚â∞ (b‚â∞a ‚àò ‚Ñï‚Çö.*-cancel ≥-‚â§ b a c)
        | -‚óÉn‚â°-n ((b ‚à∏ a) ‚Ñï.* suc c)
        | ‚Ñï‚Çö.*-distrib ≥-‚à∏ (suc c) b a
        = refl

*-distribÀ°-+ : _*_ DistributesOverÀ° _+_
*-distribÀ°-+ = comm+distr ≥‚áídistrÀ° *-comm *-distrib ≥-+

*-distrib-+ : _*_ DistributesOver _+_
*-distrib-+ = *-distribÀ°-+ , *-distrib ≥-+

------------------------------------------------------------------------
-- Structures

*-isMagma : IsMagma _*_
*-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _*_
  }

*-isSemigroup : IsSemigroup _*_
*-isSemigroup = record
  { isMagma = *-isMagma
  ; assoc   = *-assoc
  }

*-isCommutativeSemigroup : IsCommutativeSemigroup _*_
*-isCommutativeSemigroup = record
  { isSemigroup = *-isSemigroup
  ; comm        = *-comm
  }

*-1-isMonoid : IsMonoid _*_ (+ 1)
*-1-isMonoid = record
  { isSemigroup = *-isSemigroup
  ; identity    = *-identity
  }

*-1-isCommutativeMonoid : IsCommutativeMonoid _*_ (+ 1)
*-1-isCommutativeMonoid = record
  { isMonoid = *-1-isMonoid
  ; comm     = *-comm
  }

+-*-isSemiring : IsSemiring _+_ _*_ +0 (+ 1)
+-*-isSemiring = record
  { isSemiringWithoutAnnihilatingZero = record
    { +-isCommutativeMonoid = +-0-isCommutativeMonoid
    ; *-isMonoid = *-1-isMonoid
    ; distrib = *-distrib-+
    }
  ; zero = *-zero
  }

+-*-isCommutativeSemiring : IsCommutativeSemiring _+_ _*_ +0 (+ 1)
+-*-isCommutativeSemiring = record
  { isSemiring = +-*-isSemiring
  ; *-comm = *-comm
  }

+-*-isRing : IsRing _+_ _*_ -_ +0 (+ 1)
+-*-isRing = record
  { +-isAbelianGroup = +-isAbelianGroup
  ; *-isMonoid       = *-1-isMonoid
  ; distrib          = *-distrib-+
  ; zero             = *-zero
  }

+-*-isCommutativeRing : IsCommutativeRing _+_ _*_ -_ +0 (+ 1)
+-*-isCommutativeRing = record
  { isRing = +-*-isRing
  ; *-comm = *-comm
  }

------------------------------------------------------------------------
-- Bundles

*-magma : Magma 0‚Ñì 0‚Ñì
*-magma = record
  { isMagma = *-isMagma
  }

*-semigroup : Semigroup 0‚Ñì 0‚Ñì
*-semigroup = record
  { isSemigroup = *-isSemigroup
  }

*-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
*-commutativeSemigroup = record
  { isCommutativeSemigroup = *-isCommutativeSemigroup
  }

*-1-monoid : Monoid 0‚Ñì 0‚Ñì
*-1-monoid = record
  { isMonoid = *-1-isMonoid
  }

*-1-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
*-1-commutativeMonoid = record
  { isCommutativeMonoid = *-1-isCommutativeMonoid
  }

+-*-semiring : Semiring 0‚Ñì 0‚Ñì
+-*-semiring = record
  { isSemiring = +-*-isSemiring
  }

+-*-ring : Ring 0‚Ñì 0‚Ñì
+-*-ring = record
  { isRing = +-*-isRing
  }

+-*-commutativeRing : CommutativeRing 0‚Ñì 0‚Ñì
+-*-commutativeRing = record
  { isCommutativeRing = +-*-isCommutativeRing
  }

------------------------------------------------------------------------
-- Other properties of _*_ and _‚â°_

abs-*-commute : ‚Ñ§to‚Ñï.Homomorphic‚ÇÇ ‚à£_‚à£ _*_ ‚Ñï._*_
abs-*-commute i j = abs-‚óÉ _ _

*-cancel ≥-‚â° : ‚àÄ i j k ‚Üí k ‚â¢ + 0 ‚Üí i * k ‚â° j * k ‚Üí i ‚â° j
*-cancel ≥-‚â° i j k            ‚â¢0 eq with signAbs k
*-cancel ≥-‚â° i j .+0       ‚â¢0 eq | s ‚óÇ zero  = contradiction refl ‚â¢0
*-cancel ≥-‚â° i j .(s ‚óÉ suc n) ‚â¢0 eq | s ‚óÇ suc n
  with ‚à£ s ‚óÉ suc n ‚à£ | abs-‚óÉ s (suc n) | sign (s ‚óÉ suc n) | sign-‚óÉ s n
...  | .(suc n)      | refl            | .s               | refl =
  ‚óÉ-cong (sign-i‚â°sign-j i j eq) $
         ‚Ñï‚Çö.*-cancel ≥-‚â° ‚à£ i ‚à£ ‚à£ j ‚à£ $ abs-cong eq
  where
  sign-i‚â°sign-j : ‚àÄ i j ‚Üí
                  (sign i ùïä* s) ‚óÉ (‚à£ i ‚à£ ‚Ñï.* suc n) ‚â°
                  (sign j ùïä* s) ‚óÉ (‚à£ j ‚à£ ‚Ñï.* suc n) ‚Üí
                  sign i ‚â° sign j
  sign-i‚â°sign-j i              j              eq with signAbs i | signAbs j
  sign-i‚â°sign-j .+0         .+0         eq | s‚ÇÅ ‚óÇ zero   | s‚ÇÇ ‚óÇ zero   = refl
  sign-i‚â°sign-j .+0         .(s‚ÇÇ ‚óÉ suc n‚ÇÇ) eq | s‚ÇÅ ‚óÇ zero   | s‚ÇÇ ‚óÇ suc n‚ÇÇ
    with ‚à£ s‚ÇÇ ‚óÉ suc n‚ÇÇ ‚à£ | abs-‚óÉ s‚ÇÇ (suc n‚ÇÇ)
  ... | .(suc n‚ÇÇ) | refl
    with abs-cong {s‚ÇÅ} {sign (s‚ÇÇ ‚óÉ suc n‚ÇÇ) ùïä* s} {0} {suc n‚ÇÇ ‚Ñï.* suc n} eq
  ...   | ()
  sign-i‚â°sign-j .(s‚ÇÅ ‚óÉ suc n‚ÇÅ) .+0         eq | s‚ÇÅ ‚óÇ suc n‚ÇÅ | s‚ÇÇ ‚óÇ zero
    with ‚à£ s‚ÇÅ ‚óÉ suc n‚ÇÅ ‚à£ | abs-‚óÉ s‚ÇÅ (suc n‚ÇÅ)
  ... | .(suc n‚ÇÅ) | refl
    with abs-cong {sign (s‚ÇÅ ‚óÉ suc n‚ÇÅ) ùïä* s} {s‚ÇÅ} {suc n‚ÇÅ ‚Ñï.* suc n} {0} eq
  ...   | ()
  sign-i‚â°sign-j .(s‚ÇÅ ‚óÉ suc n‚ÇÅ) .(s‚ÇÇ ‚óÉ suc n‚ÇÇ) eq | s‚ÇÅ ‚óÇ suc n‚ÇÅ | s‚ÇÇ ‚óÇ suc n‚ÇÇ
    with ‚à£ s‚ÇÅ ‚óÉ suc n‚ÇÅ ‚à£ | abs-‚óÉ s‚ÇÅ (suc n‚ÇÅ)
       | sign (s‚ÇÅ ‚óÉ suc n‚ÇÅ) | sign-‚óÉ s‚ÇÅ n‚ÇÅ
       | ‚à£ s‚ÇÇ ‚óÉ suc n‚ÇÇ ‚à£ | abs-‚óÉ s‚ÇÇ (suc n‚ÇÇ)
       | sign (s‚ÇÇ ‚óÉ suc n‚ÇÇ) | sign-‚óÉ s‚ÇÇ n‚ÇÇ
  ... | .(suc n‚ÇÅ) | refl | .s‚ÇÅ | refl | .(suc n‚ÇÇ) | refl | .s‚ÇÇ | refl =
    ùïä‚Çö.*-cancel ≥-‚â° s‚ÇÅ s‚ÇÇ (sign-cong eq)

*-cancelÀ°-‚â° : ‚àÄ i j k ‚Üí i ‚â¢ + 0 ‚Üí i * j ‚â° i * k ‚Üí j ‚â° k
*-cancelÀ°-‚â° i j k
  rewrite *-comm i j
        | *-comm i k
        = *-cancel ≥-‚â° j k i

suc-* : ‚àÄ m n ‚Üí suc‚Ñ§ m * n ‚â° n + m * n
suc-* m n = begin
  suc‚Ñ§ m * n      ‚â°‚ü® *-distrib ≥-+ n (+ 1) m ‚ü©
  + 1 * n + m * n ‚â°‚ü® cong (_+ m * n) (*-identityÀ° n) ‚ü©
  n + m * n       ‚àé
  where open ‚â°-Reasoning

*-suc : ‚àÄ m n ‚Üí m * suc‚Ñ§ n ‚â° m + m * n
*-suc m n = begin
  m * suc‚Ñ§ n ‚â°‚ü® *-comm m _ ‚ü©
  suc‚Ñ§ n * m ‚â°‚ü® suc-* n m ‚ü©
  m + n * m  ‚â°‚ü® cong (Œª v ‚Üí m + v) (*-comm n m) ‚ü©
  m + m * n  ‚àé
  where open ‚â°-Reasoning

-1*n‚â°-n : ‚àÄ n ‚Üí -[1+ 0 ] * n ‚â° - n
-1*n‚â°-n -[1+ n ] = cong (Œª v ‚Üí + suc v) (‚Ñï‚Çö.+-identity ≥ n)
-1*n‚â°-n +0       = refl
-1*n‚â°-n +[1+ n ] = cong -[1+_] (‚Ñï‚Çö.+-identity ≥ n)

------------------------------------------------------------------------
-- Properties of _*_ and +_/-_

pos-distrib-* : ‚àÄ x y ‚Üí (+ x) * (+ y) ‚â° + (x ‚Ñï.* y)
pos-distrib-* zero    y       = refl
pos-distrib-* (suc x) zero    = pos-distrib-* x zero
pos-distrib-* (suc x) (suc y) = refl

neg-distribÀ°-* : ‚àÄ x y ‚Üí - (x * y) ‚â° (- x) * y
neg-distribÀ°-* x y = begin
  - (x * y)          ‚â°‚ü® sym (-1*n‚â°-n (x * y)) ‚ü©
  -[1+ 0 ] * (x * y) ‚â°‚ü® sym (*-assoc -[1+ 0 ] x y) ‚ü©
  -[1+ 0 ] * x * y   ‚â°‚ü® cong (_* y) (-1*n‚â°-n x) ‚ü©
  - x * y            ‚àé where open ‚â°-Reasoning

neg-distrib ≥-* : ‚àÄ x y ‚Üí - (x * y) ‚â° x * (- y)
neg-distrib ≥-* x y = begin
  - (x * y) ‚â°‚ü® cong -_ (*-comm x y) ‚ü©
  - (y * x) ‚â°‚ü® neg-distribÀ°-* y x ‚ü©
  - y * x   ‚â°‚ü® *-comm (- y) x ‚ü©
  x * (- y) ‚àé where open ‚â°-Reasoning

------------------------------------------------------------------------
-- Properties of _*_ and _‚óÉ_

‚óÉ-distrib-* :  ‚àÄ s t m n ‚Üí (s ùïä* t) ‚óÉ (m ‚Ñï.* n) ‚â° (s ‚óÉ m) * (t ‚óÉ n)
‚óÉ-distrib-* s t zero    zero    = refl
‚óÉ-distrib-* s t zero    (suc n) = refl
‚óÉ-distrib-* s t (suc m) zero    =
  trans
    (cong‚ÇÇ _‚óÉ_ (ùïä‚Çö.*-comm s t) (‚Ñï‚Çö.*-comm m 0))
    (*-comm (t ‚óÉ zero) (s ‚óÉ suc m))
‚óÉ-distrib-* s t (suc m) (suc n) =
  sym (cong‚ÇÇ _‚óÉ_
    (cong‚ÇÇ _ùïä*_ (sign-‚óÉ s m) (sign-‚óÉ t n))
    (‚à£s‚óÉm‚à£*‚à£t‚óÉn‚à£‚â°m*n s t (suc m) (suc n)))

------------------------------------------------------------------------
-- Properties of _*_ and _‚â§_

*-cancel ≥-‚â§-pos : ‚àÄ m n o ‚Üí m * + suc o ‚â§ n * + suc o ‚Üí m ‚â§ n
*-cancel ≥-‚â§-pos (-[1+ m ]) (-[1+ n ]) o (-‚â§- n‚â§m) =
  -‚â§- (‚Ñï‚Çö.‚â§-pred (‚Ñï‚Çö.*-cancel ≥-‚â§ (suc n) (suc m) o (s‚â§s n‚â§m)))
*-cancel ≥-‚â§-pos -[1+ _ ]   (+ _)      _ _         = -‚â§+
*-cancel ≥-‚â§-pos +0      +0      _ _         = +‚â§+ z‚â§n
*-cancel ≥-‚â§-pos +0      (+ suc _)  _ _         = +‚â§+ z‚â§n
*-cancel ≥-‚â§-pos (+ suc _)  +0      _ (+‚â§+ ())
*-cancel ≥-‚â§-pos (+ suc m)  (+ suc n)  o (+‚â§+ m‚â§n) =
  +‚â§+ (‚Ñï‚Çö.*-cancel ≥-‚â§ (suc m) (suc n) o m‚â§n)

*-cancelÀ°-‚â§-pos : ‚àÄ m n o ‚Üí + suc m * n ‚â§ + suc m * o ‚Üí n ‚â§ o
*-cancelÀ°-‚â§-pos m n o
  rewrite *-comm (+ suc m) n
        | *-comm (+ suc m) o
        = *-cancel ≥-‚â§-pos n o m

*-mono ≥-‚â§-pos : ‚àÄ n ‚Üí (_* + suc n) Preserves _‚â§_ ‚ü∂ _‚â§_
*-mono ≥-‚â§-pos _ (-‚â§+             {n = 0})         = -‚â§+
*-mono ≥-‚â§-pos _ (-‚â§+             {n = suc _})     = -‚â§+
*-mono ≥-‚â§-pos x (-‚â§-                         n‚â§m) =
  -‚â§- (‚Ñï‚Çö.‚â§-pred (‚Ñï‚Çö.*-mono-‚â§ (s‚â§s n‚â§m) (‚Ñï‚Çö.‚â§-refl {x = suc x})))
*-mono ≥-‚â§-pos k {+ 0} {+ 0}     (+‚â§+ m‚â§n) = +‚â§+ m‚â§n
*-mono ≥-‚â§-pos k {+ 0} {+ suc _} (+‚â§+ m‚â§n) = +‚â§+ z‚â§n
*-mono ≥-‚â§-pos x (+‚â§+ {m = suc _} {n = suc _} m‚â§n) =
  +‚â§+ ((‚Ñï‚Çö.*-mono-‚â§ m‚â§n (‚Ñï‚Çö.‚â§-refl {x = suc x})))

*-mono ≥-‚â§-non-neg : ‚àÄ n ‚Üí (_* + n) Preserves _‚â§_ ‚ü∂ _‚â§_
*-mono ≥-‚â§-non-neg (suc n) = *-mono ≥-‚â§-pos n
*-mono ≥-‚â§-non-neg zero {i} {j} i‚â§j
  rewrite *-zero ≥ i
        | *-zero ≥ j
        = +‚â§+ z‚â§n

*-monoÀ°-‚â§-non-neg : ‚àÄ n ‚Üí (+ n *_) Preserves _‚â§_ ‚ü∂ _‚â§_
*-monoÀ°-‚â§-non-neg n {i} {j} i‚â§j
  rewrite *-comm (+ n) i
        | *-comm (+ n) j
        = *-mono ≥-‚â§-non-neg n i‚â§j

*-monoÀ°-‚â§-pos : ‚àÄ n ‚Üí (+ suc n *_) Preserves _‚â§_ ‚ü∂ _‚â§_
*-monoÀ°-‚â§-pos n = *-monoÀ°-‚â§-non-neg (suc n)

------------------------------------------------------------------------
-- Properties of _*_ and _‚â§_

*-monoÀ°-<-pos : ‚àÄ n ‚Üí (+[1+ n ] *_) Preserves _<_ ‚ü∂ _<_
*-monoÀ°-<-pos n {+ m}       {+ o}       (+<+ m<o) = +‚óÉ-mono-< (‚Ñï‚Çö.+-mono-<-‚â§ m<o (‚Ñï‚Çö.*-mono ≥-‚â§ n (‚Ñï‚Çö.<‚áí‚â§ m<o)))
*-monoÀ°-<-pos n { -[1+ m ]} {+ o}       leq       = -‚óÉ<+‚óÉ _ (suc n ‚Ñï.* o)
*-monoÀ°-<-pos n { -[1+ m ]} { -[1+ o ]} (-<- o<m) = -<- (‚Ñï‚Çö.+-mono-<-‚â§ o<m (‚Ñï‚Çö.*-mono ≥-‚â§ n (‚Ñï‚Çö.<‚áí‚â§ (s‚â§s o<m))))

*-mono ≥-<-pos : ‚àÄ n ‚Üí (_* +[1+ n ]) Preserves _<_ ‚ü∂ _<_
*-mono ≥-<-pos n {m} {o} rewrite *-comm m +[1+ n ] | *-comm o +[1+ n ]
  = *-monoÀ°-<-pos n

*-cancelÀ°-<-non-neg : ‚àÄ n {i j} ‚Üí + n * i < + n * j ‚Üí i < j
*-cancelÀ°-<-non-neg n {+ i}       {+ j}       leq = +<+ (‚Ñï‚Çö.*-cancelÀ°-< n (+‚óÉ-cancel-< leq))
*-cancelÀ°-<-non-neg n {+ i}       { -[1+ j ]} leq = contradiction leq +‚óÉ‚âÆ-‚óÉ
*-cancelÀ°-<-non-neg n { -[1+ i ]} {+ j}       leq = -<+
*-cancelÀ°-<-non-neg n { -[1+ i ]} { -[1+ j ]} leq = -<- (‚Ñï‚Çö.‚â§-pred (‚Ñï‚Çö.*-cancelÀ°-< n (neg‚óÉ-cancel-< leq)))

*-cancel ≥-<-non-neg : ‚àÄ {i j} n ‚Üí i * + n < j * + n ‚Üí i < j
*-cancel ≥-<-non-neg {i} {j} n rewrite *-comm i (+ n) | *-comm j (+ n)
  = *-cancelÀ°-<-non-neg n

------------------------------------------------------------------------
-- Properties of _‚äì_
------------------------------------------------------------------------

------------------------------------------------------------------------
-- Algebraic properties

‚äì-comm : Commutative _‚äì_
‚äì-comm -[1+ m ] -[1+ n ] = cong -[1+_] (‚Ñï‚Çö.‚äî-comm m n)
‚äì-comm -[1+ m ] (+ n)    = refl
‚äì-comm (+ m)    -[1+ n ] = refl
‚äì-comm (+ m)    (+ n)    = cong +_ (‚Ñï‚Çö.‚äì-comm m n)

‚äì-assoc : Associative _‚äì_
‚äì-assoc -[1+ m ] -[1+ n ] -[1+ p ] = cong -[1+_] (‚Ñï‚Çö.‚äî-assoc m n p)
‚äì-assoc -[1+ m ] -[1+ n ] (+ p)    = refl
‚äì-assoc -[1+ m ] (+ n)    -[1+ p ] = refl
‚äì-assoc -[1+ m ] (+ n)    (+ p)    = refl
‚äì-assoc (+ m)    -[1+ n ] -[1+ p ] = refl
‚äì-assoc (+ m)    -[1+ n ] (+ p)    = refl
‚äì-assoc (+ m)    (+ n)    -[1+ p ] = refl
‚äì-assoc (+ m)    (+ n)    (+ p)    = cong +_ (‚Ñï‚Çö.‚äì-assoc m n p)

‚äì-idem : Idempotent _‚äì_
‚äì-idem (+ m)    = cong +_ (‚Ñï‚Çö.‚äì-idem m)
‚äì-idem -[1+ m ] = cong -[1+_] (‚Ñï‚Çö.‚äî-idem m)

‚äì-sel : Selective _‚äì_
‚äì-sel -[1+ m ] -[1+ n ] = Sum.map (cong -[1+_]) (cong -[1+_]) $ ‚Ñï‚Çö.‚äî-sel m n
‚äì-sel -[1+ m ] (+ n)    = inj‚ÇÅ refl
‚äì-sel (+ m)    -[1+ n ] = inj‚ÇÇ refl
‚äì-sel (+ m)    (+ n)    = Sum.map (cong ‚Ñ§.pos) (cong ‚Ñ§.pos) $ ‚Ñï‚Çö.‚äì-sel m n

------------------------------------------------------------------------
-- Other properties

m‚â§n‚áím‚äìn‚â°m : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí m ‚äì n ‚â° m
m‚â§n‚áím‚äìn‚â°m -‚â§+       = refl
m‚â§n‚áím‚äìn‚â°m (-‚â§- n‚â§m) = cong -[1+_] (‚Ñï‚Çö.m‚â§n‚áín‚äîm‚â°n n‚â§m)
m‚â§n‚áím‚äìn‚â°m (+‚â§+ m‚â§n) = cong +_ (‚Ñï‚Çö.m‚â§n‚áím‚äìn‚â°m m‚â§n)

m‚äìn‚â°m‚áím‚â§n : ‚àÄ {m n} ‚Üí m ‚äì n ‚â° m ‚Üí m ‚â§ n
m‚äìn‚â°m‚áím‚â§n { -[1+ m ]} { -[1+ n ]} eq = -‚â§- (‚Ñï‚Çö.n‚äîm‚â°n‚áím‚â§n (-[1+-injective eq))
m‚äìn‚â°m‚áím‚â§n { -[1+ m ]} {+ n}       eq = -‚â§+
m‚äìn‚â°m‚áím‚â§n {+ m}       {+ n}       eq = +‚â§+ (‚Ñï‚Çö.m‚äìn‚â°m‚áím‚â§n (+-injective eq))

m‚â•n‚áím‚äìn‚â°n : ‚àÄ {m n} ‚Üí m ‚â• n ‚Üí m ‚äì n ‚â° n
m‚â•n‚áím‚äìn‚â°n {m} {n} pr rewrite ‚äì-comm m n = m‚â§n‚áím‚äìn‚â°m pr

m‚äìn‚â°n‚áím‚â•n : ‚àÄ {m n} ‚Üí m ‚äì n ‚â° n ‚Üí m ‚â• n
m‚äìn‚â°n‚áím‚â•n {m} {n} eq rewrite ‚äì-comm m n = m‚äìn‚â°m‚áím‚â§n eq

m‚äìn‚â§n : ‚àÄ m n ‚Üí m ‚äì n ‚â§ n
m‚äìn‚â§n -[1+ m ] -[1+ n ] = -‚â§- (‚Ñï‚Çö.n‚â§m‚äîn m n)
m‚äìn‚â§n -[1+ m ] (+ n)    = -‚â§+
m‚äìn‚â§n (+ m)    -[1+ n ] = -‚â§- ‚Ñï‚Çö.‚â§-refl
m‚äìn‚â§n (+ m)    (+ n)    = +‚â§+ (‚Ñï‚Çö.m‚äìn‚â§n m n)

m‚äìn‚â§m : ‚àÄ m n ‚Üí m ‚äì n ‚â§ m
m‚äìn‚â§m m n rewrite ‚äì-comm m n = m‚äìn‚â§n n m

------------------------------------------------------------------------
-- Properties _‚äî_
------------------------------------------------------------------------

------------------------------------------------------------------------
-- Algebraic properties

‚äî-assoc : Associative _‚äî_
‚äî-assoc -[1+ m ] -[1+ n ] -[1+ p ] = cong -[1+_] (‚Ñï‚Çö.‚äì-assoc m n p)
‚äî-assoc -[1+ m ] -[1+ n ] (+ p)    = refl
‚äî-assoc -[1+ m ] (+ n)    -[1+ p ] = refl
‚äî-assoc -[1+ m ] (+ n)    (+ p)    = refl
‚äî-assoc (+ m)    -[1+ n ] -[1+ p ] = refl
‚äî-assoc (+ m)    -[1+ n ] (+ p)    = refl
‚äî-assoc (+ m)    (+ n)    -[1+ p ] = refl
‚äî-assoc (+ m)    (+ n)    (+ p)    = cong +_ (‚Ñï‚Çö.‚äî-assoc m n p)

‚äî-comm : Commutative _‚äî_
‚äî-comm -[1+ m ] -[1+ n ] = cong -[1+_] (‚Ñï‚Çö.‚äì-comm m n)
‚äî-comm -[1+ m ] (+ n)    = refl
‚äî-comm (+ m)    -[1+ n ] = refl
‚äî-comm (+ m)    (+ n)    = cong +_ (‚Ñï‚Çö.‚äî-comm m n)

‚äî-idem : Idempotent _‚äî_
‚äî-idem (+ m)    = cong +_ (‚Ñï‚Çö.‚äî-idem m)
‚äî-idem -[1+ m ] = cong -[1+_] (‚Ñï‚Çö.‚äì-idem m)

‚äî-sel : Selective _‚äî_
‚äî-sel -[1+ m ] -[1+ n ] = Sum.map (cong -[1+_]) (cong -[1+_]) $ ‚Ñï‚Çö.‚äì-sel m n
‚äî-sel -[1+ m ] (+ n)    = inj‚ÇÇ refl
‚äî-sel (+ m)    -[1+ n ] = inj‚ÇÅ refl
‚äî-sel (+ m)    (+ n)    = Sum.map (cong ‚Ñ§.pos) (cong ‚Ñ§.pos) $ ‚Ñï‚Çö.‚äî-sel m n

------------------------------------------------------------------------
-- Other properties

m‚â§n‚áím‚äîn‚â°n : ‚àÄ {m n} ‚Üí m ‚â§ n ‚Üí m ‚äî n ‚â° n
m‚â§n‚áím‚äîn‚â°n -‚â§+       = refl
m‚â§n‚áím‚äîn‚â°n (-‚â§- n‚â§m) = cong -[1+_] (‚Ñï‚Çö.m‚â§n‚áín‚äìm‚â°m n‚â§m)
m‚â§n‚áím‚äîn‚â°n (+‚â§+ m‚â§n) = cong +_ (‚Ñï‚Çö.m‚â§n‚áím‚äîn‚â°n m‚â§n)

m‚äîn‚â°n‚áím‚â§n : ‚àÄ {m n} ‚Üí m ‚äî n ‚â° n ‚Üí m ‚â§ n
m‚äîn‚â°n‚áím‚â§n { -[1+ m ]} { -[1+ n ]} eq = -‚â§- (‚Ñï‚Çö.m‚äìn‚â°n‚áín‚â§m (-[1+-injective eq))
m‚äîn‚â°n‚áím‚â§n { -[1+ m ]} {+ n}       eq = -‚â§+
m‚äîn‚â°n‚áím‚â§n {+ m}       {+ n}       eq = +‚â§+ (‚Ñï‚Çö.n‚äîm‚â°m‚áín‚â§m (+-injective eq))

m‚â•n‚áím‚äîn‚â°m : ‚àÄ {m n} ‚Üí m ‚â• n ‚Üí m ‚äî n ‚â° m
m‚â•n‚áím‚äîn‚â°m {m} {n} pr rewrite ‚äî-comm m n = m‚â§n‚áím‚äîn‚â°n pr

m‚äîn‚â°m‚áím‚â•n : ‚àÄ {m n} ‚Üí m ‚äî n ‚â° m ‚Üí m ‚â• n
m‚äîn‚â°m‚áím‚â•n {m} {n} eq rewrite ‚äî-comm m n = m‚äîn‚â°n‚áím‚â§n eq

m‚â§m‚äîn : ‚àÄ m n ‚Üí m ‚â§ m ‚äî n
m‚â§m‚äîn -[1+ m ] -[1+ n ] = -‚â§- (‚Ñï‚Çö.m‚äìn‚â§m m n)
m‚â§m‚äîn -[1+ m ] (+ n)    = -‚â§+
m‚â§m‚äîn (+ m)    -[1+ n ] = +‚â§+ ‚Ñï‚Çö.‚â§-refl
m‚â§m‚äîn (+ m)    (+ n)    = +‚â§+ (‚Ñï‚Çö.m‚â§m‚äîn m n)

n‚â§m‚äîn : ‚àÄ m n ‚Üí n ‚â§ m ‚äî n
n‚â§m‚äîn m n rewrite ‚äî-comm m n = m‚â§m‚äîn n m

neg-distrib-‚äî-‚äì : ‚àÄ m n ‚Üí - (m ‚äî n) ‚â° - m ‚äì - n
neg-distrib-‚äî-‚äì -[1+ m ] -[1+ n ] = refl
neg-distrib-‚äî-‚äì -[1+ m ] +0       = refl
neg-distrib-‚äî-‚äì -[1+ m ] +[1+ n ] = refl
neg-distrib-‚äî-‚äì +0       -[1+ n ] = refl
neg-distrib-‚äî-‚äì +0       +0       = refl
neg-distrib-‚äî-‚äì +0       +[1+ n ] = refl
neg-distrib-‚äî-‚äì +[1+ m ] -[1+ n ] = refl
neg-distrib-‚äî-‚äì +[1+ m ] +0       = refl
neg-distrib-‚äî-‚äì +[1+ m ] +[1+ n ] = refl

neg-distrib-‚äì-‚äî : ‚àÄ m n ‚Üí - (m ‚äì n) ‚â° - m ‚äî - n
neg-distrib-‚äì-‚äî -[1+ m ] -[1+ n ] = refl
neg-distrib-‚äì-‚äî -[1+ m ] +0       = refl
neg-distrib-‚äì-‚äî -[1+ m ] +[1+ n ] = refl
neg-distrib-‚äì-‚äî +0       -[1+ n ] = refl
neg-distrib-‚äì-‚äî +0       +0       = refl
neg-distrib-‚äì-‚äî +0       +[1+ n ] = refl
neg-distrib-‚äì-‚äî +[1+ m ] -[1+ n ] = refl
neg-distrib-‚äì-‚äî +[1+ m ] +0       = refl
neg-distrib-‚äì-‚äî +[1+ m ] +[1+ n ] = refl


------------------------------------------------------------------------
-- DEPRECATED NAMES
------------------------------------------------------------------------
-- Please use the new names as continuing support for the old names is
-- not guaranteed.

-- Version 0.15

inverseÀ° = +-inverseÀ°
{-# WARNING_ON_USAGE inverseÀ°
"Warning: inverseÀ° was deprecated in v0.15.
Please use +-inverseÀ° instead."
#-}
inverse ≥ = +-inverse ≥
{-# WARNING_ON_USAGE inverse ≥
"Warning: inverse ≥ was deprecated in v0.15.
Please use +-inverse ≥ instead."
#-}
distrib ≥ = *-distrib ≥-+
{-# WARNING_ON_USAGE distrib ≥
"Warning: distrib ≥ was deprecated in v0.15.
Please use *-distrib ≥-+ instead."
#-}
isCommutativeSemiring = +-*-isCommutativeSemiring
{-# WARNING_ON_USAGE isCommutativeSemiring
"Warning: isCommutativeSemiring was deprecated in v0.15.
Please use +-*-isCommutativeSemiring instead."
#-}
commutativeRing = +-*-commutativeRing
{-# WARNING_ON_USAGE commutativeRing
"Warning: commutativeRing was deprecated in v0.15.
Please use +-*-commutativeRing instead."
#-}
*-+-right-mono = *-mono ≥-‚â§-pos
{-# WARNING_ON_USAGE *-+-right-mono
"Warning: *-+-right-mono was deprecated in v0.15.
Please use *-mono ≥-‚â§-pos instead."
#-}
cancel-*-+-right-‚â§ = *-cancel ≥-‚â§-pos
{-# WARNING_ON_USAGE cancel-*-+-right-‚â§
"Warning: cancel-*-+-right-‚â§ was deprecated in v0.15.
Please use *-cancel ≥-‚â§-pos instead."
#-}
cancel-*-right = *-cancel ≥-‚â°
{-# WARNING_ON_USAGE cancel-*-right
"Warning: cancel-*-right was deprecated in v0.15.
Please use *-cancel ≥-‚â° instead."
#-}
doubleNeg = neg-involutive
{-# WARNING_ON_USAGE doubleNeg
"Warning: doubleNeg was deprecated in v0.15.
Please use neg-involutive instead."
#-}
-‚Äøinvolutive = neg-involutive
{-# WARNING_ON_USAGE -‚Äøinvolutive
"Warning: -‚Äøinvolutive was deprecated in v0.15.
Please use neg-involutive instead."
#-}
+-‚äñ-left-cancel = +-cancelÀ°-‚äñ
{-# WARNING_ON_USAGE +-‚äñ-left-cancel
"Warning: +-‚äñ-left-cancel was deprecated in v0.15.
Please use +-cancelÀ°-‚äñ instead."
#-}

-- Version 1.0

‚â∞‚Üí> = ‚â∞‚áí>
{-# WARNING_ON_USAGE ‚â∞‚Üí>
"Warning: ‚â∞‚Üí> was deprecated in v1.0.
Please use ‚â∞‚áí> instead."
#-}
‚â§-irrelevance = ‚â§-irrelevant
{-# WARNING_ON_USAGE ‚â§-irrelevance
"Warning: ‚â§-irrelevance was deprecated in v1.0.
Please use ‚â§-irrelevant instead."
#-}
<-irrelevance = <-irrelevant
{-# WARNING_ON_USAGE <-irrelevance
"Warning: <-irrelevance was deprecated in v1.0.
Please use <-irrelevant instead."
#-}


-- Version 1.1

-- Not all of the below have deprecation warnings attached as they are
-- reused by other deprecated results.

-<‚Ä≤+ : ‚àÄ {m n} ‚Üí -[1+ m ] <‚Ä≤ + n
-<‚Ä≤+ {0}     = +‚â§+ z‚â§n
-<‚Ä≤+ {suc _} = -‚â§+
{-# WARNING_ON_USAGE -<‚Ä≤+
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-irrefl : Irreflexive _‚â°_ _<‚Ä≤_
<‚Ä≤-irrefl { + n}          refl (+‚â§+ 1+n‚â§n) = ‚Ñï‚Çö.<-irrefl refl 1+n‚â§n
<‚Ä≤-irrefl { -[1+ suc n ]} refl (-‚â§- 1+n‚â§n) = ‚Ñï‚Çö.<-irrefl refl 1+n‚â§n
{-# WARNING_ON_USAGE <‚Ä≤-irrefl
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
>‚Ä≤-irrefl : Irreflexive _‚â°_ _>‚Ä≤_
>‚Ä≤-irrefl = <‚Ä≤-irrefl ‚àò sym
{-# WARNING_ON_USAGE >‚Ä≤-irrefl
"Warning: _>‚Ä≤_ was deprecated in v1.1.
Please use _>_ instead."
#-}
<‚Ä≤-asym : Asymmetric _<‚Ä≤_
<‚Ä≤-asym {+ n}           {+ m}           (+‚â§+ n<m) (+‚â§+ m<n) = ‚Ñï‚Çö.<-asym n<m m<n
<‚Ä≤-asym { -[1+ suc n ]} { -[1+ suc m ]} (-‚â§- n<m) (-‚â§- m<n) = ‚Ñï‚Çö.<-asym n<m m<n
{-# WARNING_ON_USAGE <‚Ä≤-asym
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
‚â§-<‚Ä≤-trans : Trans _‚â§_ _<‚Ä≤_ _<‚Ä≤_
‚â§-<‚Ä≤-trans { -[1+ m ]} {+ n} {+ p} -‚â§+ (+‚â§+ 1+n‚â§p) = -<‚Ä≤+ {m} {p}
‚â§-<‚Ä≤-trans {+ m} {+ n} {+ p} (+‚â§+ m‚â§n) (+‚â§+ 1+n‚â§p) = +‚â§+ (‚Ñï‚Çö.‚â§-trans (‚Ñï.s‚â§s m‚â§n) 1+n‚â§p)
‚â§-<‚Ä≤-trans { -[1+ m ]} { -[1+ n ]} (-‚â§- n‚â§m) n<p = ‚â§-trans (‚äñ-mono ≥-‚â•-‚â§ 0 n‚â§m) n<p
{-# WARNING_ON_USAGE ‚â§-<‚Ä≤-trans
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-‚â§-trans : Trans _<‚Ä≤_ _‚â§_ _<‚Ä≤_
<‚Ä≤-‚â§-trans = ‚â§-trans
{-# WARNING_ON_USAGE <‚Ä≤-‚â§-trans
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤‚áí‚â§ : ‚àÄ {m n} ‚Üí m <‚Ä≤ n ‚Üí m ‚â§ n
<‚Ä≤‚áí‚â§ m<n =  ‚â§-trans (n‚â§1+n _) m<n
{-# WARNING_ON_USAGE <‚Ä≤‚áí‚â§
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-trans : Transitive _<‚Ä≤_
<‚Ä≤-trans {m} {n} {p} m<n n<p = ‚â§-<‚Ä≤-trans {m} {n} {p} (<‚Ä≤‚áí‚â§ m<n) n<p
{-# WARNING_ON_USAGE <‚Ä≤-trans
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-cmp : Trichotomous _‚â°_ _<‚Ä≤_
<‚Ä≤-cmp (+ m) (+ n) with ‚Ñï‚Çö.<-cmp m n
... | tri< m<n m‚â¢n m‚âØn =
  tri< (+‚â§+ m<n)         (m‚â¢n ‚àò +-injective) (m‚âØn ‚àò drop‚Äø+‚â§+)
... | tri‚âà m‚âÆn m‚â°n m‚âØn =
  tri‚âà (m‚âÆn ‚àò drop‚Äø+‚â§+) (cong (+_) m‚â°n)     (m‚âØn ‚àò drop‚Äø+‚â§+)
... | tri> m‚âÆn m‚â¢n m>n =
  tri> (m‚âÆn ‚àò drop‚Äø+‚â§+) (m‚â¢n ‚àò +-injective) (+‚â§+ m>n)
<‚Ä≤-cmp (+_ m)       -[1+ 0 ]     = tri> (Œª())     (Œª()) (+‚â§+ z‚â§n)
<‚Ä≤-cmp (+_ m)       -[1+ suc n ] = tri> (Œª())     (Œª()) -‚â§+
<‚Ä≤-cmp -[1+ 0 ]     (+ n)        = tri< (+‚â§+ z‚â§n) (Œª()) (Œª())
<‚Ä≤-cmp -[1+ suc m ] (+ n)        = tri< -‚â§+       (Œª()) (Œª())
<‚Ä≤-cmp -[1+ 0 ]     -[1+ 0 ]     = tri‚âà (Œª())     refl  (Œª())
<‚Ä≤-cmp -[1+ 0 ]     -[1+ suc n ] = tri> (Œª())     (Œª()) (-‚â§- z‚â§n)
<‚Ä≤-cmp -[1+ suc m ] -[1+ 0 ]     = tri< (-‚â§- z‚â§n) (Œª()) (Œª())
<‚Ä≤-cmp -[1+ suc m ] -[1+ suc n ] with ‚Ñï‚Çö.<-cmp (suc m) (suc n)
... | tri< m<n m‚â¢n m‚âØn =
  tri> (m‚âØn ‚àò s‚â§s ‚àò drop‚Äø-‚â§-) (m‚â¢n ‚àò -[1+-injective) (-‚â§- (‚Ñï‚Çö.‚â§-pred m<n))
... | tri‚âà m‚âÆn m‚â°n m‚âØn =
  tri‚âà (m‚âØn ‚àò ‚Ñï.s‚â§s ‚àò drop‚Äø-‚â§-) (cong -[1+_] m‚â°n) (m‚âÆn ‚àò ‚Ñï.s‚â§s ‚àò drop‚Äø-‚â§-)
... | tri> m‚âÆn m‚â¢n m>n =
  tri< (-‚â§- (‚Ñï‚Çö.‚â§-pred m>n)) (m‚â¢n ‚àò -[1+-injective) (m‚âÆn ‚àò s‚â§s ‚àò drop‚Äø-‚â§-)
{-# WARNING_ON_USAGE <‚Ä≤-cmp
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-isStrictPartialOrder : IsStrictPartialOrder _‚â°_ _<‚Ä≤_
<‚Ä≤-isStrictPartialOrder = record
  { isEquivalence = isEquivalence
  ; irrefl        = <‚Ä≤-irrefl
  ; trans         = Œª {i} ‚Üí <‚Ä≤-trans {i}
  ; <-resp-‚âà      = (Œª {x} ‚Üí subst (x <‚Ä≤_)) , subst (_<‚Ä≤ _)
  }
{-# WARNING_ON_USAGE <‚Ä≤-isStrictPartialOrder
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-strictPartialOrder : StrictPartialOrder _ _ _
<‚Ä≤-strictPartialOrder = record
  { isStrictPartialOrder = <‚Ä≤-isStrictPartialOrder
  }
{-# WARNING_ON_USAGE <‚Ä≤-strictPartialOrder
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-isStrictTotalOrder : IsStrictTotalOrder _‚â°_ _<‚Ä≤_
<‚Ä≤-isStrictTotalOrder = record
  { isEquivalence = isEquivalence
  ; trans         = Œª {i} ‚Üí <‚Ä≤-trans {i}
  ; compare       = <‚Ä≤-cmp
  }
{-# WARNING_ON_USAGE <‚Ä≤-isStrictTotalOrder
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-strictTotalOrder : StrictTotalOrder _ _ _
<‚Ä≤-strictTotalOrder = record
  { isStrictTotalOrder = <‚Ä≤-isStrictTotalOrder
  }
{-# WARNING_ON_USAGE <‚Ä≤-strictTotalOrder
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
n‚âÆ‚Ä≤n : ‚àÄ {n} ‚Üí n ‚âÆ‚Ä≤ n
n‚âÆ‚Ä≤n {+ n}           (+‚â§+ n<n) =  contradiction n<n ‚Ñï‚Çö.1+n‚â∞n
n‚âÆ‚Ä≤n { -[1+ suc n ]} (-‚â§- n<n) =  contradiction n<n ‚Ñï‚Çö.1+n‚â∞n
{-# WARNING_ON_USAGE n‚âÆ‚Ä≤n
"Warning: n‚âÆ‚Ä≤n was deprecated in v1.1.
Please use n‚âÆn instead."
#-}
>‚Ä≤‚áí‚â∞‚Ä≤ : ‚àÄ {x y} ‚Üí x >‚Ä≤ y ‚Üí x ‚â∞ y
>‚Ä≤‚áí‚â∞‚Ä≤ {y = y} x>y x‚â§y = contradiction (<‚Ä≤-‚â§-trans {i = y} x>y x‚â§y) n‚âÆ‚Ä≤n
{-# WARNING_ON_USAGE >‚Ä≤‚áí‚â∞‚Ä≤
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
‚â∞‚áí>‚Ä≤ : ‚àÄ {x y} ‚Üí x ‚â∞ y ‚Üí x >‚Ä≤ y
‚â∞‚áí>‚Ä≤ {+ m}           {+ n}           m‚â∞n =  +‚â§+ (‚Ñï‚Çö.‚â∞‚áí> (m‚â∞n ‚àò +‚â§+))
‚â∞‚áí>‚Ä≤ {+ m}           { -[1+ n ]}     _   =  -<‚Ä≤+ {n} {m}
‚â∞‚áí>‚Ä≤ { -[1+ m ]}     {+ _}           m‚â∞n =  contradiction -‚â§+ m‚â∞n
‚â∞‚áí>‚Ä≤ { -[1+ 0 ]}     { -[1+ 0 ]}     m‚â∞n =  contradiction ‚â§-refl m‚â∞n
‚â∞‚áí>‚Ä≤ { -[1+ suc _ ]} { -[1+ 0 ]}     m‚â∞n =  contradiction (-‚â§- z‚â§n) m‚â∞n
‚â∞‚áí>‚Ä≤ { -[1+ m ]}     { -[1+ suc n ]} m‚â∞n with m ‚Ñï.‚â§? n
... | yes m‚â§n  = -‚â§- m‚â§n
... | no  m‚â∞n' = contradiction (-‚â§- (‚Ñï‚Çö.‚â∞‚áí> m‚â∞n')) m‚â∞n
{-# WARNING_ON_USAGE ‚â∞‚áí>‚Ä≤
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
<‚Ä≤-irrelevant : Irrelevant _<‚Ä≤_
<‚Ä≤-irrelevant = ‚â§-irrelevant
{-# WARNING_ON_USAGE <‚Ä≤-irrelevant
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
+-monoÀ°-<‚Ä≤ : ‚àÄ n ‚Üí (_+ n) Preserves _<‚Ä≤_ ‚ü∂ _<‚Ä≤_
+-monoÀ°-<‚Ä≤ n {i} {j} i<j
  rewrite sym (+-assoc (+ 1) i n)
          = +-monoÀ°-‚â§ n i<j
{-# WARNING_ON_USAGE +-monoÀ°-<‚Ä≤
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
+-mono ≥-<‚Ä≤ : ‚àÄ n ‚Üí (_+_ n) Preserves _<‚Ä≤_ ‚ü∂ _<‚Ä≤_
+-mono ≥-<‚Ä≤ n {i} {j} i<j
  rewrite +-comm n i
        | +-comm n j
        = +-monoÀ°-<‚Ä≤ n {i} {j} i<j
{-# WARNING_ON_USAGE +-mono ≥-<‚Ä≤
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
+-mono-<‚Ä≤ : _+_ Preserves‚ÇÇ _<‚Ä≤_ ‚ü∂ _<‚Ä≤_ ‚ü∂ _<‚Ä≤_
+-mono-<‚Ä≤ {m} {n} {i} {j} m<n i<j = begin
  suc‚Ñ§ (m + i) ‚â§‚ü® suc-mono {m + i} (<‚Ä≤‚áí‚â§ (+-monoÀ°-<‚Ä≤ i {m} {n} m<n)) ‚ü©
  suc‚Ñ§ (n + i) ‚â§‚ü® +-mono ≥-<‚Ä≤ n i<j ‚ü©
  n + j        ‚àé
  where open ‚â§-Reasoning
{-# WARNING_ON_USAGE +-mono-<‚Ä≤
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
+-mono-‚â§-<‚Ä≤ : _+_ Preserves‚ÇÇ _‚â§_ ‚ü∂ _<‚Ä≤_ ‚ü∂ _<‚Ä≤_
+-mono-‚â§-<‚Ä≤ {m} {n} {i} {j} m‚â§n i<j = ‚â§-<‚Ä≤-trans (+-monoÀ°-‚â§ i m‚â§n) (+-mono ≥-<‚Ä≤ n i<j)
{-# WARNING_ON_USAGE +-mono-‚â§-<‚Ä≤
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
+-mono-<‚Ä≤-‚â§ : _+_ Preserves‚ÇÇ _<‚Ä≤_ ‚ü∂ _‚â§_ ‚ü∂ _<‚Ä≤_
+-mono-<‚Ä≤-‚â§ {m} {n} {i} {j} m<n i‚â§j =
  <‚Ä≤-‚â§-trans {m + i} {n + i} {n + j} (+-monoÀ°-<‚Ä≤ i {m} {n} m<n) (+-mono ≥-‚â§ n i‚â§j)
{-# WARNING_ON_USAGE +-mono-<‚Ä≤-‚â§
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
m‚â§pred[n]‚áím<‚Ä≤n : ‚àÄ {m n} ‚Üí m ‚â§ pred n ‚Üí m <‚Ä≤ n
m‚â§pred[n]‚áím<‚Ä≤n {m} {n} m‚â§predn = begin
  suc‚Ñ§ m               ‚â§‚ü® +-mono ≥-‚â§ (+ 1) m‚â§predn ‚ü©
  + 1 + pred n         ‚â°‚ü® sym (+-assoc (+ 1) -[1+ 0 ] n) ‚ü©
  (+ 1 + -[1+ 0 ]) + n ‚â°‚ü® cong (_+ n) (+-inverse ≥ (+ 1)) ‚ü©
  + 0 + n              ‚â°‚ü® +-identityÀ° n ‚ü©
  n                    ‚àé
  where open ‚â§-Reasoning
{-# WARNING_ON_USAGE m‚â§pred[n]‚áím<‚Ä≤n
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}
m<‚Ä≤n‚áím‚â§pred[n] : ‚àÄ {m n} ‚Üí m <‚Ä≤ n ‚Üí m ‚â§ pred n
m<‚Ä≤n‚áím‚â§pred[n] {m} {n} m<n = begin
  m             ‚â°‚ü® sym (pred-suc m) ‚ü©
  pred (suc‚Ñ§ m) ‚â§‚ü® pred-mono m<n ‚ü©
  pred n        ‚àé
  where open ‚â§-Reasoning
{-# WARNING_ON_USAGE m<‚Ä≤n‚áím‚â§pred[n]
"Warning: _<‚Ä≤_ was deprecated in v1.1.
Please use _<_ instead."
#-}

-- Version 1.2

[1+m]*n‚â°n+m*n = suc-*
{-# WARNING_ON_USAGE [1+m]*n‚â°n+m*n
"Warning: [1+m]*n‚â°n+m*n was deprecated in v1.1.
Please use suc-* instead."
#-}
