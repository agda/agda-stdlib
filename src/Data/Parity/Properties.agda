------------------------------------------------------------------------
-- The Agda standard library
--
-- Some properties about parities
------------------------------------------------------------------------

{-# OPTIONS --cubical-compatible --safe #-}

module Data.Parity.Properties where

open import Algebra.Bundles
open import Data.Nat.Base as ‚Ñï using (zero; suc; parity)
open import Data.Parity.Base as ‚Ñô using (Parity; 0‚Ñô; 1‚Ñô; _‚Åª¬π; toSign; fromSign)
open import Data.Product.Base using (_,_)
import Data.Sign.Base as ùïä
open import Function.Base using (_$_; id)
open import Function.Definitions
open import Function.Consequences.Propositional
  using (inverse ≥‚áíinjective; inverseÀ°‚áísurjective)
open import Level using (0‚Ñì)
open import Relation.Binary
  using (Decidable; DecidableEquality; Setoid; DecSetoid; IsDecEquivalence)
open import Relation.Binary.PropositionalEquality.Core
  using (_‚â°_; _‚â¢_; refl; sym; cong; cong‚ÇÇ)
open import Relation.Binary.PropositionalEquality.Properties
  using (module ‚â°-Reasoning; setoid; isEquivalence; decSetoid; isDecEquivalence)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Negation.Core using (contradiction)

open import Algebra.Structures {A = Parity} _‚â°_
open import Algebra.Definitions {A = Parity} _‚â°_
open import Algebra.Consequences.Propositional
  using (selfInverse‚áíinvolutive; selfInverse‚áíinjective; comm‚àßdistrÀ°‚áídistr ≥)
open import Algebra.Morphism.Structures

------------------------------------------------------------------------
-- Equality

infix 4 _‚âü_

_‚âü_ : DecidableEquality Parity
1‚Ñô ‚âü 1‚Ñô = yes refl
1‚Ñô ‚âü 0‚Ñô = no Œª()
0‚Ñô ‚âü 1‚Ñô = no Œª()
0‚Ñô ‚âü 0‚Ñô = yes refl

‚â°-setoid : Setoid 0‚Ñì 0‚Ñì
‚â°-setoid = setoid Parity

‚â°-decSetoid : DecSetoid 0‚Ñì 0‚Ñì
‚â°-decSetoid = decSetoid _‚âü_

‚â°-isDecEquivalence : IsDecEquivalence _‚â°_
‚â°-isDecEquivalence = isDecEquivalence _‚âü_

------------------------------------------------------------------------
-- _‚Åª¬π

-- Algebraic properties of _‚Åª¬π

‚Åª¬π-selfInverse : SelfInverse _‚Åª¬π
‚Åª¬π-selfInverse { 1‚Ñô } { 0‚Ñô } refl = refl
‚Åª¬π-selfInverse { 0‚Ñô } { 1‚Ñô } refl = refl

‚Åª¬π-involutive : Involutive _‚Åª¬π
‚Åª¬π-involutive = selfInverse‚áíinvolutive ‚Åª¬π-selfInverse

‚Åª¬π-injective : Injective _‚â°_ _‚â°_ _‚Åª¬π
‚Åª¬π-injective = selfInverse‚áíinjective ‚Åª¬π-selfInverse

------------------------------------------------------------------------
-- other properties of _‚Åª¬π

p‚â¢p‚Åª¬π : ‚àÄ p ‚Üí p ‚â¢ p ‚Åª¬π
p‚â¢p‚Åª¬π 1‚Ñô ()
p‚â¢p‚Åª¬π 0‚Ñô ()

------------------------------------------------------------------------
-- ‚Åª¬π and _+_

p+p‚Åª¬π‚â°1‚Ñô : ‚àÄ p ‚Üí p ‚Ñô.+ p ‚Åª¬π ‚â° 1‚Ñô
p+p‚Åª¬π‚â°1‚Ñô 0‚Ñô = refl
p+p‚Åª¬π‚â°1‚Ñô 1‚Ñô = refl

p‚Åª¬π+p‚â°1‚Ñô : ‚àÄ p ‚Üí p ‚Åª¬π ‚Ñô.+ p ‚â° 1‚Ñô
p‚Åª¬π+p‚â°1‚Ñô 0‚Ñô = refl
p‚Åª¬π+p‚â°1‚Ñô 1‚Ñô = refl

------------------------------------------------------------------------
-- ‚Åª¬π and _*_

p*p‚Åª¬π‚â°0‚Ñô : ‚àÄ p ‚Üí p ‚Ñô.* p ‚Åª¬π ‚â° 0‚Ñô
p*p‚Åª¬π‚â°0‚Ñô 0‚Ñô = refl
p*p‚Åª¬π‚â°0‚Ñô 1‚Ñô = refl

p‚Åª¬π*p‚â°0‚Ñô : ‚àÄ p ‚Üí p ‚Åª¬π ‚Ñô.* p ‚â° 0‚Ñô
p‚Åª¬π*p‚â°0‚Ñô 0‚Ñô = refl
p‚Åª¬π*p‚â°0‚Ñô 1‚Ñô = refl

------------------------------------------------------------------------
-- _+_

-- Algebraic properties of _+_

p+p‚â°0‚Ñô : ‚àÄ p ‚Üí p ‚Ñô.+ p ‚â° 0‚Ñô
p+p‚â°0‚Ñô 0‚Ñô = refl
p+p‚â°0‚Ñô 1‚Ñô = refl

+-identityÀ° : LeftIdentity 0‚Ñô ‚Ñô._+_
+-identityÀ° _ = refl

+-identity ≥ : RightIdentity 0‚Ñô ‚Ñô._+_
+-identity ≥ 1‚Ñô = refl
+-identity ≥ 0‚Ñô = refl

+-identity : Identity 0‚Ñô ‚Ñô._+_
+-identity = +-identityÀ°  , +-identity ≥

+-comm : Commutative ‚Ñô._+_
+-comm 0‚Ñô 0‚Ñô = refl
+-comm 0‚Ñô 1‚Ñô = refl
+-comm 1‚Ñô 0‚Ñô = refl
+-comm 1‚Ñô 1‚Ñô = refl

+-assoc : Associative ‚Ñô._+_
+-assoc 0‚Ñô 0‚Ñô _ = refl
+-assoc 0‚Ñô 1‚Ñô _ = refl
+-assoc 1‚Ñô 0‚Ñô _ = refl
+-assoc 1‚Ñô 1‚Ñô 0‚Ñô = refl
+-assoc 1‚Ñô 1‚Ñô 1‚Ñô = refl

+-cancel ≥-‚â° : RightCancellative ‚Ñô._+_
+-cancel ≥-‚â° _ 1‚Ñô 1‚Ñô _  = refl
+-cancel ≥-‚â° _ 1‚Ñô 0‚Ñô eq = contradiction (sym eq) (p‚â¢p‚Åª¬π _)
+-cancel ≥-‚â° _ 0‚Ñô 1‚Ñô eq = contradiction eq (p‚â¢p‚Åª¬π _)
+-cancel ≥-‚â° _ 0‚Ñô 0‚Ñô _  = refl

+-cancelÀ°-‚â° : LeftCancellative ‚Ñô._+_
+-cancelÀ°-‚â° 1‚Ñô _ _ eq = ‚Åª¬π-injective eq
+-cancelÀ°-‚â° 0‚Ñô _ _ eq = eq

+-cancel-‚â° : Cancellative ‚Ñô._+_
+-cancel-‚â° = +-cancelÀ°-‚â° , +-cancel ≥-‚â°

+-inverse : Inverse 0‚Ñô id ‚Ñô._+_
+-inverse = p+p‚â°0‚Ñô , p+p‚â°0‚Ñô

------------------------------------------------------------------------
-- Bundles

+-isMagma : IsMagma ‚Ñô._+_
+-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ ‚Ñô._+_
  }

+-magma : Magma 0‚Ñì 0‚Ñì
+-magma = record
  { isMagma = +-isMagma
  }

+-isSemigroup : IsSemigroup ‚Ñô._+_
+-isSemigroup = record
  { isMagma = +-isMagma
  ; assoc   = +-assoc
  }

+-semigroup : Semigroup 0‚Ñì 0‚Ñì
+-semigroup = record
  { isSemigroup = +-isSemigroup
  }

+-isCommutativeSemigroup : IsCommutativeSemigroup ‚Ñô._+_
+-isCommutativeSemigroup = record
  { isSemigroup = +-isSemigroup
  ; comm = +-comm
  }

+-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
+-commutativeSemigroup = record
  { isCommutativeSemigroup = +-isCommutativeSemigroup
  }

+-0-isMonoid : IsMonoid ‚Ñô._+_ 0‚Ñô
+-0-isMonoid = record
  { isSemigroup = +-isSemigroup
  ; identity    = +-identity
  }

+-0-monoid : Monoid 0‚Ñì 0‚Ñì
+-0-monoid = record
  { isMonoid = +-0-isMonoid
  }

+-0-isCommutativeMonoid : IsCommutativeMonoid ‚Ñô._+_ 0‚Ñô
+-0-isCommutativeMonoid = record
   { isMonoid = +-0-isMonoid
   ; comm = +-comm
   }

+-0-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
+-0-commutativeMonoid = record
  { isCommutativeMonoid = +-0-isCommutativeMonoid
  }

+-0-isGroup : IsGroup ‚Ñô._+_ 0‚Ñô id
+-0-isGroup = record
  { isMonoid = +-0-isMonoid
  ; inverse = +-inverse
  ; ‚Åª¬π-cong = id
  }

+-0-group : Group 0‚Ñì 0‚Ñì
+-0-group = record
  { isGroup = +-0-isGroup
  }

+-0-isAbelianGroup : IsAbelianGroup ‚Ñô._+_ 0‚Ñô id
+-0-isAbelianGroup = record
  { isGroup = +-0-isGroup
  ; comm = +-comm
  }

+-0-abelianGroup : AbelianGroup 0‚Ñì 0‚Ñì
+-0-abelianGroup = record
  { isAbelianGroup = +-0-isAbelianGroup
  }

------------------------------------------------------------------------
-- _*_

-- Algebraic properties of _*_

*-idem : Idempotent ‚Ñô._*_
*-idem 0‚Ñô = refl
*-idem 1‚Ñô = refl

*-comm : Commutative ‚Ñô._*_
*-comm 0‚Ñô 0‚Ñô = refl
*-comm 0‚Ñô 1‚Ñô = refl
*-comm 1‚Ñô 0‚Ñô = refl
*-comm 1‚Ñô 1‚Ñô = refl

*-assoc : Associative ‚Ñô._*_
*-assoc 0‚Ñô 0‚Ñô _ = refl
*-assoc 0‚Ñô 1‚Ñô _ = refl
*-assoc 1‚Ñô 0‚Ñô _ = refl
*-assoc 1‚Ñô 1‚Ñô 0‚Ñô = refl
*-assoc 1‚Ñô 1‚Ñô 1‚Ñô = refl

*-distribÀ°-+ : ‚Ñô._*_ DistributesOverÀ° ‚Ñô._+_
*-distribÀ°-+ 0‚Ñô q r = refl
*-distribÀ°-+ 1‚Ñô 0‚Ñô 0‚Ñô = refl
*-distribÀ°-+ 1‚Ñô 0‚Ñô 1‚Ñô = refl
*-distribÀ°-+ 1‚Ñô 1‚Ñô 0‚Ñô = refl
*-distribÀ°-+ 1‚Ñô 1‚Ñô 1‚Ñô = refl

*-distrib ≥-+ : ‚Ñô._*_ DistributesOver ≥ ‚Ñô._+_
*-distrib ≥-+ = comm‚àßdistrÀ°‚áídistr ≥ *-comm *-distribÀ°-+

*-distrib-+ : ‚Ñô._*_ DistributesOver ‚Ñô._+_
*-distrib-+ = *-distribÀ°-+ , *-distrib ≥-+

*-zeroÀ° : LeftZero 0‚Ñô ‚Ñô._*_
*-zeroÀ° p = refl

*-zero ≥ : RightZero 0‚Ñô ‚Ñô._*_
*-zero ≥ p = *-comm p 0‚Ñô

*-zero : Zero 0‚Ñô ‚Ñô._*_
*-zero = *-zeroÀ° , *-zero ≥

*-identityÀ° : LeftIdentity 1‚Ñô ‚Ñô._*_
*-identityÀ° _ = refl

*-identity ≥ : RightIdentity 1‚Ñô ‚Ñô._*_
*-identity ≥ 1‚Ñô = refl
*-identity ≥ 0‚Ñô = refl

*-identity : Identity 1‚Ñô ‚Ñô._*_
*-identity = *-identityÀ°  , *-identity ≥

------------------------------------------------------------------------
-- Structures and Bundles

*-isMagma : IsMagma ‚Ñô._*_
*-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ ‚Ñô._*_
  }

*-magma : Magma 0‚Ñì 0‚Ñì
*-magma = record
  { isMagma = *-isMagma
  }

*-isSemigroup : IsSemigroup ‚Ñô._*_
*-isSemigroup = record
  { isMagma = *-isMagma
  ; assoc   = *-assoc
  }

*-semigroup : Semigroup 0‚Ñì 0‚Ñì
*-semigroup = record
  { isSemigroup = *-isSemigroup
  }

*-isCommutativeSemigroup : IsCommutativeSemigroup ‚Ñô._*_
*-isCommutativeSemigroup = record
  { isSemigroup = *-isSemigroup
  ; comm = *-comm
  }

*-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
*-commutativeSemigroup = record
  { isCommutativeSemigroup = *-isCommutativeSemigroup
  }

*-1-isMonoid : IsMonoid ‚Ñô._*_ 1‚Ñô
*-1-isMonoid = record
  { isSemigroup = *-isSemigroup
  ; identity    = *-identity
  }

*-1-monoid : Monoid 0‚Ñì 0‚Ñì
*-1-monoid = record
  { isMonoid = *-1-isMonoid
  }

*-1-isCommutativeMonoid : IsCommutativeMonoid ‚Ñô._*_ 1‚Ñô
*-1-isCommutativeMonoid = record
   { isMonoid = *-1-isMonoid
   ; comm = *-comm
   }

*-1-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
*-1-commutativeMonoid = record
  { isCommutativeMonoid = *-1-isCommutativeMonoid
  }

+-*-isSemiring : IsSemiring ‚Ñô._+_ ‚Ñô._*_ 0‚Ñô 1‚Ñô
+-*-isSemiring = record
  { isSemiringWithoutAnnihilatingZero = record
    { +-isCommutativeMonoid = +-0-isCommutativeMonoid
    ; *-cong = cong‚ÇÇ ‚Ñô._*_
    ; *-assoc = *-assoc
    ; *-identity = *-identity
    ; distrib = *-distrib-+
    }
  ; zero = *-zero
  }

+-*-semiring : Semiring 0‚Ñì 0‚Ñì
+-*-semiring = record
  { isSemiring = +-*-isSemiring
  }

+-*-isCommutativeSemiring : IsCommutativeSemiring ‚Ñô._+_ ‚Ñô._*_ 0‚Ñô 1‚Ñô
+-*-isCommutativeSemiring = record
  { isSemiring = +-*-isSemiring
  ; *-comm = *-comm
  }

+-*-commutativeSemiring : CommutativeSemiring 0‚Ñì 0‚Ñì
+-*-commutativeSemiring = record
  { isCommutativeSemiring = +-*-isCommutativeSemiring
  }

+-*-isRing : IsRing ‚Ñô._+_ ‚Ñô._*_ id 0‚Ñô 1‚Ñô
+-*-isRing = record
  { +-isAbelianGroup = +-0-isAbelianGroup
  ; *-cong           = cong‚ÇÇ ‚Ñô._*_
  ; *-assoc          = *-assoc
  ; *-identity       = *-identity
  ; distrib          = *-distrib-+
  }

+-*-ring : Ring 0‚Ñì 0‚Ñì
+-*-ring = record
  { isRing = +-*-isRing
  }

+-*-isCommutativeRing : IsCommutativeRing ‚Ñô._+_ ‚Ñô._*_ id 0‚Ñô 1‚Ñô
+-*-isCommutativeRing = record
  { isRing = +-*-isRing
  ; *-comm = *-comm
  }

+-*-commutativeRing : CommutativeRing 0‚Ñì 0‚Ñì
+-*-commutativeRing = record
  { isCommutativeRing = +-*-isCommutativeRing
  }

------------------------------------------------------------------------
-- relating Parity and Sign

+-homo-* : ‚àÄ p q ‚Üí toSign (p ‚Ñô.+ q) ‚â° (toSign p) ùïä.* (toSign q)
+-homo-* 0‚Ñô 0‚Ñô = refl
+-homo-* 0‚Ñô 1‚Ñô = refl
+-homo-* 1‚Ñô 0‚Ñô = refl
+-homo-* 1‚Ñô 1‚Ñô = refl

‚Åª¬π-homo-opposite : ‚àÄ p ‚Üí toSign (p ‚Åª¬π) ‚â° ùïä.opposite (toSign p)
‚Åª¬π-homo-opposite 0‚Ñô = refl
‚Åª¬π-homo-opposite 1‚Ñô = refl

toSign-inverse ≥ : Inverse ≥ _‚â°_ _‚â°_ toSign fromSign
toSign-inverse ≥ {0‚Ñô} refl = refl
toSign-inverse ≥ {1‚Ñô} refl = refl

toSign-inverseÀ° : InverseÀ° _‚â°_ _‚â°_ toSign fromSign
toSign-inverseÀ° { ùïä.+ } refl = refl
toSign-inverseÀ° { ùïä.- } refl = refl

toSign-injective : Injective _‚â°_ _‚â°_ toSign
toSign-injective = inverse ≥‚áíinjective toSign toSign-inverse ≥

toSign-surjective : Surjective _‚â°_ _‚â°_ toSign
toSign-surjective = inverseÀ°‚áísurjective toSign-inverseÀ°

toSign-isMagmaHomomorphism : IsMagmaHomomorphism ‚Ñô.+-rawMagma ùïä.*-rawMagma toSign
toSign-isMagmaHomomorphism = record
  { isRelHomomorphism = record
    { cong = cong toSign }
  ; homo = +-homo-*
  }

toSign-isMagmaMonomorphism : IsMagmaMonomorphism ‚Ñô.+-rawMagma ùïä.*-rawMagma toSign
toSign-isMagmaMonomorphism = record
  { isMagmaHomomorphism = toSign-isMagmaHomomorphism
  ; injective = toSign-injective
  }

toSign-isMagmaIsomorphism : IsMagmaIsomorphism ‚Ñô.+-rawMagma ùïä.*-rawMagma toSign
toSign-isMagmaIsomorphism = record
  { isMagmaMonomorphism = toSign-isMagmaMonomorphism
  ; surjective = toSign-surjective
  }

toSign-isMonoidHomomorphism : IsMonoidHomomorphism ‚Ñô.+-0-rawMonoid ùïä.*-1-rawMonoid toSign
toSign-isMonoidHomomorphism = record
  { isMagmaHomomorphism = toSign-isMagmaHomomorphism
  ; Œµ-homo = refl
  }

toSign-isMonoidMonomorphism : IsMonoidMonomorphism ‚Ñô.+-0-rawMonoid ùïä.*-1-rawMonoid toSign
toSign-isMonoidMonomorphism = record
  { isMonoidHomomorphism = toSign-isMonoidHomomorphism
  ; injective = toSign-injective
  }

toSign-isMonoidIsomorphism : IsMonoidIsomorphism ‚Ñô.+-0-rawMonoid ùïä.*-1-rawMonoid toSign
toSign-isMonoidIsomorphism = record
  { isMonoidMonomorphism = toSign-isMonoidMonomorphism
  ; surjective = toSign-surjective
  }

toSign-isGroupHomomorphism : IsGroupHomomorphism ‚Ñô.+-0-rawGroup ùïä.*-1-rawGroup toSign
toSign-isGroupHomomorphism = record
  { isMonoidHomomorphism = toSign-isMonoidHomomorphism
  ; ‚Åª¬π-homo = ‚Åª¬π-homo-opposite
  }

toSign-isGroupMonomorphism : IsGroupMonomorphism ‚Ñô.+-0-rawGroup ùïä.*-1-rawGroup toSign
toSign-isGroupMonomorphism = record
  { isGroupHomomorphism = toSign-isGroupHomomorphism
  ; injective = toSign-injective
  }

toSign-isGroupIsomorphism : IsGroupIsomorphism ‚Ñô.+-0-rawGroup ùïä.*-1-rawGroup toSign
toSign-isGroupIsomorphism = record
  { isGroupMonomorphism = toSign-isGroupMonomorphism
  ; surjective = toSign-surjective
  }


------------------------------------------------------------------------
-- Relating Nat and Parity

-- successor and (_‚Åª¬π)

suc-homo-‚Åª¬π : ‚àÄ n ‚Üí (parity (suc n)) ‚Åª¬π ‚â° parity n
suc-homo-‚Åª¬π zero    = refl
suc-homo-‚Åª¬π (suc n) = ‚Åª¬π-selfInverse (suc-homo-‚Åª¬π n)

-- parity is a _+_ homomorphism

+-homo-+      : ‚àÄ m n ‚Üí parity (m ‚Ñï.+ n) ‚â° parity m ‚Ñô.+ parity n
+-homo-+ zero    n = refl
+-homo-+ (suc m) n = begin
  parity (suc m ‚Ñï.+ n)         ‚â°‚ü® suc-+-homo-‚Åª¬π m n ‚ü©
  (parity m) ‚Åª¬π ‚Ñô.+ parity n   ‚â°‚ü® cong (‚Ñô._+ parity n) (suc-homo-‚Åª¬π (suc m)) ‚ü©
  parity (suc m) ‚Ñô.+ parity n  ‚àé
  where
    open ‚â°-Reasoning
    suc-+-homo-‚Åª¬π : ‚àÄ m n ‚Üí parity (suc m ‚Ñï.+ n) ‚â° (parity m) ‚Åª¬π ‚Ñô.+ parity n
    suc-+-homo-‚Åª¬π zero    n = sym (suc-homo-‚Åª¬π (suc n))
    suc-+-homo-‚Åª¬π (suc m) n = begin
      parity (suc (suc m) ‚Ñï.+ n)        ‚â°‚ü®‚ü©
      parity (m ‚Ñï.+ n)                  ‚â°‚ü® +-homo-+ m n ‚ü©
      parity m ‚Ñô.+ parity n             ‚â°‚ü® cong (‚Ñô._+ parity n) (sym (suc-homo-‚Åª¬π m)) ‚ü©
      (parity (suc m)) ‚Åª¬π ‚Ñô.+ parity n  ‚àé

-- parity is a _*_ homomorphism

*-homo-*      : ‚àÄ m n ‚Üí parity (m ‚Ñï.* n) ‚â° parity m ‚Ñô.* parity n
*-homo-* zero    n = refl
*-homo-* (suc m) n = begin
  parity (suc m ‚Ñï.* n)        ‚â°‚ü®‚ü©
  parity (n ‚Ñï.+ m ‚Ñï.* n)      ‚â°‚ü® +-homo-+ n (m ‚Ñï.* n) ‚ü©
  q ‚Ñô.+ parity (m ‚Ñï.* n)      ‚â°‚ü® cong (q ‚Ñô.+_) (*-homo-* m n) ‚ü©
  q ‚Ñô.+ (p ‚Ñô.* q)             ‚â°‚ü® lemma p q ‚ü©
  (p ‚Åª¬π) ‚Ñô.* q                ‚â°‚ü®‚ü©
  (parity m) ‚Åª¬π ‚Ñô.* q         ‚â°‚ü® cong (‚Ñô._* q) (suc-homo-‚Åª¬π (suc m)) ‚ü©
  parity (suc m) ‚Ñô.* q        ‚â°‚ü®‚ü©
  parity (suc m) ‚Ñô.* parity n ‚àé
  where
    open ‚â°-Reasoning
    p = parity m
    q = parity n
    -- this lemma simplifies things a lot
    lemma : ‚àÄ p q ‚Üí q ‚Ñô.+ (p ‚Ñô.* q) ‚â° (p ‚Åª¬π) ‚Ñô.* q
    lemma 0‚Ñô 0‚Ñô = refl
    lemma 0‚Ñô 1‚Ñô = refl
    lemma 1‚Ñô 0‚Ñô = refl
    lemma 1‚Ñô 1‚Ñô = refl

------------------------------------------------------------------------
-- parity is a Semiring homomorphism from Nat to Parity

parity-isMagmaHomomorphism : IsMagmaHomomorphism ‚Ñï.+-rawMagma ‚Ñô.+-rawMagma parity
parity-isMagmaHomomorphism = record
  { isRelHomomorphism = record
    { cong = cong parity }
  ; homo = +-homo-+
  }

parity-isMonoidHomomorphism : IsMonoidHomomorphism ‚Ñï.+-0-rawMonoid ‚Ñô.+-0-rawMonoid parity
parity-isMonoidHomomorphism = record
  { isMagmaHomomorphism = parity-isMagmaHomomorphism
  ; Œµ-homo = refl
  }

parity-isNearSemiringHomomorphism : IsNearSemiringHomomorphism ‚Ñï.+-*-rawNearSemiring ‚Ñô.+-*-rawNearSemiring parity
parity-isNearSemiringHomomorphism = record
  { +-isMonoidHomomorphism = parity-isMonoidHomomorphism
  ; *-homo = *-homo-*
  }

parity-isSemiringHomomorphism : IsSemiringHomomorphism ‚Ñï.+-*-rawSemiring ‚Ñô.+-*-rawSemiring parity
parity-isSemiringHomomorphism = record
  { isNearSemiringHomomorphism = parity-isNearSemiringHomomorphism
  ; 1#-homo = refl
  }
