------------------------------------------------------------------------
-- The Agda standard library
--
-- Some properties about parities
------------------------------------------------------------------------

{-# OPTIONS --without-K --safe #-}

module Data.Parity.Properties where

open import Algebra.Bundles
open import Data.Empty
open import Data.Parity.Base
open import Data.Product using (_,_)
open import Data.Sign as Sign using (Sign)
open import Function hiding (Inverse)
open import Level using (0‚Ñì)
open import Relation.Binary using (Decidable; DecidableEquality; Setoid; DecSetoid; IsDecEquivalence)
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary using (yes; no)

open import Algebra.Structures {A = Parity} _‚â°_
open import Algebra.Definitions {A = Parity} _‚â°_

open import Algebra.Consequences.Propositional using (comm+distrÀ°‚áídistr ≥)
open import Algebra.Morphism

module ‚Ñôtoùïä = Algebra.Morphism.Definitions Parity Sign _‚â°_
module ùïäto‚Ñô = Algebra.Morphism.Definitions Sign Parity _‚â°_

------------------------------------------------------------------------
-- Equality

infix 4 _‚âü_

_‚âü_ : DecidableEquality Parity
1‚Ñô ‚âü 1‚Ñô = yes refl
1‚Ñô ‚âü 0‚Ñô = no Œª()
0‚Ñô ‚âü 1‚Ñô = no Œª()
0‚Ñô ‚âü 0‚Ñô = yes refl

‚â°-setoid : Setoid 0‚Ñì 0‚Ñì
‚â°-setoid = setoid Parity

‚â°-decSetoid : DecSetoid 0‚Ñì 0‚Ñì
‚â°-decSetoid = decSetoid _‚âü_

‚â°-isDecEquivalence : IsDecEquivalence _‚â°_
‚â°-isDecEquivalence = isDecEquivalence _‚âü_

------------------------------------------------------------------------
-- _·µí

p‚â¢p·µí : ‚àÄ p ‚Üí p ‚â¢ p ·µí
p‚â¢p·µí 1‚Ñô ()
p‚â¢p·µí 0‚Ñô ()

·µí-inverts : ‚àÄ {p q} ‚Üí p ·µí ‚â° q ‚Üí p ‚â° q ·µí
·µí-inverts { 1‚Ñô } { 0‚Ñô } refl = refl
·µí-inverts { 0‚Ñô } { 1‚Ñô } refl = refl

·µí-involutive : ‚àÄ p ‚Üí (p ·µí) ·µí ‚â° p
·µí-involutive p = sym (·µí-inverts refl)

·µí-injective : ‚àÄ {p q} ‚Üí p ·µí ‚â° q ·µí ‚Üí p ‚â° q
·µí-injective {p} {q} eq = begin
  p       ‚â°‚ü® ·µí-inverts eq ‚ü©
  (q ·µí) ·µí ‚â°‚ü® ·µí-involutive q ‚ü©
  q       ‚àé where open ‚â°-Reasoning

------------------------------------------------------------------------
-- ·µí and _+_

p+p·µí‚â°1‚Ñô : ‚àÄ p ‚Üí p + p ·µí ‚â° 1‚Ñô
p+p·µí‚â°1‚Ñô 0‚Ñô = refl
p+p·µí‚â°1‚Ñô 1‚Ñô = refl

p·µí+p‚â°1‚Ñô : ‚àÄ p ‚Üí p ·µí + p ‚â° 1‚Ñô
p·µí+p‚â°1‚Ñô 0‚Ñô = refl
p·µí+p‚â°1‚Ñô 1‚Ñô = refl

------------------------------------------------------------------------
-- ·µí and _*_

p*p·µí‚â°0‚Ñô : ‚àÄ p ‚Üí p * p ·µí ‚â° 0‚Ñô
p*p·µí‚â°0‚Ñô 0‚Ñô = refl
p*p·µí‚â°0‚Ñô 1‚Ñô = refl

p·µí*p‚â°0‚Ñô : ‚àÄ p ‚Üí p ·µí * p ‚â° 0‚Ñô
p·µí*p‚â°0‚Ñô 0‚Ñô = refl
p·µí*p‚â°0‚Ñô 1‚Ñô = refl

------------------------------------------------------------------------
-- _+_

-- Algebraic properties of _+_

p+p‚â°0‚Ñô : ‚àÄ p ‚Üí p + p ‚â° 0‚Ñô
p+p‚â°0‚Ñô 0‚Ñô = refl
p+p‚â°0‚Ñô 1‚Ñô = refl

+-identityÀ° : LeftIdentity 0‚Ñô _+_
+-identityÀ° _ = refl

+-identity ≥ : RightIdentity 0‚Ñô _+_
+-identity ≥ 1‚Ñô = refl
+-identity ≥ 0‚Ñô = refl

+-identity : Identity 0‚Ñô _+_
+-identity = +-identityÀ°  , +-identity ≥

+-comm : Commutative _+_
+-comm 0‚Ñô 0‚Ñô = refl
+-comm 0‚Ñô 1‚Ñô = refl
+-comm 1‚Ñô 0‚Ñô = refl
+-comm 1‚Ñô 1‚Ñô = refl

+-assoc : Associative _+_
+-assoc 0‚Ñô 0‚Ñô _ = refl
+-assoc 0‚Ñô 1‚Ñô _ = refl
+-assoc 1‚Ñô 0‚Ñô _ = refl
+-assoc 1‚Ñô 1‚Ñô 0‚Ñô = refl
+-assoc 1‚Ñô 1‚Ñô 1‚Ñô = refl

+-cancel ≥-‚â° : RightCancellative _+_
+-cancel ≥-‚â° _ 1‚Ñô 1‚Ñô _  = refl
+-cancel ≥-‚â° _ 1‚Ñô 0‚Ñô eq = ‚ä•-elim (p‚â¢p·µí _ $ sym eq)
+-cancel ≥-‚â° _ 0‚Ñô 1‚Ñô eq = ‚ä•-elim (p‚â¢p·µí _ eq)
+-cancel ≥-‚â° _ 0‚Ñô 0‚Ñô _  = refl

+-cancelÀ°-‚â° : LeftCancellative _+_
+-cancelÀ°-‚â° 1‚Ñô _ _ eq = ·µí-injective eq
+-cancelÀ°-‚â° 0‚Ñô _ _ eq = eq

+-cancel-‚â° : Cancellative _+_
+-cancel-‚â° = +-cancelÀ°-‚â° , +-cancel ≥-‚â°

+-inverse : Inverse 0‚Ñô id _+_
+-inverse = p+p‚â°0‚Ñô , p+p‚â°0‚Ñô

------------------------------------------------------------------------
-- Bundles

+-rawMagma : RawMagma 0‚Ñì 0‚Ñì
+-rawMagma = record { _‚âà_ = _‚â°_ ; _‚àô_ = _+_ }

+-0-rawMonoid : RawMonoid 0‚Ñì 0‚Ñì
+-0-rawMonoid = record { _‚âà_ = _‚â°_ ; _‚àô_ = _+_ ; Œµ = 0‚Ñô }

+-isMagma : IsMagma _+_
+-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _+_
  }

+-magma : Magma 0‚Ñì 0‚Ñì
+-magma = record
  { isMagma = +-isMagma
  }

+-isSemigroup : IsSemigroup _+_
+-isSemigroup = record
  { isMagma = +-isMagma
  ; assoc   = +-assoc
  }

+-semigroup : Semigroup 0‚Ñì 0‚Ñì
+-semigroup = record
  { isSemigroup = +-isSemigroup
  }

+-isCommutativeSemigroup : IsCommutativeSemigroup _+_
+-isCommutativeSemigroup = record
  { isSemigroup = +-isSemigroup
  ; comm = +-comm
  }

+-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
+-commutativeSemigroup = record
  { isCommutativeSemigroup = +-isCommutativeSemigroup
  }

+-0-isMonoid : IsMonoid _+_ 0‚Ñô
+-0-isMonoid = record
  { isSemigroup = +-isSemigroup
  ; identity    = +-identity
  }

+-monoid : Monoid 0‚Ñì 0‚Ñì
+-monoid = record
  { isMonoid = +-0-isMonoid
  }

+-0-isCommutativeMonoid : IsCommutativeMonoid _+_ 0‚Ñô
+-0-isCommutativeMonoid = record
   { isMonoid = +-0-isMonoid
   ; comm = +-comm
   }

+-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
+-commutativeMonoid = record
  { isCommutativeMonoid = +-0-isCommutativeMonoid
  }

+-0-isGroup : IsGroup _+_ 0‚Ñô id
+-0-isGroup = record
  { isMonoid = +-0-isMonoid
  ; inverse = +-inverse
  ; ‚Åª¬π-cong = id
  }

+-0-group : Group 0‚Ñì 0‚Ñì
+-0-group = record
  { isGroup = +-0-isGroup
  }

+-0-isAbelianGroup : IsAbelianGroup _+_ 0‚Ñô id
+-0-isAbelianGroup = record
  { isGroup = +-0-isGroup
  ; comm = +-comm
  }

+-0-abelianGroup : AbelianGroup 0‚Ñì 0‚Ñì
+-0-abelianGroup = record
  { isAbelianGroup = +-0-isAbelianGroup
  }

------------------------------------------------------------------------
-- _*_

-- Algebraic properties of _*_

*-idem : Idempotent _*_
*-idem 0‚Ñô = refl
*-idem 1‚Ñô = refl

*-comm : Commutative _*_
*-comm 0‚Ñô 0‚Ñô = refl
*-comm 0‚Ñô 1‚Ñô = refl
*-comm 1‚Ñô 0‚Ñô = refl
*-comm 1‚Ñô 1‚Ñô = refl

*-assoc : Associative _*_
*-assoc 0‚Ñô 0‚Ñô _ = refl
*-assoc 0‚Ñô 1‚Ñô _ = refl
*-assoc 1‚Ñô 0‚Ñô _ = refl
*-assoc 1‚Ñô 1‚Ñô 0‚Ñô = refl
*-assoc 1‚Ñô 1‚Ñô 1‚Ñô = refl

*-distribÀ°-+ : _*_ DistributesOverÀ° _+_
*-distribÀ°-+ 0‚Ñô q r = refl
*-distribÀ°-+ 1‚Ñô 0‚Ñô 0‚Ñô = refl
*-distribÀ°-+ 1‚Ñô 0‚Ñô 1‚Ñô = refl
*-distribÀ°-+ 1‚Ñô 1‚Ñô 0‚Ñô = refl
*-distribÀ°-+ 1‚Ñô 1‚Ñô 1‚Ñô = refl

*-distrib ≥-+ : _*_ DistributesOver ≥ _+_
*-distrib ≥-+ = comm+distrÀ°‚áídistr ≥ *-comm *-distribÀ°-+

*-distrib-+ : _*_ DistributesOver _+_
*-distrib-+ = *-distribÀ°-+ , *-distrib ≥-+

*-zeroÀ° : LeftZero 0‚Ñô _*_
*-zeroÀ° p = refl

*-zero ≥ : RightZero 0‚Ñô _*_
*-zero ≥ p = *-comm p 0‚Ñô

*-zero : Zero 0‚Ñô _*_
*-zero = *-zeroÀ° , *-zero ≥

*-identityÀ° : LeftIdentity 1‚Ñô _*_
*-identityÀ° _ = refl

*-identity ≥ : RightIdentity 1‚Ñô _*_
*-identity ≥ 1‚Ñô = refl
*-identity ≥ 0‚Ñô = refl

*-identity : Identity 1‚Ñô _*_
*-identity = *-identityÀ°  , *-identity ≥

------------------------------------------------------------------------
-- Bundles

*-rawMagma : RawMagma 0‚Ñì 0‚Ñì
*-rawMagma = record { _‚âà_ = _‚â°_ ; _‚àô_ = _*_ }

*-1-rawMonoid : RawMonoid 0‚Ñì 0‚Ñì
*-1-rawMonoid = record { _‚âà_ = _‚â°_ ; _‚àô_ = _*_ ; Œµ = 1‚Ñô }

*-isMagma : IsMagma _*_
*-isMagma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _*_
  }

*-magma : Magma 0‚Ñì 0‚Ñì
*-magma = record
  { isMagma = *-isMagma
  }

*-isSemigroup : IsSemigroup _*_
*-isSemigroup = record
  { isMagma = *-isMagma
  ; assoc   = *-assoc
  }

*-semigroup : Semigroup 0‚Ñì 0‚Ñì
*-semigroup = record
  { isSemigroup = *-isSemigroup
  }

*-isCommutativeSemigroup : IsCommutativeSemigroup _*_
*-isCommutativeSemigroup = record
  { isSemigroup = *-isSemigroup
  ; comm = *-comm
  }

*-commutativeSemigroup : CommutativeSemigroup 0‚Ñì 0‚Ñì
*-commutativeSemigroup = record
  { isCommutativeSemigroup = *-isCommutativeSemigroup
  }

*-1-isMonoid : IsMonoid _*_ 1‚Ñô
*-1-isMonoid = record
  { isSemigroup = *-isSemigroup
  ; identity    = *-identity
  }

*-monoid : Monoid 0‚Ñì 0‚Ñì
*-monoid = record
  { isMonoid = *-1-isMonoid
  }

*-1-isCommutativeMonoid : IsCommutativeMonoid _*_ 1‚Ñô
*-1-isCommutativeMonoid = record
   { isMonoid = *-1-isMonoid
   ; comm = *-comm
   }

*-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
*-commutativeMonoid = record
  { isCommutativeMonoid = *-1-isCommutativeMonoid
  }

*-1-commutativeMonoid : CommutativeMonoid 0‚Ñì 0‚Ñì
*-1-commutativeMonoid = record
  { isCommutativeMonoid = *-1-isCommutativeMonoid
  }

+-*-isSemiring : IsSemiring _+_ _*_ 0‚Ñô 1‚Ñô
+-*-isSemiring = record
  { isSemiringWithoutAnnihilatingZero = record
    { +-isCommutativeMonoid = +-0-isCommutativeMonoid
    ; *-cong = cong‚ÇÇ _*_
    ; *-assoc = *-assoc
    ; *-identity = *-identity
    ; distrib = *-distrib-+
    }
  ; zero = *-zero
  }

+-*-semiring : Semiring 0‚Ñì 0‚Ñì
+-*-semiring = record
  { isSemiring = +-*-isSemiring
  }

+-*-isCommutativeSemiring : IsCommutativeSemiring _+_ _*_ 0‚Ñô 1‚Ñô
+-*-isCommutativeSemiring = record
  { isSemiring = +-*-isSemiring
  ; *-comm = *-comm
  }

+-*-commutativeSemiring : CommutativeSemiring 0‚Ñì 0‚Ñì
+-*-commutativeSemiring = record
  { isCommutativeSemiring = +-*-isCommutativeSemiring
  }

+-*-isRing : IsRing _+_ _*_ id 0‚Ñô 1‚Ñô
+-*-isRing = record
  { +-isAbelianGroup = +-0-isAbelianGroup
  ; *-cong           = cong‚ÇÇ _*_
  ; *-assoc          = *-assoc
  ; *-identity       = *-identity
  ; distrib          = *-distrib-+
  ; zero             = *-zero
  }

+-*-ring : Ring 0‚Ñì 0‚Ñì
+-*-ring = record
  { isRing = +-*-isRing
  }

+-*-isCommutativeRing : IsCommutativeRing _+_ _*_ id 0‚Ñô 1‚Ñô
+-*-isCommutativeRing = record
  { isRing = +-*-isRing
  ; *-comm = *-comm
  }

+-*-commutativeRing : CommutativeRing 0‚Ñì 0‚Ñì
+-*-commutativeRing = record
  { isCommutativeRing = +-*-isCommutativeRing
  }

------------------------------------------------------------------------
-- relating Parity and Sign -- where should this go?

{- TODO!!!
   show that ‚Ñôtoùïä/ùïäto‚Ñô form an Abelian group isomorphism
   between (Parity, _+_, 0‚Ñô) and  (ùïä, _*_, 1ùïä)    -}

------------------------------------------------------------------------
-- relating Nat and Parity -- where should this go?

{- TODO!!!
   show that ‚Ñïto‚Ñô is a commutative semiring homomorphism
   between (‚Ñï, _+_, 0‚Ñï _*_, 1‚Ñï) and  (Parity, _+_, 0‚Ñô, _*_, 1‚Ñô)
-}
