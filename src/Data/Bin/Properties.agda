------------------------------------------------------------------------
-- The Agda standard library
--
-- Properties of the binary representation of natural numbers
------------------------------------------------------------------------

module Data.Bin.Properties where

open import Data.Bin
open import Data.Digit using (Bit; Expansion)
import Data.Fin as Fin
import Data.Fin.Properties as ùîΩ‚Çö
open import Data.List.Base using (List; []; _‚à∑_)
open import Data.List.Properties using (‚à∑-injective)
open import Data.Nat
  using (‚Ñï; zero; z‚â§n; s‚â§s)
  renaming (suc to 1+_; _+_ to _+‚Ñï_; _*_ to _*‚Ñï_; _‚â§_ to _‚â§‚Ñï_)
import Data.Nat.Properties as ‚Ñï‚Çö
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ)
open import Function using (_‚àò_)
open import Relation.Binary
open import Relation.Binary.Consequences
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; sym; isEquivalence; resp‚ÇÇ; decSetoid)
open import Relation.Nullary using (yes; no)

------------------------------------------------------------------------
-- (Bin, _‚â°_) is a decidable setoid

1#-injective : ‚àÄ {as bs} ‚Üí as 1# ‚â° bs 1# ‚Üí as ‚â° bs
1#-injective refl = refl

infix 4 _‚âü_ _‚âü‚Çë_

_‚âü‚Çë_ : ‚àÄ {base} ‚Üí Decidable (_‚â°_ {A = Expansion base})
_‚âü‚Çë_ []       []       = yes refl
_‚âü‚Çë_ []       (_ ‚à∑ _)  = no Œª()
_‚âü‚Çë_ (_ ‚à∑ _) []        = no Œª()
_‚âü‚Çë_ (x ‚à∑ xs) (y ‚à∑ ys) with x Fin.‚âü y | xs ‚âü‚Çë ys
... | _        | no xs‚â¢ys = no (xs‚â¢ys ‚àò proj‚ÇÇ ‚àò ‚à∑-injective)
... | no  x‚â¢y  | _        = no (x‚â¢y   ‚àò proj‚ÇÅ ‚àò ‚à∑-injective)
... | yes refl | yes refl = yes refl

_‚âü_ : Decidable {A = Bin} _‚â°_
0#    ‚âü 0#    = yes refl
0#    ‚âü bs 1# = no Œª()
as 1# ‚âü 0#    = no Œª()
as 1# ‚âü bs 1# with as ‚âü‚Çë bs
... | yes refl  = yes refl
... | no  as‚â¢bs = no (as‚â¢bs ‚àò 1#-injective)

‚â°-isDecEquivalence : IsDecEquivalence _‚â°_
‚â°-isDecEquivalence = record
  { isEquivalence = isEquivalence
  ; _‚âü_           = _‚âü_
  }

‚â°-decSetoid : DecSetoid _ _
‚â°-decSetoid = decSetoid _‚âü_

------------------------------------------------------------------------
-- (Bin _‚â°_ _<_) is a strict total order

<-trans : Transitive _<_
<-trans (less lt‚ÇÅ) (less lt‚ÇÇ) = less (‚Ñï‚Çö.<-trans lt‚ÇÅ lt‚ÇÇ)

<-asym : Asymmetric _<_
<-asym (less lt) (less gt) = ‚Ñï‚Çö.<-asym lt gt

<-irrefl : Irreflexive _‚â°_ _<_
<-irrefl refl (less lt) = ‚Ñï‚Çö.<-irrefl refl lt

‚à∑ ≥-mono-< : ‚àÄ {a b as bs} ‚Üí as 1# < bs 1# ‚Üí (a ‚à∑ as) 1# < (b ‚à∑ bs) 1#
‚à∑ ≥-mono-< {a} {b} {as} {bs} (less lt) = less (begin
  1+ (m‚ÇÅ +‚Ñï n‚ÇÅ *‚Ñï 2) ‚â§‚ü® s‚â§s (‚Ñï‚Çö.+-monoÀ°-‚â§ _ (ùîΩ‚Çö.to‚Ñï‚â§pred[n] a)) ‚ü©
  1+ (1 +‚Ñï n‚ÇÅ *‚Ñï 2)  ‚â°‚ü® refl ‚ü©
  1+ n‚ÇÅ *‚Ñï 2         ‚â§‚ü® ‚Ñï‚Çö.*-mono-‚â§ lt ‚Ñï‚Çö.‚â§-refl ‚ü©
  n‚ÇÇ *‚Ñï 2            ‚â§‚ü® ‚Ñï‚Çö.n‚â§m+n m‚ÇÇ (n‚ÇÇ *‚Ñï 2) ‚ü©
  m‚ÇÇ +‚Ñï n‚ÇÇ *‚Ñï 2      ‚àé)
  where
  open ‚Ñï‚Çö.‚â§-Reasoning
  m‚ÇÅ = Fin.to‚Ñï a;   m‚ÇÇ = Fin.to‚Ñï b
  n‚ÇÅ = to‚Ñï (as 1#); n‚ÇÇ = to‚Ñï (bs 1#)

‚à∑À°-mono-< : ‚àÄ {a b bs} ‚Üí a Fin.< b ‚Üí (a ‚à∑ bs) 1# < (b ‚à∑ bs) 1#
‚à∑À°-mono-< {a} {b} {bs} lt = less (begin
  1 +‚Ñï (m‚ÇÅ  +‚Ñï n *‚Ñï 2)  ‚â°‚ü® sym (‚Ñï‚Çö.+-assoc 1 m‚ÇÅ (n *‚Ñï 2)) ‚ü©
  (1 +‚Ñï m‚ÇÅ) +‚Ñï n *‚Ñï 2   ‚â§‚ü® ‚Ñï‚Çö.+-monoÀ°-‚â§ _ lt ‚ü©
  m‚ÇÇ  +‚Ñï n *‚Ñï 2   ‚àé)
  where
  open ‚Ñï‚Çö.‚â§-Reasoning
  m‚ÇÅ = Fin.to‚Ñï a; m‚ÇÇ = Fin.to‚Ñï b; n = to‚Ñï (bs 1#)

1<[23] : ‚àÄ {b} ‚Üí [] 1# < (b ‚à∑ []) 1#
1<[23] {b} = less (‚Ñï‚Çö.n‚â§m+n (Fin.to‚Ñï b) 2)

1<2+ : ‚àÄ {b bs} ‚Üí [] 1# < (b ‚à∑ bs) 1#
1<2+ {_} {[]}     = 1<[23]
1<2+ {_} {b ‚à∑ bs} = <-trans 1<[23] (‚à∑ ≥-mono-< {a = b} 1<2+)

0<1+ : ‚àÄ {bs} ‚Üí 0# < bs 1#
0<1+ {[]}     = less (s‚â§s z‚â§n)
0<1+ {b ‚à∑ bs} = <-trans (less (s‚â§s z‚â§n)) 1<2+

<‚áí‚â¢ : ‚àÄ {a b} ‚Üí a < b ‚Üí a ‚â¢ b
<‚áí‚â¢ lt eq = asym‚ü∂irr (resp‚ÇÇ _<_) sym <-asym eq lt

<-cmp : Trichotomous _‚â°_ _<_
<-cmp 0#            0#            = tri‚âà (<-irrefl refl) refl (<-irrefl refl)
<-cmp 0#            (_ 1#)        = tri< 0<1+ (<‚áí‚â¢ 0<1+) (<-asym 0<1+)
<-cmp (_ 1#)        0#            = tri> (<-asym 0<1+) (<‚áí‚â¢ 0<1+ ‚àò sym) 0<1+
<-cmp ([] 1#)       ([] 1#)       = tri‚âà (<-irrefl refl) refl (<-irrefl refl)
<-cmp ([] 1#)       ((b ‚à∑ bs) 1#) = tri< 1<2+ (<‚áí‚â¢ 1<2+) (<-asym 1<2+)
<-cmp ((a ‚à∑ as) 1#) ([] 1#)       = tri> (<-asym 1<2+) (<‚áí‚â¢ 1<2+ ‚àò sym) 1<2+
<-cmp ((a ‚à∑ as) 1#) ((b ‚à∑ bs) 1#) with <-cmp (as 1#) (bs 1#)
... | tri<  lt ¬¨eq ¬¨gt =
  tri< (‚à∑ ≥-mono-< lt)  (<‚áí‚â¢ (‚à∑ ≥-mono-< lt)) (<-asym (‚à∑ ≥-mono-< lt))
... | tri> ¬¨lt ¬¨eq  gt =
  tri> (<-asym (‚à∑ ≥-mono-< gt)) (<‚áí‚â¢ (‚à∑ ≥-mono-< gt) ‚àò sym) (‚à∑ ≥-mono-< gt)
... | tri‚âà ¬¨lt refl ¬¨gt with ùîΩ‚Çö.<-cmp a b
...   | tri‚âà ¬¨lt‚Ä≤ refl ¬¨gt‚Ä≤ =
  tri‚âà (<-irrefl refl) refl (<-irrefl refl)
...   | tri<  lt‚Ä≤ ¬¨eq  ¬¨gt‚Ä≤ =
  tri< (‚à∑À°-mono-< lt‚Ä≤)  (<‚áí‚â¢ (‚à∑À°-mono-< lt‚Ä≤)) (<-asym (‚à∑À°-mono-< lt‚Ä≤))
...   | tri> ¬¨lt‚Ä≤ ¬¨eq  gt‚Ä≤  =
  tri> (<-asym (‚à∑À°-mono-< gt‚Ä≤)) (<‚áí‚â¢ (‚à∑À°-mono-< gt‚Ä≤) ‚àò sym) (‚à∑À°-mono-< gt‚Ä≤)

<-isStrictTotalOrder : IsStrictTotalOrder _‚â°_ _<_
<-isStrictTotalOrder = record
  { isEquivalence = isEquivalence
  ; trans         = <-trans
  ; compare       = <-cmp
  }

<-strictTotalOrder : StrictTotalOrder _ _ _
<-strictTotalOrder = record
  { Carrier            = Bin
  ; _‚âà_                = _‚â°_
  ; _<_                = _<_
  ; isStrictTotalOrder = <-isStrictTotalOrder
  }
